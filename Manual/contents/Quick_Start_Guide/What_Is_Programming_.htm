<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Qu'est-ce que la programmation ?</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="A brief description of what makes a program, generally and specifically using GameMaker." />
  <meta name="rh-index-keywords" content="Quick Start - What Is Programming?" />
  <meta name="search-keywords" content="programming" />
  <meta name="robots" content="NOODP" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Qu'est-ce que la programmation ?</h1>
  <p>Dans la <a href="Quick_Start_Guide.htm">section précédente</a>, nous avons expliqué comment <span data-keyref="GameMaker Name">GameMaker</span> fonctionne pour créer votre jeu, mais quels que soient les <span class="notranslate">sprites</span>, les objets ou les pièces que vous avez ajoutés, rien ne se produira si vous ne l'avez pas <strong>programmé </strong>. Mais, qu'est-ce qu'un programme ?</p>
  <p>Au sens général, un programme est simplement un ensemble d'instructions (ou <strong> <a class="glossterm" data-glossterm="déclaration" href="#">déclaration</a></strong><span class="glossextra">s</span>) que vous donnez à l'ordinateur pour lui demander d'effectuer certaines tâches. Ces tâches peuvent varier considérablement, allant du simple fait de demander à l'ordinateur de dessiner quelque chose à l'écran, au calcul d'une valeur basée sur une entrée utilisateur et à sa réaction, mais dans tous les cas, il s'agit d'une structure logique qui donnera un résultat. Dans la page précédente, nous avons parlé du déplacement d'une instance d'un objet vers la droite de 2 pixels, alors regardons le programme réel qui ferait cela :</p>
  <p>En <span data-keyref="GML_Visual">GML Visual</span>, cela ressemblerait à ceci :</p>
  <p><img alt="GML VisualExample" class="center" src="../assets/Images/QS_Guide/QS_DnD_Example.png" /></p>
  <p>Et en utilisant le <span data-keyref="GML_Code">code GML</span>, cela ressemblerait à ceci :</p>
  <p class="code">x = x + 2;</p>
  <p>Pour comprendre ce qui se passe ci-dessus, nous devons d'abord parler des <strong>variables</strong>, puis des <strong>fonctions </strong>et enfin des <strong>conditionnels </strong>, car ces trois éléments constituent généralement l'essentiel de tout programme.</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down" href="What_Is_Programming_.htm#">Variables</a></p>
  <div class="droptext" data-targetname="drop_down">
    <p class="dropspot">Les variables sont la pierre angulaire de la programmation, avec les <strong>fonctions </strong>(que nous aborderons brièvement dans un moment). Une variable est simplement une <em>valeur nommée</em>, et dans le cas ci-dessus, la variable s'appelle &quot;<span class="inline">x</span>&quot;. Maintenant, &quot;<span class="inline">x</span>&quot; peut être n'importe quelle valeur, comme -126, ou 583, ou même 1.56378, mais la valeur réelle de &quot;<span class="inline">x</span>&quot; n'est pas pertinente car elle peut varier (d'où le nom de &quot; variable &quot;). Ce qui est important, c'est que nous prenions &quot;<span class="inline">x</span>&quot; et que nous lui ajoutions 2. Il est intéressant de noter que dans ce cas, &quot;<span class="inline">x</span>&quot; est une <strong>variable intégrée</strong>, ce qui signifie qu'il s'agit d'une variable créée par <span data-keyref="GameMaker Name">GameMaker</span> pour tous les objets, mais vous pouvez également créer vos propres variables.</p>
    <p class="dropspot">Pour créer une variable, il faut la <strong>déclarer </strong>avant de pouvoir l'utiliser. Déclarer une variable, c'est dire à <span data-keyref="GameMaker Name">GameMaker</span> que cette nouvelle variable existe et qu'elle a une valeur initiale. Pour déclarer une variable, il suffit de faire quelque chose comme ceci :</p>
    <p class="dropspot"><img alt="Declare GML VisualVariables" class="center" src="../assets/Images/QS_Guide/QS_DnD_Declare.png" /></p>
    <p class="dropspot">ou :</p>
    <p class="code">points = 0;</p>
    <p class="dropspot">Une fois qu'une variable a été déclarée, elle peut être utilisée dans d'autres codes ou actions programmés. L'avantage des variables est qu'elles vous permettent de &quot;réutiliser&quot; une valeur à plusieurs endroits, sans avoir à vous préoccuper de sa valeur. Par exemple, disons que vous avez une variable &quot;<span class="inline">damage</span>&quot; et que vous l'utilisez à différents endroits pour indiquer à <span data-keyref="GameMaker Name">GameMaker</span> d'infliger un certain nombre de dégâts à d'autres objets du jeu. Nous pouvons déclarer la valeur 20 pour &quot;<span class="inline">damage</span>&quot;, mais décider plus tard que cette valeur est trop élevée et vouloir la changer en 10. Si nous avions utilisé la valeur 20 au lieu d'une variable, nous aurions dû passer par tout notre code ou toutes nos actions pour changer 20 en 10, ce qui prend du temps et est source d'erreurs. Cependant, l'utilisation d'une variable signifie que nous ne devons la changer qu'<em>une seule fois </em>en 10 lorsque nous la déclarons et que le reste du code ou des actions utiliseront cette nouvelle valeur.</p>
    <p class="dropspot">Il convient de noter qu'il existe de nombreux types de variables, et que chacune d'entre elles peut être utilisée de manière légèrement différente. Nous n'aborderons pas ce sujet ici, mais vous pouvez trouver plus d'informations dans la section <a href="../GameMaker_Language/GML_Overview/Variables_And_Variable_Scope.htm">Présentation du langage GameMaker</a> du manuel.</p>
    <p class="dropspot">Cependant, les variables ne sont que la première partie de l'histoire. La partie suivante est l'utilisation des fonctions...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down1" href="What_Is_Programming_.htm#">Fonctions</a></p>
  <div class="droptext" data-targetname="drop_down1">
    <p class="dropspot">L'autre partie importante de la programmation est l'utilisation de <strong>fonctions </strong>et de variables. Une fonction est simplement une instruction donnée à l'ordinateur pour qu'il fasse quelque chose, et elle peut avoir des valeurs d'entrée ainsi que des valeurs de sortie (c'est-à-dire que vous pouvez lui donner une valeur, et elle effectuera une opération puis renverra une valeur différente), bien que toutes les fonctions ne nécessitent pas d'entrée, ni n'ont de sortie. Pour mieux comprendre cela, examinons une fonction intégrée dans <span data-keyref="GameMaker Name">GameMaker</span>.</p>
    <p class="dropspot">La fonction que nous allons examiner est <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>qui, dans <span class="notranslate">GML</span> Visual, est l'action <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Get_Instance_Count.htm">Get Instance Count</a>. Cette fonction/action récupère le nombre d'instances d'un objet donné dans la salle de jeu, et vous pouvez l'utiliser comme suit :</p>
    <p class="dropspot"><img alt="Get Instance Count GML VisualAction" class="center" src="../assets/Images/QS_Guide/QS_DnD_GetInstanceCount.png" /></p>
    <p class="dropspot">ou :</p>
    <p class="code">number = instance_number(obj_Enemy);</p>
    <p class="dropspot">Dans les deux exemples ci-dessus, la fonction prend un ID d'objet comme valeur d'entrée (le paramètre <strong> <a class="glossterm" data-glossterm="argument" href="#">argument</a></strong> ou <strong>paramètre</strong>) et donnera une valeur de sortie (la valeur de <strong>retour </strong>), qui est le nombre d'instances de l'objet donné présentes dans la pièce lorsque la fonction/action a été appelée. Notez que nous utilisons une variable pour stocker la valeur de retour, la variable &quot;<span class="inline">number</span>&quot;. Cette variable peut être déclarée avant l'exécution de ce code, ou bien elle sera considérée comme étant déclarée lors de l'exécution du code et la valeur de retour de la fonction/action lui sera attribuée.</p>
    <p class="dropspot">Il convient de noter que vous n'êtes pas limité à l'utilisation des actions intégrées de <span class="notranslate">GameMaker Language</span> ou <span class="notranslate">GML</span> Visual et que vous pouvez construire vos propres fonctions pour étendre les possibilités de programmation (vous pouvez en savoir plus à ce sujet <a href="../GameMaker_Language/GML_Overview/Script_Functions.htm">ici</a> pour <span class="notranslate">GML</span> et <a href="../Drag_And_Drop/Drag_And_Drop_Overview/Action_Block_Functions.htm">ici</a> pour <span class="notranslate">GML</span> Visual).</p>
    <p class="dropspot">Vous pouvez faire beaucoup de choses avec les fonctions et les variables, mais elles seraient pratiquement inutiles sans la dernière pièce importante de l'histoire de la programmation, les <strong>conditionnelles</strong>...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop_down2" href="What_Is_Programming_.htm#">Conditionnels</a></p>
  <div class="droptext" data-targetname="drop_down2">
    <p class="dropspot">Une grande partie de la programmation consiste à poser des questions. Ces questions sont généralement simples et peuvent être évaluées à true ou false, et sont appelées <strong>conditionnelles </strong>(et les valeurs de <span class="inline">true </span>et <span class="inline">false </span>sont appelées valeurs <strong>booléennes </strong>). La conditionnelle la plus courante et la plus utilisée est la question &quot;<span class="inline">if</span>&quot;, qui est utilisée pour vérifier si quelque chose est <span class="inline">true </span>ou <span class="inline">false </span>et agir en conséquence. Un exemple simple serait de retirer un personnage du jeu si sa santé passe en dessous de zéro, ce qui, en langage clair, s'exprimerait ainsi :</p>
    <p class="code">if the character variable &quot;hp&quot; is less than or equal to zero, then destroy it.</p>
    <p class="dropspot">Pour transformer ce qui précède en code, nous aurions ceci :</p>
    <p class="dropspot"><img alt="GML VisualConditional" class="center" src="../assets/Images/QS_Guide/QS_DnD_Conditional.png" /></p>
    <p class="dropspot">ou :</p>
    <p class="code">if (hp &lt;= 0)<br />
      {<br />
      <br />
          instance_destroy();<br />
      <br />
      }
    </p>
    <p class="dropspot">Donc, ci-dessus, nous posons la question &quot;si la variable hp est inférieure ou égale à 0&quot; et ensuite, si cette évaluation est vraie, nous appelons la fonction <a href="../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_destroy.htm"><span class="inline">instance_destroy()</span></a> ou l'action <a href="../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Destroy_Object_Instance.htm">Destroy Object Instance</a>. Notez que le &quot;<span class="inline">then</span>&quot; (si quelque chose... alors quelque chose...) est <em>implicite </em>et que vous n'avez pas besoin de l'ajouter, et notez également que dans le code <span class="notranslate">GML</span>, nous utilisons les accolades <span class="inline">{} </span>pour &quot; bloquer &quot; le code que nous voulons exécuter lorsque le &quot; <span class="inline">if</span>&quot; évalue <span class="inline">true </span>(dans <span class="notranslate">GML</span> Visual, cela est symbolisé par l'abandon des actions à <em>droite </em>de l'action &quot;<span class="inline">If</span>&quot;). Tout ce qui est ajouté entre les accolades ne sera exécuté que si l'évaluation de &quot; <span class="inline">if</span>&quot; correspond à <span class="inline">true</span>, de sorte que vous pouvez avoir plus d'une instruction exécutée dans un seul &quot; bloc &quot;.</p>
    <p class="dropspot">Une autre chose à noter lors de l'utilisation de la condition &quot;<span class="inline">if</span>&quot; est que nous pouvons y ajouter une déclaration &quot;<span class="inline">else</span>&quot;, de sorte que la condition deviendrait alors &quot; si quelque chose évalue <span class="inline">true </span>alors faites quelque chose, <em>sinon </em>faites quelque chose de différent &quot;. De cette façon, nous pouvons traiter une expression conditionnelle qui renvoie <span class="inline">true </span> <em>ou </em> <span class="inline">false</span>. Donnons un exemple de cela aussi :</p>
    <p class="dropspot"><img alt="GML VisualIf... Else.. Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_IfElse.png" /></p>
    <p class="dropspot">ou :</p>
    <p class="code">if (countdown &lt;= 0)<br />
      {<br />
      <br />
          instance_create_layer(x, y, &quot;Instances&quot;, obj_Bullet);<br />
      <br />
          countdown = 30;<br />
      <br />
      }<br />
      else<br />
      {<br />
      <br />
          countdown = countdown - 1;<br />
      <br />
      }
    </p>
    <p class="dropspot">Le code ci-dessus se traduit en langage clair par :</p>
    <p class="code">if the countdown variable is less than or equal to zero then:<br />
      <br />
          create an instance of the object &quot;obj_Bullet&quot; at the current x/y position on the layer &quot;instances&quot;,<br />
      <br />
          reset the countdown variable to 30.<br />
      <br />
      else - meaning the countdown variable is more than zero:<br />
      <br />
          subtract one from the countdown variable.
    </p>
    <p class="dropspot">Ne vous inquiétez pas trop de la partie création d'instance du code ci-dessus, car nous la couvrirons plus en détail dans les sections suivantes. La chose importante à comprendre ici est que vous pouvez créer des expressions conditionnelles qui vérifient si quelque chose est <span class="inline">true </span>ou <span class="inline">false </span>et faire en sorte que votre programme réponde de différentes manières. Cela peut sembler très simple, mais c'est en fait incroyablement puissant et cela constituera la base de presque tout ce que vous ferez en programmant dans <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  </div>
  <p> </p>
  <p>Ainsi, pour répondre à notre question &quot;Qu'est-ce que la programmation ?&quot;, nous pouvons dire que la <strong>programmation </strong>consiste à utiliser une combinaison d'<strong>instructions - </strong> qui peuvent utiliser <strong> <a class="glossterm" data-glossterm="variable" href="#">variable</a></strong> <span class="glossextra">s</span><strong> </strong>pour former des <strong> <a class="glossterm" data-glossterm="expression" href="#">expression</a></strong><span class="glossextra">s</span>, des <strong>fonctions </strong>pour effectuer des tâches et des <strong><a class="glossterm" data-glossterm="conditionnel" href="#">conditionnel</a></strong> pour poser des questions - et à exécuter ces instructions simultanément pour atteindre un objectif. Vous pouvez voir ci-dessous un programme légèrement plus complexe dans <span class="notranslate">GML</span> Visual et <span class="notranslate">GML</span>. Pouvez-vous deviner ce qu'il fait ?</p>
  <p><img alt="GML VisualFinal Code Example" class="center" src="../assets/Images/QS_Guide/QS_DnD_FinalCode.png" /></p>
  <p>ou :</p>
  <p class="code">if mouse_check_button_pressed(mb_left) == true<br />
    {<br />
    <br />
        x = mouse_x<br />
    <br />
        y = mouse_y<br />
    <br />
        image_blend = c_red;<br />
    <br />
    }<br />
    else<br />
    {<br />
    <br />
        if mouse_check_button_released(mb_left)<br />
        {<br />
    <br />
            image_blend = c_white;<br />
    <br />
        }<br />
    <br />
    }
  </p>
  <p><a class="expandspot" data-rhwidget="ExpandSpot" data-target="expanding" href="What_Is_Programming_.htm#">Spoiler</a><span class="expandtext" data-targetname="expanding">Le code ci-dessus vérifie d'abord si un bouton de la souris a été pressé (le bouton <strong>gauche </strong>de la souris, qui est défini à l'aide de la constante &quot; <span class="inline">mb_left</span>&quot;),
      et s'il a été pressé, il déplace l'instance qui exécute le code à la position actuelle de la souris (définie à l'aide des variables intégrées &quot; <span class="inline">mouse_x</span>&quot; et &quot; <span class="inline">mouse_y</span>&quot;) et
      définit également la couleur de fusion de l'instance en <strong>rouge</strong>. Si le bouton de la souris n'a pas été pressé, alors il vérifie si le bouton de la souris a été <strong>relâché</strong>, et si c'est le cas, il réinitialise la couleur de mélange de l'instance en blanc (notez que
      encore une fois, nous utilisons des <strong>constantes </strong> intégrées <strong>- </strong>&quot; <span class="inline">c_red</span>&quot; et &quot; <span class="inline">c_white</span>&quot; - pour définir facilement les couleurs).</span></p>
  <p> </p>
  <p>Avec un peu de chance, vous avez maintenant une idée plus précise de ce qu'est la programmation, alors passons à l'exploration de l'<a class="glossterm" data-glossterm="IDE" href="#">IDE</a> <span data-keyref="GameMaker Name">GameMaker</span> et voyons comment ajouter des ressources comme des <em>sprites </em>, des <em>objets </em>et d'autres ressources importantes dont votre jeu aura besoin.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Content.htm">Index</a></div>
        <div style="float:right">Suivant : <a href="Creating_Sprites.htm">Création de sprites</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
What is Programming?
Quick Start: Programming
-->
  <!-- TAGS
qs_programming
-->
</body>
</html>