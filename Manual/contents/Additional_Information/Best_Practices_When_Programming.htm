<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Meilleures pratiques en matière de programmation</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains some best practices when programming using GameMaker" />
  <meta name="rh-index-keywords" content="Best Practices When Programming" />
  <meta name="search-keywords" content="best practices" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Meilleures pratiques en matière de programmation</h1>
  <p>Sur cette page, nous allons aborder certaines &quot;meilleures pratiques&quot; lors de la programmation de votre jeu, tout en expliquant un peu le fonctionnement interne de <span data-keyref="GameMaker Name">GameMaker</span>. Avant de poursuivre, il convient toutefois de noter deux points très importants :</p>
  <ul class="colour">
    <li>Il s'agit d'un <em>guide</em>, et non pas de la méthode définitive et parfaite à 100 % pour écrire votre jeu ! Les choses mentionnées ici sont généralement plus sur l'échelle de l'organisation et de la micro-optimisation et devraient être incorporées dans vos habitudes de programmation lorsque vous vous sentez à l'aise avec <span class="notranslate">GML</span> et que vous pensez qu'elles sont appropriées.</li>
    <li>Si votre jeu fonctionne bien et que vous êtes satisfait des choses telles qu'elles sont, ne vous <em>précipitez pas pour tout changer juste pour obtenir quelques FPS supplémentaires</em>. Vous devez trouver un équilibre entre un code lisible, flexible et modulaire et le temps et l'énergie nécessaires pour modifier les choses, ainsi que le gain global au final. En résumé, si ce n'est pas cassé, ne le réparez pas et gardez ce que vous avez appris ici pour votre prochain projet.</li>
  </ul>
  <p>Ceci étant dit, poursuivons et examinons quelques conseils généraux pour écrire un bon code <span class="notranslate">GML</span> que vous pouvez appliquer à tout moment...</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Style de programmation</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Lorsqu'il s'agit d'écrire du code, chacun a son <em>style</em>. Le style dans lequel vous programmez est la manière dont vous placez vos parenthèses, dont vous indentez les lignes, dont vous déclarez et nommez les variables, etc., et il est essentiel pour que votre code soit clair et lisible pour les autres (et pour votre futur moi, lorsque vous devrez revenir à ce projet après avoir travaillé sur autre chose).</p>
    <p class="dropspot">Il existe de très nombreux <a href="http://en.wikipedia.org/wiki/Programming_style">styles de programmation</a>, et certains diront que le leur est le meilleur, mais la vérité est que presque tous les styles conviennent tant que l'on est <strong>cohérent </strong>dans son utilisation et que tout est <em>clair </em>et <em>évident </em>.</p>
    <p class="dropspot"><img>L'image ci-dessus est un exemple de déclaration de fonction dans un script pour illustrer les points ci-dessus. Vous pouvez voir qu'il utilise les commentaires de style JSDoc pour expliquer clairement ce qu'il fait, et le style de codage est cohérent, avec des indentations de 4 espaces, des caractères de soulignement utilisés pour les variables locales, la sortie enregistrée, etc...</p>
    <p class="dropspot">Notez également que si l'éditeur de scripts vous permet de plier le code à chacune des parenthèses ouvrantes/fermantes, vous pouvez utiliser les balises <span class="inline">#region</span> et <span class="inline">#endregion</span> pour séparer des parties de votre code et en améliorer grandement la lisibilité, en particulier lorsqu'il s'agit de scripts plus importants contenant plusieurs fonctions. Les régions peuvent également être commentées - voir la section Édition de cette page du manuel) :</p>
    <p class="dropspot"><img>Lorsque vous écrivez du code, vous devez savoir que lors de la compilation de votre jeu final, <span data-keyref="GameMaker Name">GameMaker</span> supprime les commentaires, les sauts de ligne et les espaces inutiles, substitue les valeurs constantes/macro/enum et compresse généralement votre code dans le cadre du processus. Cela signifie que vous pouvez ajouter autant d'espaces blancs que nécessaire autour de votre code et que vous n'avez pas à vous soucier de la brièveté ou de la parcimonie de vos commentaires.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Utiliser les variables locales</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Pour poursuivre sur le point précédent concernant le style de programmation, une chose que beaucoup de débutants font est de faire tenir le plus de choses possibles dans une ligne de code. Par exemple :</p>
    <p class="code">draw_sprite(sprite_index, image_index, x + lengthdir_x(100, point_direction(x, y, mouse_x, mouse_y)), y + lengthdir_y(100, point_direction(x, y, mouse_x, mouse_y)));</p>
    <p class="dropspot">Bien qu'il ne soit pas complètement illisible, il est inefficace (la fonction <span class="inline">point_direction()</span> est appelée deux fois, par exemple) et il est désordonné et peu agréable à regarder. Il serait bien mieux exprimé comme suit</p>
    <p class="code">var p_dir = point_direction(x, y, mouse_x, mouse_y);<br />
      var local_x = x + lengthdir_x(100, p_dir);<br />
      var local_y = y + lengthdir_y(100, p_dir);<br />
      draw_sprite(sprite_index, image_index, local_x, local_y);</p>
    <p class="dropspot">La mémoire et les ressources nécessaires à la création de ces variables locales sont négligeables, et sont largement compensées par le bénéfice instantané que vous (ou toute autre personne lisant le code plus tard) tire de sa clarté. La même idée devrait être appliquée aux fonctions, où vous devriez attribuer des noms sensés aux variables d'entrée, et utiliser un formatage clair et des variables locales si nécessaire pour rendre le code aussi lisible que possible.</p>
    <p class="dropspot">Les variables locales sont rapides à traiter dans le jeu, alors exploitez-les au maximum. Si une expression apparaît deux fois ou plus dans un bloc de code ou un script, pensez à lui créer une variable locale. Lorsque vous utilisez les cibles du <a class="glossterm" data-glossterm="Compilateur YoYo (YYC)" href="#">compilateur YoYo (YYC)</a>, si vous faites référence à <span class="inline">global</span> ou à des variables d'instance à plusieurs reprises dans une fonction ou un bloc de code, il est particulièrement avantageux de les affecter à une variable locale au début de votre code, puis de faire référence à cette variable locale, car cela donnera de bien meilleures performances.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Tableaux</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Les <a href="../GameMaker_Language/GML_Overview/Arrays.htm">tableaux</a> sont rapides à utiliser et nécessitent moins de mémoire que les structures de données, mais ils peuvent encore être optimisés. Lorsque vous créez un tableau, la mémoire qui lui est allouée dépend de sa taille. Vous devez donc essayer d'initialiser un tableau à sa taille maximale, même si vous ne prévoyez pas de le remplir avant. Par exemple, si vous savez que vous avez besoin d'un tableau pour contenir un maximum de 100 valeurs, vous l'initialiserez tout de suite à 100 emplacements, en utilisant la fonction <a href="../GameMaker_Language/GML_Reference/Variable_Functions/array_create.htm"><span class="inline">array_create()</span></a> fonction :</p>
    <p class="code">array = array_create(100, 0);</p>
    <p class="dropspot">Cela alloue la mémoire en un seul &quot;morceau&quot; avec toutes les valeurs du tableau définies à la valeur par défaut de 0. Cela permet de garder les choses rapides, car autrement, chaque fois que vous ajoutez une nouvelle valeur au tableau, la mémoire entière doit être réallouée à nouveau.</p>
    <p class="note"><span class="note">REMARQUE</span> Sur la cible HTML5, l'affectation des tableaux de cette manière ne s'applique pas et vos tableaux doivent être initialisés à partir de 0 pour cette cible ! Vous pouvez facilement gérer cela en vérifiant la variable os_browser, par exemple :</p>
    <p class="code"><span style="padding-left:1px;">if (os_browser == browser_not_a_browser)<br />
        {<br />
            array_create(100, 0);<br />
        }<br />
        else<br />
        {<br />
            for (var i = 0; i &lt; 100; ++i;)<br />
            {<br />
                array[i] = 0;<br />
            }<br />
        }</span></p>
    <p class="dropspot">Vous pouvez également libérer la mémoire associée à un tableau en donnant à la variable utilisée la valeur 0. Ainsi, pour effacer le tableau dans l'exemple de code ci-dessus, il suffit d'utiliser la commande</p>
    <p class="code">array = 0;</p>
    <p class="dropspot">Notez également que les tableaux sont <strong>transmis par référence</strong>, mais qu'ils seront copiés dans leur intégralité lorsqu'une modification sera apportée (ce comportement est appelé <strong>copy on write</strong>). Ainsi, si vous passez un tableau à une fonction, vous passez une <em>référence </em>au tableau original et toutes les valeurs qui y sont lues proviendront de la source originale. C'est agréable et rapide, mais si vous devez modifier l'une des valeurs du tableau, le tableau lui-même est dupliqué au moment de l'écriture et toutes les modifications apportées <strong>doivent être renvoyées par la fonction, sinon elles seront perdues</strong>. Cette méthode est beaucoup plus lente et consomme plus de mémoire. Faites donc attention à la façon dont vous utilisez les tableaux dans les fonctions.</p>
    <p class="dropspot"> <span class="notranslate">access</span> Toutefois, vous pouvez éviter ce comportement de copie en écriture en utilisant l'<a href="../GameMaker_Language/GML_Overview/Accessors.htm">accesseur</a> spécial <a href="../GameMaker_Language/GML_Overview/Accessors.htm">de</a> tableau <span class="inline">@</span>, qui donne directement accès au tableau sous-jacent. Par exemple :</p>
    <p class="code">// Call a function, passing our array<br />
      my_function(my_array);</p>
    <p class="code">// The function looks like this:<br />
      <br />
      function my_function(_a)<br />
      {<br />
          // The array will be copied and the copy modified,<br />
          // requiring you to use &quot;return _a&quot;, later<br />
          _a[0] = 100;<br />
      <br />
          // This will modify the ORIGINAL array directly and<br />
          // does not require it to be returned<br />
          _a[@ 0] = 100;<br />
      }
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Structures de données</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">Dans <span data-keyref="GameMaker Name">GameMaker</span>, les <a href="../GameMaker_Language/GML_Reference/Data_Structures/Data_Structures.htm">structures de données</a> ont été optimisées pour être beaucoup plus rapides que dans les versions précédentes de <span class="notranslate">GameMaker</span>. Elles doivent toujours être nettoyées (détruites) lorsqu'elles ne sont pas utilisées pour libérer de la mémoire, et elles peuvent toujours être plus lentes que, par exemple, les tableaux, mais la facilité d'utilisation et les fonctions supplémentaires pour traiter les données qu'elles contiennent peuvent souvent l'emporter sur la différence de vitesse minimale, donc n'ayez pas peur de les utiliser dans vos jeux.</p>
    <p class="dropspot">Il convient de noter que de toutes les structures de données, les cartes DS en particulier sont très rapides, tant en lecture qu'en écriture, ce qui en fait une excellente option pour tous les types de tâches.</p>
    <p class="dropspot">Nous avons précédemment mentionné les <a href="../GameMaker_Language/GML_Overview/Accessors.htm">accesseurs</a> pour les tableaux, mais ils sont également disponibles pour les structures de données, ce qui peut aider à nettoyer votre code et à le rendre beaucoup plus facile à lire.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Collisions</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Il existe <a href="../GameMaker_Language/GML_Reference/Movement_And_Collisions/Collisions/Collisions.htm">plusieurs façons de gérer les collisions</a> dans <span data-keyref="GameMaker Name">GameMaker</span>, et la plupart d'entre elles s'accompagnent d'une surcharge du processeur. Les fonctions <span class="inline">collision_</span> et <span class="inline">point_</span>, <span class="inline">place_</span> et <span class="inline">instance_</span> s'appuient toutes sur des vérifications de <a class="glossterm" data-glossterm="boîte de délimitation" href="#">boîtes englobantes</a> avec toutes les instances d'un type donné dans la pièce, et bien qu'une certaine optimisation soit intégrée au moteur pour limiter ces vérifications, les collisions ne sont jamais la chose la plus efficace à gérer. Si vous commencez à utiliser des collisions précises, les performances se détérioreront sensiblement, car vous devrez non seulement effectuer des vérifications de boîte englobante, mais aussi des vérifications par pixel, ce qui est très lent.</p>
    <ul class="dropspotlist">
    </ul>
    <p class="dropspot">Cela ne veut pas dire que vous ne devez pas utiliser ces fonctions, car elles peuvent être très pratiques. Cependant, vous devez savoir lesquelles utiliser et à quel moment, car elles fonctionnent toutes légèrement différemment et ont des vitesses différentes. En règle générale, les fonctions <span class="inline">place_</span> sont plus rapides que les fonctions <span class="inline">instance_</span>, qui sont plus rapides que les fonctions <span class="inline">collision_</span> et <span class="inline">point_</span>. Lisez donc les pages du manuel relatives à chacun de ces types de fonctions et veillez à choisir la plus appropriée à chaque situation.</p>
    <p class="dropspot">Vous pouvez également envisager de créer un<strong> système de collision basé sur les tuiles</strong>, qui peut être créé à l'aide des <a href="../GameMaker_Language/GML_Reference/Asset_Management/Rooms/Tile_Map_Layers/Tile_Map_Layers.htm">fonctions tilemap</a> ou même d'un tableau 2D personnalisé ou d'une grille DS. Ces systèmes seront très rapides et contribueront à améliorer la vitesse de votre jeu. Cependant, si vous utilisez un terrain irrégulier ou des murs et des objets qui ne s'alignent pas sur une grille, ils ne seront peut-être pas appropriés. Vous trouverez un tutoriel très simple sur les collisions de tuiles dans le lien vidéo suivant</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="https://youtu.be/UyKdQQ3UR_0">Collisions des tuiles dans <span data-keyref="GameMaker Name">GameMaker</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Échanges de textures et lots de sommets</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot">Si vous activez la fonction <a href="../GameMaker_Language/GML_Reference/Debugging/show_debug_overlay.htm"><strong>superposition de débogage</strong></a>vous verrez qu'il y a deux chiffres entre parenthèses en haut de votre écran lors des tests. Le premier est le nombre d'<strong>échanges de textures </strong>effectués et le second est le nombre de <strong>lots de vertex</strong>. Un certain nombre de facteurs influencent ces chiffres et vous n'arriverez jamais à les réduire à (0) (0) car le moteur requiert un ou deux de chaque étape, mais vous devriez essayer de réduire ces valeurs autant que possible.</p>
    <p class="dropspot"><img>Pour les échanges de textures, la meilleure façon de procéder et la plus efficace est d'optimiser la façon dont vos <span class="notranslate">sprites</span> et vos arrière-plans sont stockés sur la page de texture. Cela se fait à partir des <a href="../The_Asset_Editors/Sprites.htm">propriétés du sprite</a>, et vous pouvez créer des pages de texture dans l'<a href="../Settings/Texture_Groups.htm">éditeur de groupe de textures</a>. Si vous avez un certain nombre d'images qui ne sont utilisées que dans le menu principal (par exemple), regroupez-les sur une <a href="../Settings/Texture_Information/Texture_Pages.htm">page de texture</a> distincte. Il en va de même si vous avez des images spécifiques à un niveau, ou au joueur et aux ennemis, etc. En gros, vous voulez les regrouper par utilisation afin de réduire les échanges autant que possible. De plus, pour optimiser la <a class="glossterm" data-glossterm="VRAM" href="#">VRAM</a>, vous pouvez utiliser les différentes fonctions <a href="../GameMaker_Language/GML_Reference/Drawing/Textures/Textures.htm">prefetch et flush</a> pour charger et retirer les textures de la mémoire selon les besoins.</p>
    <p class="note"><span class="note">REMARQUE</span> Comme mentionné au début de cette page, si votre jeu fonctionne bien avec un FPS décent, ne vous inquiétez pas trop des échanges de textures... surtout lorsque vous créez des projets sur les cibles de bureau. Ces optimisations sont plus efficaces lorsqu'elles sont utilisées avec de gros jeux ou sur des appareils mobiles bas de gamme, et lorsqu'elles sont mal utilisées, elles peuvent avoir un impact négatif sur les performances.</p>
    <p class="dropspot">Les informations sur les sommets sont envoyées par &quot;lots&quot; au GPU pour le dessin, et en général, plus le lot est grand, mieux c'est. Il faut donc éviter de &quot;casser&quot; le lot lors du dessin, car cela augmente le nombre de lots de sommets envoyés au GPU. Il y a un certain nombre de choses qui peuvent casser le lot, les principales étant les <strong>modes de fusion</strong>, le changement de <strong>shader</strong>, le changement d'uniforme pour un <span class="notranslate">shader</span> avant de dessiner quelque chose, et le dessin en utilisant les formes intégrées et <span class="notranslate">primitives</span>.</p>
    <p class="dropspot">Ainsi, si vous avez un certain nombre d'instances de balles qui utilisent le mode de fusion <span class="inline">bm_add</span>, par exemple, vous devrez créer un nouveau lot de vertex pour chacune d'entre elles, ce qui n'est certainement pas une bonne chose ! Au lieu de cela, ayez un objet contrôleur dans votre jeu qui dessine toutes les balles à la place, comme ceci :</p>
    <p class="code">gpu_set_blendmode(bm_add);<br />
      <br />
      with (obj_BULLET)<br />
      {<br />
          draw_self();<br />
      }<br />
      <br />
      gpu_set_blendmode(bm_normal);
    </p>
    <p class="note"><span class="note">REMARQUE :</span> cela ne s'applique pas uniquement à l'utilisation de <span class="inline" style="font-size: 14px">bm_add</span> - tout changement de mélange interrompra le lot et aura un impact sur les performances.</p>
    <p class="dropspot">De cette façon, toutes les balles seront tirées dans le même lot. Utilisation judicieuse des fonctions <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_blendenable.htm"><span class="inline">gpu_set_blendenable()</span></a>, <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestref.htm"><span class="inline">gpu_set_alphatestref()</span></a>, et <a href="../GameMaker_Language/GML_Reference/Drawing/GPU_Control/gpu_set_alphatestenable.htm"><span class="inline">gpu_set_alphatestenable()</span></a> peut améliorer considérablement les performances et peut être activée/désactivée selon les besoins dans le code de votre projet, bien qu'elles ne soient pas appropriées pour tous les types de graphiques ou de projets.</p>
    <p class="note"><span class="note">NOTE</span> Si vous n'avez pas besoin que l'instance se dessine elle-même lorsque vous utilisez un contrôleur de cette manière, vous pouvez simplement ajouter un commentaire dans l'événement Draw pour supprimer le dessin par défaut, ou rendre l'instance invisible (bien que cela empêchera tout code de s'exécuter pour l'instance dans tous les événements draw).</p>
    <p class="dropspot">Une autre façon de réduire ces chiffres est de désactiver l'option <strong>Separate Texture Page</strong> pour <span class="notranslate">sprites</span>, sauf en cas de nécessité absolue. Chaque image stockée de cette manière est envoyée sur sa propre page de texture et mise en lots différemment, il est donc préférable d'avoir ces images sur une page de texture ordinaire. Vous pouvez ensuite obtenir les coordonnées UVS à l'aide de la fonction <a href="../GameMaker_Language/GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_uvs.htm"><span class="inline">sprite_get_uvs()</span></a> et les stocker dans des variables pour une utilisation ultérieure. Cela peut représenter une petite quantité de code supplémentaire, mais l'amélioration que vous obtiendrez en vaut la peine. Notez que cette méthode ne permet pas de répéter les textures !</p>
    <p class="dropspot">Comme pour tous ces conseils, si cela vous rend la vie plus difficile de le changer et que votre jeu fonctionne bien, ne vous en faites pas trop...</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Particules</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Les<a href="../GameMaker_Language/GML_Reference/Drawing/Particles/Particles.htm">particules</a> offrent un moyen très rapide et efficace de créer des effets dynamiques dans votre jeu, et en général, elles offrent de bonnes performances. Toutefois, il convient de noter que l'utilisation de l'additif blending, de l'alpha blending et du colour blending sur les particules peut réduire ces performances, en particulier sur les cibles mobiles, donc si vous n'en avez pas besoin, ne l'utilisez pas ! Le mélange additif, en particulier, peut augmenter considérablement les lots de vertex et doit être utilisé avec précaution.</p>
    <p class="dropspot">Notez que sur la cible HTML5 non WebGL, le fait d'avoir des particules multicolores et changeantes nécessitera beaucoup de mise en cache des images et sera très lent. Cependant, comme la particule <span class="notranslate">sprites</span> peut être animée, vous pouvez créer une <span class="notranslate">sprite</span> animée dont les sous-images changent de couleur et l'utiliser à la place pour la particule. Cela ressemblera toujours à un changement de couleur progressif, mais ne nécessitera pas la création constante d'images <span class="notranslate">cache</span>.</p>
    <p class="dropspot">Vous pouvez en savoir plus sur les particules en consultant la page <a href="Guide_To_Using_Particles.htm">Guide d'utilisation des particules</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Surfaces</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Enfin, nous allons aborder brièvement l'utilisation des <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/Surfaces.htm">surfaces</a>, car <span data-keyref="GameMaker Name">GameMaker</span> dispose d'une optimisation assez importante pour les utiliser dans vos jeux : la possibilité d'activer et de désactiver le <strong>tampon de profondeur</strong>.</p>
    <p class="dropspot">Lorsque vous utilisez des surfaces comme d'habitude, <span data-keyref="GameMaker Name">GameMaker</span> crée en fait une surface et une profondeur associée <span class="notranslate">buffer</span> pour assurer un tri correct de la profondeur lorsque vous dessinez quoi que ce soit en 3D. Cependant, pour la plupart des jeux 2D, cette profondeur supplémentaire <span class="notranslate">buffer</span> n'est tout simplement pas nécessaire et occupe donc un espace mémoire et un temps de traitement supplémentaires qui pourraient être utilisés à d'autres fins. C'est là que la fonction <a href="../GameMaker_Language/GML_Reference/Drawing/Surfaces/surface_depth_disable.htm"><span class="inline">surface_depth_disable()</span></a> entre en jeu...</p>
    <p class="dropspot">Cette fonction peut être appelée avant de créer une surface pour désactiver la génération de la profondeur <span class="notranslate">buffer</span>. Toutes les surfaces créées par la suite n'auront pas de profondeur <span class="notranslate">buffer</span> créée pour elles. Vous pouvez activer/désactiver cette fonction selon vos besoins, et vous pouvez même l'appeler une fois au début du jeu pour désactiver la profondeur <span class="notranslate">buffers</span> pour tous les appels de surface ultérieurs (et dans la plupart des jeux 2D, cela convient parfaitement). Cela n'augmentera pas les performances, mais c'est certainement quelque chose à garder à l'esprit si votre jeu s'appuie fortement sur les surfaces et cela pourrait empêcher votre jeu de manquer de mémoire sur les appareils à faible spécification.</p>
  </div>
  <p> </p>
  <p>Outre les principaux éléments mentionnés ci-dessus, il existe d'autres éléments plus généraux qui peuvent contribuer aux performances et qui sont également considérés comme des &quot;bonnes pratiques&quot; :</p>
  <ul class="colour">
    <li>n'ayez pas peur d'utiliser les fonctions trigonométriques car (contrairement à la croyance populaire) elles sont assez rapides, surtout si on les compare aux particules, collisions, cordes, etc...</li>
    <li>ne pas mettre de code qui ne sert pas à dessiner des choses dans les événements Draw</li>
    <li>utiliser une alarme pour appeler tout code qui ne doit pas être appelé à chaque étape (plutôt que de l'ajouter à l'événement Step de toute façon)</li>
  </ul>
  <p>Mais, comme nous l'avons mentionné au début de la page, toutes ces optimisations sont facultatives et si votre jeu fonctionne bien avec 60 lots de vertex, 80 échanges de textures, du blending additif, etc., alors ne vous inquiétez pas trop ! Gardez simplement ces éléments à l'esprit lors de la programmation de votre prochain jeu...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="The_File_System.htm">Le système de fichiers</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Nest Practices
-->
  <!-- TAGS
best_practices
-->
</body>
</html>