<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide des primitives et de la construction de sommets</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how to set up and use primitives and vertex buffers" />
  <meta name="rh-index-keywords" content="Guide To Primitives And Vertex Building" />
  <meta name="search-keywords" content="primitive building,primitives,vertex,vertex buffers,vertex formats" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guide de construction de <span class="notranslate">Primitives</span> et de vertex</h1>
  <p>Ce guide explique brièvement comment construire et utiliser des <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">primitives</a> en utilisant des <strong>formats de vertex</strong> et des <strong>tampons de vertex</strong> personnalisés. </p>
  <p>En général, lorsque vous commencez à travailler avec la 3D, les effets spéciaux, les processus de dessin complexes ou <span class="notranslate">shaders</span>, vous n'avez pas besoin de trop vous soucier du format de vertex utilisé, puisque <span data-keyref="GameMaker Name">GameMaker</span> configurera et transmettra automatiquement les données de <a class="glossterm" data-glossterm="vertex" href="#">vertex</a> pour vous. Cependant, il est parfois nécessaire de créer vos propres données de vertex et de les formater à votre convenance, notamment lorsque vous avez besoin d'augmenter la vitesse ou que vous souhaitez transmettre des informations supplémentaires. Par exemple, le format standard des vertex comprend une position 3D x, y, z, une couleur (avec alpha) et des coordonnées de texture UV, qui, si vous les créez vous-même, ressembleront à quelque chose comme :</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Toutefois, si vous n'utilisez (par exemple) qu'un <span class="notranslate">shader</span> pour manipuler la position du vertex, il n'est pas nécessaire de transmettre des données de couleur ou de texture. Dans ce cas, vous devez créer votre propre format de la manière suivante :</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    my_format = vertex_format_end();</p>
  <p>Au total, il existe cinq attributs de sommets différents que vous pouvez utiliser pour définir un format de sommet :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Position 3D</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>En général, vous devez <em>toujours</em> fournir la position ou la position 3D dans le cadre du format, mais tous les autres éléments sont facultatifs.</p>
  <p>Vous devez noter qu'une fois que vous avez créé votre format de vertex, l'ordre dans lequel vous avez défini les attributs de vertex <i>doit être respecté</i> lors de la construction de vos <strong>primitives</strong>. Ainsi, si vous avez défini un format de vertex comme une position, une couleur et une coordonnée de texture, <b>vous <i>devez</i> ajouter ces attributs à l'adresse <span class="notranslate">primitive</span> dans le même ordre, sinon vous obtiendrez une erreur</b>. Notez également que, comme toute autre ressource dynamique, un format de vertex nécessite de la mémoire et doit donc être supprimé lorsqu'il n'est pas nécessaire en utilisant la fonction <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_delete.htm"><span class="inline">vertex_format_delete()</span></a>.</p>
  <p>Tout <span class="notranslate">primitives</span> que vous construisez est conservé dans un <b>tampon de vertex</b>. Celui-ci doit être créé au préalable et ensuite référencé par les fonctions utilisées pour construire votre <span class="notranslate">primitive</span>. Le vertex <span class="notranslate">buffer</span> peut être réutilisé autant de fois que nécessaire pour créer différents <span class="notranslate">primitives</span>, ou il peut être &quot;gelé&quot; pour maintenir un type spécifique de <span class="notranslate">primitive</span> pour la durée de votre jeu ou niveau (ce qui est l'approche la plus rapide, donc si vous savez qu'un <span class="notranslate">primitive</span> que vous construisez ne changera pas, vous devriez toujours utiliser cette option).</p>
  <p>Un exemple de construction d'un triangle unique <span class="notranslate">primitive</span> est présenté dans le code suivant :</p>
  <p class="code">// CREATE EVENT<br />
    v_buff = vertex_create_buffer();<br />
    vertex_begin(v_buff, global.my_format);<br />
    vertex_position(v_buff, 10, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 0, 0);<br />
    vertex_position(v_buff, 110, 10);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 0);<br />
    vertex_position(v_buff, 110, 110);<br />
    vertex_colour(v_buff, c_white, 1);<br />
    vertex_texcoord(v_buff, 1, 1);<br />
    vertex_end(v_buff);</p>
  <p class="code_heading">Draw Event</p>
  <p class="code"><br />
    var tex = sprite_get_texture(spr_Background, 0);<br />
    shader_set(shd_shimmer);<br />
    vertex_submit(v_buff, pr_trianglelist, tex);<br />
    shader_reset();
  </p>
  <p>Ici, nous avons d'abord créé notre vertex <span class="notranslate">buffer</span> dans l'événement Create de l'instance, puis nous commençons la définition des différents vertices qui composent notre triangle <span class="notranslate">primitive</span>, en donnant la position, la couleur et la coordonnée UV de la texture pour chacun des trois points que nous voulons utiliser. Nous terminons ensuite la définition des vertex, et nous savons que le vertex <span class="notranslate">buffer</span> contenant ces données de vertex est stocké dans la variable &quot;v_buff&quot;.  </p>
  <p class="note"><strong>REMARQUE</strong>: si le contenu de <span class="notranslate">buffer</span> doit être mis à jour en permanence, <span class="notranslate">buffer</span> sera créé, recevra les données de vertex, puis sera détruit à nouveau - après avoir été dessiné - tout cela dans la même étape.</p>
  <p>Nous dessinons ensuite le contenu du vertex <span class="notranslate">buffer</span> dans l'événement Draw à l'aide d'un <span class="notranslate">shader</span>. Il s'agit d'un exemple très simple, et c'est en gros la façon dont <span data-keyref="GameMaker Name">GameMaker</span> fonctionne en interne, c'est-à-dire que lorsque vous dessinez un <span class="notranslate">sprite</span>, <span class="notranslate">GameMaker</span> crée un vertex <span class="notranslate">buffer</span> avec quatre sommets créant deux triangles (qui forment un carré, également appelé &quot;quad&quot;), et texture ces deux triangles avec l'image <span class="notranslate">sprite</span>. Lorsque nous dessinons ce <span class="notranslate">sprite</span>, nous soumettons le sommet <span class="notranslate">buffer</span> et son contenu est dessiné à l'écran.</p>
  <p>Vous remarquerez que lorsque nous soumettons le sommet <span class="notranslate">buffer</span> pour le dessin, nous fournissons un type <span class="notranslate">primitive</span>. Le type de <span class="notranslate">primitive</span> que vous utilisez peut être un point, une liste ou une bande de lignes, ou une liste ou une bande de triangles, mais vous <i>n'êtes pas</i> autorisé à utiliser des éventails de triangles car la plupart des matériels mobiles n'acceptent pas ce type de <span class="notranslate">primitive</span>. N'oubliez pas de formater votre vertex <span class="notranslate">buffer</span> correctement pour le type de <span class="notranslate">primitive</span> qui va être utilisé pour le dessiner. Par exemple, le dessin d'un deux triangles <span class="notranslate">primitive</span> sous forme de liste de triangles nécessite 6 points, mais sous forme de bande de triangles, il ne nécessite que 4 points. C'est à vous de choisir le type que vous utilisez et cela dépend de ce que vous voulez dessiner et de l'effet que vous voulez obtenir.</p>
  <p>Un dernier point important à noter lorsque vous utilisez votre propre vertex <span class="notranslate">buffers</span> de cette manière est la façon dont cela affecte les lots de vertex qui sont envoyés au GPU. Lorsque vous créez un vertex <span class="notranslate">buffer</span>, vous créez le plus bas niveau de données graphiques, donc lorsque vous dessinez, tout ce qui se passe est que <span data-keyref="GameMaker Name">GameMaker</span> envoie votre <span class="notranslate">buffer</span> directement à la carte graphique. Pour cette raison, si vous souhaitez un meilleur regroupement, vous devez le faire vous-même et stocker les éléments que vous souhaitez regrouper dans le même <span class="notranslate">buffer</span>.</p>
  <p>Comme nous l'avons déjà mentionné ci-dessus, les formats de sommets sont construits en utilisant ensemble les 5 types d'attributs suivants (ajoutés via la fonction appropriée <span class="inline">vertex_format_add_*</span> ) :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Position 3D</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>Dans le GLSL ES <span class="notranslate">shader</span>, ces types sont reconnus à l'aide des 4 attributs suivants :</p>
  <ul class="colour">
    <li>Couleur</li>
    <li>Normal</li>
    <li>Position</li>
    <li>Coordonnée de la texture</li>
  </ul>
  <p>Cela peut sembler étrange, car il semble que nous puissions spécifier plus de types d'attributs dans notre format de sommet que dans le sommet <span class="notranslate">shader</span>. Cependant, dans le site <span class="notranslate">shader</span>, la <i>position</i> et la <i>position 3D</i> sont traitées comme le <em>même </em>attribut, sauf que la <i>position</i> est censée avoir uniquement des coordonnées &quot;x&quot; et &quot;y&quot; alors que la <i>position 3D</i> a des coordonnées &quot;x&quot;, &quot;y&quot; et &quot;z&quot;. Comment faire correspondre le format des sommets avec la définition des attributs sur le site <span class="notranslate">shader</span>? Commençons par examiner un ensemble typique d'attributs du shader par défaut :</p>
  <p> </p>
  <p class="code">attribute vec3 in_Position;        // (x,y,z)<br />
    //attribute vec3 in_Normal;        // (x,y,z) unused in this shader.<br />
    attribute vec4 in_Colour;          // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;    // (u,v)</p>
  <p>Et voici un morceau de code qui met en place un format de vertex compatible avec ce shader :</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Comment l'attribut <span class="notranslate">shader</span> est-il associé au type de format de vertex ? C'est juste basé sur la convention de dénomination :</p>
  <ul class="colour">
    <li><span class="inline">&quot;in_Position&quot;</span> les cartes de <span class="inline"><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position.htm">vertex_format_add_position</a>/<a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_position_3d.htm">_3d()</a></span></li>
    <li><span class="inline">&quot;in_Colour&quot;</span> les cartes de <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_colour.htm"><span class="inline">vertex_format_add_colour()</span></a></li>
    <li><span class="inline">&quot;in_TextureCoord&quot;</span> les cartes de <a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/vertex_format_add_texcoord.htm"><span class="inline">vertex_format_add_texcoord()</span></a></li>
  </ul>
  <p><span class="inline"><span class="inline"><span class="inline"></span> Les choses se compliquent lorsque vous avez plusieurs attributs du même type, mais les choses sont toujours basées sur la même convention d'appellation. Nous allons maintenant nous intéresser à la fourniture de <b>coordonnées de</b> <b>couleur</b> et de <b>texture</b> supplémentaires, car il ne peut y avoir qu'<b>un</b> seul attribut Position et <b>un seul</b> attribut Normal dans le format <span class="notranslate">shader</span> ou vertex, mais il <em>peut</em> y avoir plusieurs attributs de couleur ou de texture.</p>
  <p>Lorsque vous ajoutez des attributs de couleur supplémentaires à votre <span class="notranslate">shader</span>, vous devez ajouter un numéro à la fin de l'attribut <span class="notranslate">shader</span> pour indiquer à quelle entrée particulière du format de sommet l'attribut correspond. Voici un exemple - d'abord le format de vertex :</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Et maintenant, les attributs associés à <span class="notranslate">shader</span>:</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour0;       // (r,g,b,a)<br />
    attribute vec4 in_Colour1;       // (r,g,b,a)<br />
    attribute vec2 in_TextureCoord;  // (u,v)</p>
  <p>Dans ce cas, <span class="inline">in_Colour0</span> correspond au premier <span class="inline">vertex_format_add_colour()</span> et <span class="inline">in_Colour1</span> correspond au second.</p>
  <p>Les coordonnées de texture sont traitées de manière légèrement différente de la couleur. En principe, tout ce qui n'est pas appelé <span class="inline">in_Position</span>, <span class="inline">in_Normal</span> ou l'un des attributs <span class="inline">in_Colour[0 ... ]</span> est traité comme une coordonnée de texture. L'ordre dans lequel elles sont définies, dans la liste des attributs du site <span class="notranslate">shader</span>, indique à quel attribut du format de sommet elles correspondent. Voir l'exemple suivant <span class="notranslate">GML</span>:</p>
  <p class="code">vertex_format_begin();<br />
    vertex_format_add_position_3d();<br />
    vertex_format_add_colour();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    vertex_format_add_textcoord();<br />
    my_format = vertex_format_end();</p>
  <p>Et le code <span class="notranslate">shader</span> ressemblerait à quelque chose comme ça :</p>
  <p class="code">attribute vec3 in_Position;      // (x,y,z)<br />
    attribute vec4 in_Colour;        // (r,g,b,a)<br />
    attribute vec2 in_myTexcoord;    // (u,v)<br />
    attribute vec2 in_TextureCoord;  // (u,v)<br />
    attribute vec2 in_Something;     // (u,v)</p>
  <p>Dans cet exemple, <span class="inline">in_myTexcoord</span>, <span class="inline">in_TextureCoord</span> et <span class="inline">in_Something</span> correspondent aux trois attributs successifs de coordonnées de texture définis dans le format des sommets.</p>
  <p>Vous trouverez une liste complète de toutes les fonctions nécessaires à la création de formats de sommets, de sommets <span class="notranslate">buffers</span> et <span class="notranslate">primitives</span> à la page suivante :</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Drawing/Primitives/Primitives_And_Vertex_Formats.htm">Primitives et formats de sommets</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="Guide_To_Using_Blendmodes.htm">Guide d'utilisation des Blendmodes</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Primitive Building
Vertex Formats
Vertex Buffers
-->
  <!-- TAGS
using_primitives_vertex_buffers
-->
</body>
</html>