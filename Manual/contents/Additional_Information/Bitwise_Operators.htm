<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Opérateurs binaires</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how bitwise operators work" />
  <meta name="rh-index-keywords" content="Bitwise Operators" />
  <meta name="search-keywords" content="bitwise,bitwise operators" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Opérateurs binaires et binaires</h1>
  <p>Au début de l'ère informatique, le <strong>binaire</strong> et l'<strong>hexadécimal</strong> étaient un mode de vie, probablement parce que les langages de haut niveau (comme le BASIC) étaient tout simplement trop lents à exécuter. Par exemple, la multiplication de 32 x 32 aurait pu prendre plusieurs cycles d'unité centrale pour être réalisée en BASIC, mais avec le binaire, elle est effectuée en une seule opération et en un seul cycle d'unité centrale.</p>
  <p>De nos jours, cependant, avec la puissance d'un PC de base, vous n'avez plus à vous soucier de cela et vous pouvez faire les choses &quot;à l'ancienne&quot;, puisque la vitesse de la machine et la construction plus complexe de son CPU compenseront les inconvénients de cette approche. C'est bien sûr une excellente nouvelle, car cela signifie que vous ne devez plus optimiser chaque ligne de code que vous écrivez, mais si c'est le cas, devez-vous vraiment vous soucier du binaire ?</p>
  <p>La réponse est sans aucun doute &quot;oui, vous devriez&quot;. S'il est vrai que vous pouvez toujours obtenir des gains de vitesse - et ceux-ci peuvent parfois être significatifs - l'utilisation du binaire et de l'hexadécimal permet de mieux comprendre le fonctionnement du CPU et peut également conduire à l'écriture d'un meilleur code, à une meilleure gestion des données et à la simplification de certaines tâches. Cette page va vous expliquer un peu ce qu'est le binaire et comment il peut être utilisé dans vos jeux.</p>
  <p>Examinons d'abord la théorie binaire la plus élémentaire - comment les nombres sont créés. Jetez un coup d'oeil à ce tableau :</p>
  <p class="code">000 = 0<br />
    001 = 1<br />
    010 = 2<br />
    100 = 4</p>
  <p>Chaque 1 ou 0 représente un seul <a class="glossterm" data-glossterm="bit" href="#">bit</a> de données, et comme vous pouvez le voir, cela signifie qu'en binaire, 10 est égal à 2 ! Chaque bit est égal à 2 fois la valeur précédente, le premier bit étant égal à 1. Donc, le bit 2 = 2, le bit 3 = 4, le bit 4 = 8 et ainsi de suite (comme indiqué ci-dessous dans ce tableau d'<a class="glossterm" data-glossterm="octet" href="#">octets</a> ) :</p>
  <p class="code">00000001 = 1<br />
    00000010 = 2<br />
    00000100 = 4<br />
    00001000 = 8<br />
    00010000 = 16<br />
    00100000 = 32<br />
    01000000 = 64<br />
    10000000 = 128</p>
  <p>C'est bien si vous voulez des nombres qui sont une puissance de 2, mais comment créer des nombres plus complexes ? Eh bien, un seul nombre binaire ne peut stocker qu'un 0 ou un 1, et c'est tout, donc pour des nombres plus complexes, nous devons ajouter des bits ensemble. Si, par exemple, nous voulions obtenir 6, nous additionnerions 4 et 2 comme suit.</p>
  <p class="code">00000010 = 2<br />
    00000100 = 4<br />
    00000110 = 6</p>
  <p>C'est le cas de <strong>tous les </strong>nombres <strong>binaires </strong>, et de la façon dont l'ordinateur compose tout nombre en interne. Prenons un autre exemple, un peu plus compliqué : 23. Le nombre 23 est en fait composé de <span class="inline">1+2+4+16</span> ou <span class="inline">00010111</span>. Et un exemple beaucoup plus complexe : 196 ? Eh bien, il est composé de <span class="inline">128+64+4</span> ou <span class="inline">11000100</span>. En fait, ce n'est pas si complexe que ça !</p>
  <p>Si l'on commence à utiliser des valeurs en dehors de la plage d'un octet (qui peut stocker des nombres de 0 à 255), le suivi devient toutefois un peu plus difficile. Par exemple, 217 361 est <span class="inline">110101000100010001</span> en binaire. Ou encore, <span class="inline">1+16+256+etc...</span>. Les règles sont les mêmes quelle que soit la valeur exprimée - chaque nombre est créé par l'addition de plusieurs bits.</p>
  <p>Maintenant, comment effectuer des opérations mathématiques sur ces valeurs ? Disons que vous voulez stocker <span class="inline">true</span> ou <span class="inline">false</span> en tant que valeur. Habituellement, les compilateurs utiliseront un <span class="inline">INT</span> (un <span class="inline">INT</span> est généralement défini comme un nombre signé de 32 bits - signé signifie simplement qu'il peut avoir une valeur positive ou négative, tandis que non signé signifie qu'il ne peut être que positif) et l'affecteront simplement à <span class="inline">0</span> ou <span class="inline">1</span>. N'ayant que 2 états, une valeur <span class="inline">true</span> / <span class="inline">false</span> est idéale pour être stockée dans un bit, et si nous faisions cela, nous pourrions stocker 32 <span class="inline">true</span> / <span class="inline">false</span> bits pour chaque <span class="inline">INT</span> plutôt qu'un seul, puisqu'un <span class="inline">INT</span> est composé de 32 bits.</p>
  <p>Comment ferions-nous cela ? Assez facilement, en fait :</p>
  <p class="code">flags = flags | 1;</p>
  <p>L'opérateur &quot;<span class="inline">|</span>&quot; est un opérateur bit à bit <span class="inline">OR</span>, ce qui signifie que l'instruction ci-dessus <span class="inline">ORs</span> transforme 1 en la valeur contenue dans la variable <span class="inline">flags</span>. Si vous vous souvenez de ce qui s'est passé précédemment, l'utilisation d'un 1 activera le premier bit. Si nous voulions définir le deuxième bit, nous ferions ceci :</p>
  <p class="code">flags = flags | 2;</p>
  <p>Nous avons <span class="inline">OR</span> en 2, car le motif binaire <span class="inline">00000010</span> est égal à 2. Alors que fait exactement l'opérateur binaire <span class="inline">OR</span>? Eh bien, il fusionne tous les bits en une seule valeur, comme ceci :</p>
  <p class="code">010110100 // Value 1<br />
    110011001 // value 2<br />
    110111101 // Value 1 OR Value 2</p>
  <p>Voici ce que l'on appelle une <a class="glossterm" data-glossterm="table de vérité" href="#">table de vérité</a> pour l'opérateur OR :</p>
  <p class="code">00 | 00 = 00<br />
    00 | 01 = 01<br />
    01 | 01 = 01<br />
    01 | 00 = 01</p>
  <p>Ainsi, lorsqu'il y a une valeur avec 2 zéros, elle restera nulle. L'avantage d'utiliser des bits comme celui-ci comme un état <span class="inline">true</span>/<span class="inline">false</span>, est que vous pouvez définir plusieurs bits comme des &quot;drapeaux&quot; en une seule opération, ce que vous ne pourriez tout simplement pas faire avec une valeur booléenne normale. Par exemple, disons que le bit 1 est un drapeau &quot;actif&quot; et que le bit 3 est un drapeau &quot;visible&quot;. Nous pourrions les activer tous les deux en faisant ceci :</p>
  <p class="code">flags = flags | 5<span class="inline"></span>;</p>
  <p>C'est parce que 5 est <span class="inline">00000101</span> en binaire, et en suivant la règle ci-dessus, la variable &quot;flags&quot; obtiendra ces deux bits fusionnés avec les siens. Ainsi, même si le bit 1 était déjà activé, l'opération fonctionne toujours et le bit 3 sera maintenant également activé.</p>
  <p>Et pour effacer <span class="notranslate">flags</span>? C'est là qu'intervient l'opération bit à bit &quot;<span class="inline">&amp;</span>&quot; <span class="inline">AND</span>. Lorsque vous envoyez un message à <span class="inline">AND</span>, les bits qui sont activés dans le masque sont conservés, tandis que les bits qui sont désactivés dans le masque sont supprimés - comme ceci :</p>
  <p class="code">01110010101 // Value 1<br />
    00110000100 // Value 2<br />
    00110000100 // Value 1 AND value 2</p>
  <p>Comme vous pouvez le voir, lorsqu'il y a un 1 dans chaque valeur, le 1 est conservé, et lorsqu'il y a un mélange de 0 et de 1, ceux-ci sont remis à 0. Voici la table de vérité pour <span class="inline">AND</span>:</p>
  <p class="code">00 &amp; 00 = 00<br />
    01 &amp; 00 = 00<br />
    00 &amp; 01 = 00<br />
    01 &amp; 01 = 01</p>
  <p>Ainsi, ce n'est que lorsqu'il y a un bit à chaque endroit qu'il sera conservé. Ce que cela signifie, c'est que de la même manière que vous êtes capable de définir plusieurs <span class="notranslate">flags</span> à la fois, vous pouvez également effacer plusieurs <span class="notranslate">flags</span> à la fois. Par exemple, reprenons le cas ci-dessus, mais cette fois-ci en les effaçant. Nous voulons effacer les bits 1 et 3 (ce qui nous donne la valeur 5), mais en nous rappelant la table de vérité ci-dessus, nous voulons conserver tous les autres bits et effacer les bits 1 et 3. Ce serait un &quot;masque&quot; binaire de 11111111111111111111111111111010 (32bits). Ce masque conserve tous les bits actuellement activés, mais efface les deux bits que nous voulons réellement effacer. Donc si j'avais une valeur de 1000111011 et que je voulais effacer les bits 1 et 3 en utilisant le masque ci-dessus, cela donnerait ceci...</p>
  <p class="code">00000000000000000000001000111011 // Value<br />
    11111111111111111111111111111010 // Mask<br />
    00000000000000000000001000111010 // Value AND Mask</p>
  <p>C'est très bien, mais si nous devions le faire à chaque fois que nous avons besoin d'effacer <span class="notranslate">flags</span>, cela deviendrait fastidieux. Ce dont nous avons besoin, c'est d'un moyen de retourner les bits facilement (et de préférence sans coût pour le CPU). Heureusement, il existe un moyen simple de le faire en utilisant l'opérateur &quot; <span class="inline">~</span>&quot; <span class="inline">NOT</span>.</p>
  <p>L'opérateur <span class="inline">NOT</span> est exactement ce qu'il dit - <em>pas</em> ces bits. Voici une table de vérité pour <span class="inline">NOT</span>.</p>
  <p class="code">~00 = 11<br />
    ~01 = 10<br />
    ~10 = 01<br />
    ~11 = 00</p>
  <p>Cet opérateur rend la suppression de <span class="notranslate">flags</span> très simple, et mieux encore, il s'agit généralement d'une optimisation au moment de la compilation, ce qui signifie que si vous utilisez un nombre constant (c'est-à-dire pas une variable), le compilateur inversera les bits automatiquement pour vous. Prenons cette instruction où nous voulons effacer à nouveau les bits 1 et 3 :</p>
  <p class="code">a = a &amp; ~5;</p>
  <p>Cela se résume en fait à &quot;<span class="inline">a &amp; 11111111111111111111111111111010</span>&quot;. Cela rend la vie assez simple en termes d'effacement de <span class="notranslate">flags</span>.</p>
  <p>Le dernier opérateur que nous voulons examiner est &quot;<span class="inline">^</span>&quot; <span class="inline">EOR</span> (<span class="inline">Exclusive OR</span>, parfois appelé <span class="inline">XOR</span>), cet opérateur inverse les bits définis dans les deux valeurs. Voici la table de vérité de <span class="inline">EOR</span>:</p>
  <p class="code">0 ^ 0 = 0<br />
    0 ^ 1 = 1<br />
    1 ^ 0 = 1<br />
    1 ^ 1 = 0</p>
  <p>Cette fonction est curieuse, mais incroyablement utile. Par exemple, disons que nous voulons un compteur qui compte simplement de 0 à 1 et revient à 0 (en alternant entre 0 et 1), nous pourrions ajouter 1 et faire un <span class="inline">IF</span> pour voir s'il est arrivé à 2, puis le remettre à 1. Ou... nous pourrions ajouter 1 et ensuite <span class="inline">AND</span> avec 1 (depuis <span class="inline">01+01 = 10</span>, et <span class="inline">10 &amp; 01 = 0</span>) ou nous pouvons faire ceci :</p>
  <p class="code">a = a ^ 1;</p>
  <p>La première fois qu'il est exécuté, il s'agit de <span class="inline">0 ^ 1 = 1</span>, puis la deuxième fois de <span class="inline">1 ^ 1 = 0</span>, ce qui permet de faire basculer les choses de 0 à 1.</p>
  <p>Ainsi, <span class="inline">OR</span> (<span class="inline">|</span>), <span class="inline">AND</span>(<span class="inline">&amp;</span>), <span class="inline">NOT</span>(<span class="inline">~</span>) et <span class="inline">EOR</span>(<span class="inline">^</span>) nous permettent de manipuler les bits avec une relative facilité, nous permettant, au niveau le plus simple, de contrôler plusieurs bits à la fois. Nous pouvons évidemment utiliser ces opérations pour d'autres choses lorsque nous développons nos jeux, comme masquer <span class="notranslate">sprites</span>, faire des opérations sur des entiers <span class="inline">MOD</span> (en utilisant <span class="inline">AND</span>) ou faire de beaux compteurs en boucle.</p>
  <p>Nous pouvons donc effectuer des opérations simples sur les bits, mais examinons les choses plus complexes, en commençant par la question suivante : comment un ordinateur fait-il une addition ? Prenons un exemple très simple : <span class="inline">1+1</span>.</p>
  <p class="code">00000001<br />
    00000001<br />
    00000010</p>
  <p>Comme pour les additions normales, on additionne des nombres et on déborde dans la colonne suivante, mais contrairement à une addition décimale normale, on ne peut aller que de 0 à 1, et non de 0 à 9. Ainsi, l'ajout de <span class="inline">1+1</span> signifie que nous débordons sur <span class="inline">10</span>. Examinons maintenant un exemple plus complexe.</p>
  <p class="code">01011011 = 91<br />
    00101101 = 45<br />
    10001000 = 136</p>
  <p>C'est évidemment plus difficile à voir ici, mais les débordements s'enchaînent jusqu'à ce qu'il n'y ait plus de uns dans une colonne. Il convient de noter que les ordinateurs ne peuvent ajouter (ou soustraire, multiplier ou diviser) que deux nombres à la fois. Prenons l'exemple de <span class="inline">19 + 19 + 19</span>. En tant qu'être humain, nous pouvons ajouter tous les 9 ensemble, reporter le 2 et continuer ! Mais les ordinateurs ne peuvent pas faire cela - ce qu'ils peuvent faire, c'est ceci :<span class="inline"> (19 + 19) + 19</span>. Ils effectuent donc chaque calcul par blocs de 2.</p>
  <p>Les calculs binaires qui nous intéressent le plus en tant que programmeurs sont la multiplication et la division. Les ordinateurs ne multiplient que par 2, et pour faire plus, ils décomposent un nombre, puis additionnent tous les résultats. Prenons d'abord quelques exemples très simples. <span class="inline">4 * 2 = 8</span>. Pour multiplier par 2 en binaire, nous <em>décalons </em>tous les bits vers la GAUCHE d'une unité. Comme ceci :</p>
  <p class="code">00000100 * 2 = 00001000 = 8</p>
  <p>Dans ce cas, tous les bits se sont déplacés d'une unité vers la gauche, ce qui fait passer le bit 3 au bit 4 et fait passer la valeur de 4 à 8. Que diriez-vous d'un nombre plus grand ?</p>
  <p class="code">101 = 01100101 * 2 = 11001010 = 202</p>
  <p>Encore une fois, tous les bits se déplacent sur un, et c'est un multiple de 2. Alors, qu'en est-il d'un multiple de 4 ? Facile, on décale tout à gauche de 2, plutôt que de 1. Que diriez-vous de 16, ou 128 ? Cela nécessite un décalage vers la gauche de 4 bits ou de 7 bits respectivement. C'est incroyablement utile ; cela signifie que nous pouvons effectuer des multiplications simples en déplaçant simplement les bits. Pour ce faire, nous utilisons l'opérateur de <strong>décalage vers la gauche</strong> <span class="inline">&lt;&lt;</span>. Voici quelques exemples :</p>
  <p class="code">00000001 &lt;&lt; 1 = 000000010 = 2<br />
    00000001 &lt;&lt; 2 = 000000100 = 4<br />
    00000001 &lt;&lt; 3 = 000001000 = 8<br />
    00000001 &lt;&lt; 4 = 000010000 = 16<br />
    00000001 &lt;&lt; 5 = 000100000 = 32<br />
    00000001 &lt;&lt; 6 = 001000000 = 64<br />
    00000001 &lt;&lt; 7 = 010000000 = 128<br />
    00000001 &lt;&lt; 8 = 100000000 = 256</p>
  <p>Maintenant, en plus d'être très utile pour les multiplications rapides/simples, il est également très utile pour définir des bits spécifiques, sans avoir à calculer la valeur du bit. Disons que nous voulons régler le bit 27, quel est ce nombre ? (67108864 au fait !), nous pouvons utiliser la syntaxe ci-dessus pour définir facilement <span class="notranslate">flags</span> comme ceci :</p>
  <p class="code">a = a | (1 &lt;&lt; 27)</p>
  <p>Ok... donc en fait ce serait le bit 26 de la façon dont nous avons décrit les choses jusqu'à présent (puisque les bits commençaient à un), mais en fait... les bits commencent au bit 0, et vont vers le haut, pas au bit 1. Ainsi, bien qu'il y ait 32 bits dans un INTEGER, les bits vont de 0 à 31, et non de 1 à 32. C'est en fait assez utile, car nous pouvons maintenant définir des constantes pour les nombres de bits.</p>
  <p>Disons que le bit 27 est un drapeau actif, et que le bit 0 est un drapeau explosif. Comment pouvons-nous activer les deux ?</p>
  <p class="code">ACTIVE = 27;<br />
    BOOM = 0;<br />
    A = A | (1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM);</p>
  <p>Cela peut sembler beaucoup de code, mais si ces nombres sont des constantes, le compilateur précompilera ces opérations en une seule valeur, de sorte que nous nous retrouvons avec ceci comme code réel.</p>
  <p class="code">A = A | 13421772;</p>
  <p>Pour effacer ces bits (comme nous l'avons vu ci-dessus), il suffit d'utiliser le modificateur NOT, comme ceci :</p>
  <p class="code">A = A &amp; ~((1 &lt;&lt; ACTIVE) | (1 &lt;&lt; BOOM));</p>
  <p>Ainsi, ce système nous permet d'activer et de désactiver tous les bits que nous voulons, et il nous permet également de compresser massivement les structures de données. La compression des structures de données est une bonne chose, car si vous utilisez moins de mémoire, vous aurez moins de ratés sur <span class="notranslate">cache</span>, et votre code s'exécutera plus rapidement. Disons-le ainsi : qu'est-ce qui est le plus rapide, copier 32 Mo de données ou 4 Mo ? Eh bien, il est clair que 4 est plus rapide. Donc si vous pouvez regrouper tous vos <span class="notranslate">flags</span> dans une seule mémoire <span class="notranslate">access</span>, c'est bien !</p>
  <p>Maintenant, regardons rapidement comment on effectue une division, et pourquoi cela va être si utile. La division s'effectue en décalant les bits <em>vers la droite</em> à l'aide de l'opérateur de <strong>décalage vers la droite</strong> <span class="inline">&gt;&gt;</span>. Prenons un nombre simple - 64 - et divisons-le par 32 :</p>
  <p class="code">64 / 32 = 01000000 &gt;&gt; 5 = 00000010</p>
  <p>Vous décalez donc le bit unique vers le bas de 5 (ce qui est le nombre de décalages requis pour 32 - voir ci-dessus), ce qui nous donne 2. Mais que se passe-t-il s'il y a d'autres bits ? Voyons cela :</p>
  <p class="code">68 / 32 = 01000100 &gt;&gt; 5 = 00000010</p>
  <p>Alors voilà.... C'est exactement la même chose. Les bits que nous avons décalés vers le bas sont simplement perdus. C'est en fait très utile, car lors d'une division vers le bas, si nous avons besoin du reste, il existe un moyen encore plus simple de l'obtenir, que nous aborderons dans un instant. Mais d'abord, prenons un exemple pratique. J'ai une position X et Y, et je veux obtenir la cellule de la grille dans laquelle elle se trouve, la grille ayant une taille de 32x32. Cette méthode permet de stocker des objets, des collisions, <span class="notranslate">flags</span> - toutes sortes de choses, et <span class="notranslate">access</span> très rapidement. Nous y voilà donc :</p>
  <p class="code">var X_index = x &gt;&gt; 5;<br />
    var Y_index = y &gt;&gt; 5;<br />
    cell_data = mygrid[# X_index,Y_index];</p>
  <p>Et si on voulait le reste ? Peut-être que ce reste est utilisé comme une sorte d'indicateur d'ordre ou autre. Quelle que soit la raison, obtenir le reste est aussi simple que de faire un <span class="inline">AND</span>:</p>
  <p class="code">var remainder = x &amp; 31<br />
    var X_Index = x &gt;&gt; 5;</p>
  <p>Vous avez peut-être remarqué que nous avons utilisé plusieurs lignes de code ici (comme c'est souvent le cas), mais il ne s'agit que de quelques instructions très rapides. Mais pourquoi 31 ? Eh bien, comme le bit 5 est 32, alors tous les bits en dessous seraient 31, et c'est le reste maximum, donc c'est avec cela que nous utilisons <span class="inline">AND</span> (nous pourrions aussi utiliser <span class="inline">(1 &lt;&lt; 5) - 1</span>, ce qui donnerait <span class="inline">32 - 1 = 31</span>). Maintenant, si je devais faire cela sans comprendre le binaire, cela ressemblerait à ceci :</p>
  <p class="code">var r = x mod 32;<br />
    var X_Index = floor(x / 32);</p>
  <p>Alors pourquoi est-ce bien pire ? Eh bien, pour diviser par 32, nous devons exécuter une division en virgule flottante - ce qui prend évidemment du temps, mais pour faire le <span class="inline">mod 32</span>, vous devez en fait en faire un autre ! Si nous faisions cela en assembleur, nous obtiendrions les DEUX valeurs en une seule division, mais ce n'est pas le cas dans les langages de haut niveau (enfin... pas très souvent), et nous devons donc faire tout le travail deux fois. Cela s'ajoute, surtout si vous faites une boucle serrée avec beaucoup de calculs comme celui-ci. Les divisions d'entiers utilisant le décalage de bits comme indiqué ci-dessus aident vraiment à optimiser votre jeu.</p>
  <p>Comme il peut s'agir d'un concept assez complexe à appréhender et à appliquer à des situations de programmation réelles, vous trouverez ci-dessous une série de courts exemples pouvant être appliqués à tout jeu réalisé avec <span data-keyref="GameMaker Name">GameMaker</span>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Alignement des tuiles</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Les développeurs de<span data-keyref="GameMaker Name">GameMaker</span> utilisent souvent la fonction <span class="inline">place_free()</span>, puis, lorsqu'une collision est détectée, ils essaient de déplacer lentement l'objet en bouclant autour d'une position <span class="inline">x</span> ou <span class="inline">y</span> tout en continuant à exécuter cette fonction, ou en utilisant la fonction <span class="inline">move_outside_all()</span>.</p>
    <p class="dropspot">Alors, quel est le moyen le plus rapide de le faire ? Eh bien, si nous utilisons des tuiles à la puissance 2, nous disposons d'une méthode très simple qui est également très rapide. Si nous nous déplaçons vers la droite et que nous sommes entrés dans un bloc de collision, alors, comme nous le savons, tout est aligné sur 32. Nous devons donc également aligner le site <span class="notranslate">sprite</span> sur une limite de 32 pixels - de préférence celle de gauche - afin que le site <span class="notranslate">sprite</span> soit déplacé en dehors de la collision. C'est très facile, en connaissant les règles que nous avons utilisées ci-dessus pour obtenir le reste, et en sachant comment obtenir l'inverse des bits, nous pouvons simplement faire ceci :</p>
    <p class="code">x = x &amp; ~31;</p>
    <p class="dropspot">C'est exact, c'est TOUT ce qu'il faut pour s'aligner sur une limite de 32 pixels. En changeant le 31, nous pouvons nous aligner sur ce que nous voulons - tant que c'est une puissance de 2. (Cela équivaut à diviser par 32, puis à multiplier par 32, ce qui supprime les bits inférieurs).</p>
    <p class="dropspot">Si nous voulions nous aligner sur la droite, nous ferions ce qui précède, mais nous ajouterions 32 pour le déplacer dans la tuile suivante. C'est simple. Tout ceci rend le code de collision monumentalement plus rapide et vous permet d'utiliser le temps du CPU là où vous en avez vraiment besoin.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Clés et portes</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Disons que vous avez un niveau avec quelques portes, et une clé pour chacune. Comment pouvez-vous facilement marquer une clé pour une porte spécifique ? Eh bien, normalement, il suffit d'attribuer un ID à la clé et à la porte. Et si vous vouliez qu'une clé ouvre 2 ou 3 portes ? C'est simple. Vous utilisez un MASQUE. Un seul bit est attribué à la porte, comme suit :<br>
       </p>
    <p class="code">door_id = 1; // 0001</p>
    <p class="dropspot">Les autres seraient quelque chose comme :<br>
       </p>
    <p class="code">door_id=2; // 0010<br />
      door_id=4; // 0100<br />
      door_id=8; // 1000<br />
      etc...</p>
    <p class="dropspot">Si nous voulions que la clé ouvre les portes 1 et 3, la clé aurait la valeur MASK de 5 (soit 101 en binaire). Si nous effectuons un <span class="inline">AND</span> de cette valeur et que le résultat est &quot;non nul&quot;, nous savons que la clé peut ouvrir la porte. Vous pouvez également avoir des clés qui n'ouvrent rien en ayant un MASK de 0. Voir le code ci-dessous pour la vérification réelle :</p>
    <p class="code">if ((key_id &amp; door_id) ! = 0)<br />
      {<br />
          opendoor();<br />
      }</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Compteurs en boucle</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot">Disons que nous voulons un simple compteur d'animation, allant de 0 à 15 (puisque nous avons 16 images d'animation). Normalement, vous feriez une incrémentation, puis un contrôle <span class="inline">if</span> pour envelopper le nombre, mais pour cet exemple, utilisons l'opérateur <span class="inline">AND(&amp;)</span>:</p>
    <p class="code">counter = (counter + 1) &amp; 15;</p>
    <p class="dropspot">Comme 16 est une puissance de 2, nous pouvons réduire ce nombre par 1 et l'utiliser comme masque, que nous pouvons ensuite utiliser pour envelopper la valeur de notre compteur. Si le compteur passe de 15 à 16, nous obtenons le motif binaire <span class="inline">10000</span>, et si nous <span class="inline">AND</span> l'ajout de 15 (motif binaire <span class="inline">01111</span>), nous obtenons <span class="inline">00000</span> (simplement zéro). Cela signifie que le code ci-dessus est utile pour envelopper des valeurs dans la gamme d'une puissance de 2.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Contrôle du pouvoir des 2</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot">Et si vous vouliez vérifier si quelque chose est une puissance de 2 ? Eh bien, voici une petite astuce... Ceci retournera <span class="inline">true</span> si la valeur donnée est une puissance de 2 :</p>
    <p class="code">function is_pow2(_val)<br />
      {<br />
          return _val &amp; (_val - 1)) == 0;<br />
      }</p>
    <p class="dropspot">Donc, si nous avions le nombre 51 (<span class="inline">110011</span>), qu'est-ce que cela ferait ? Eh bien, on obtient ceci... <span class="inline">110011 &amp; 110010</span> ce qui nous laisse évidemment <span class="inline">false</span>, puisqu'il reste beaucoup de bits après <span class="inline">AND</span>. Si nous avions 64 (<span class="inline">1000000</span>), alors cela devient ceci... <span class="inline">1000000 &amp; 0111111</span> qui nous laisse 0 <em>,</em> donc <span class="inline">true</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Alignement de l'index</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot">Voici un petit bout de code pour aligner les puissances de 2 nombres. (1,2,4,8,16 et ainsi de suite). Cela peut être très utile pour l'allocation de mémoire, ou pour s'assurer que vous écrivez les données aux limites appropriées. Dans cet exemple, <span class="inline">_val1</span> doit être aligné sur <span class="inline">_val2</span> octets, où <span class="inline">_val2</span> est une puissance de 2. Cette petite fonction arrondit à la prochaine limite du nombre désiré.</p>
    <p class="code">function align_pow2(_val1, _val2)<br />
      {<br />
          return _val1 + (_val2 - 1)) &amp; ~(_val2 - 1);<br />
      }</p>
    <p class="dropspot"> </p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="Type_Tables.htm">Tables de types</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Bitwise Operators
-->
  <!-- TAGS
bitwise_operators
-->
</body>
</html>