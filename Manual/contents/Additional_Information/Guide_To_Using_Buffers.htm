<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Guide d'utilisation des tampons</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page that explains how buffers work" />
  <meta name="rh-index-keywords" content="Guide To Using Buffers" />
  <meta name="search-keywords" content="Using Buffers,buffers" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Guide d'utilisation des tampons</h1>
  <p>Un <span class="notranslate">buffer</span> (en programmation) est essentiellement un espace dans la mémoire du système qui est utilisé pour stocker de petits paquets de données pour à peu près n'importe quoi (par exemple : transfert de données, collisions, données de couleur etc...). Étant donné qu'il se trouve dans la mémoire système, il est très rapide d'accéder à <span class="notranslate">access</span>, et un <span class="notranslate">buffer</span> est généralement utilisé pour le stockage à très court terme, comme la réception d'informations réseau avant leur traitement, ou pour le stockage d'un point de contrôle dans votre jeu (ceci est expliqué dans l'exemple donné plus bas sur la page).</p>
  <p><img>Les tampons sont créés en allouant un espace dans la mémoire du système, calculé en <a class="glossterm" data-glossterm="octet" href="#">octets</a> <span class="glossextra">s</span>, qui est ensuite réservé à votre jeu tant que celui-ci est en cours d'exécution ou jusqu'à ce que vous supprimiez le <span class="notranslate">buffer</span> à l'aide de la fonction appropriée (vous trouverez toutes les fonctions du <span class="notranslate">GML</span> <span class="notranslate">buffer</span> listées <a href="../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">ici</a>). Cela signifie que même lorsque votre jeu n'est pas en cours d'exécution (par exemple, sur un appareil mobile, lorsque vous prenez un appel, le jeu est mis en arrière-plan), l'adresse <span class="notranslate">buffer</span> existe toujours, mais si le jeu est fermé ou redémarré, l'adresse <span class="notranslate">buffer</span> est perdue.</p>
  <p class="note"><strong>NOTE</strong>: Redémarrer le jeu n'effacera pas ou ne supprimera pas le <span class="notranslate">buffer</span>! Mais il empêchera tout autre <span class="notranslate">access</span> vers le <span class="notranslate">buffer</span> précédemment créé, car l'identifiant aura été perdu, provoquant une fuite de mémoire qui fera planter votre jeu. Donc, lorsque vous redémarrez une partie, n'oubliez pas de supprimer d'abord tout <span class="notranslate">buffers</span>.</p>
  <p><span data-keyref="GameMaker Name">GameMaker</span> permet la création de quatre types différents de <span class="notranslate">buffer</span>. La raison en est que <span class="notranslate">buffers</span> est conçu pour être un support de stockage temporaire hautement optimisé, et en tant que tel, vous devez créer un <span class="notranslate">buffer</span> approprié au type de données que vous souhaitez y stocker, sinon vous pourriez obtenir des erreurs ou provoquer un goulot d'étranglement dans votre code. Avant d'aller plus loin, examinons les quatre types de <span class="notranslate">buffer</span> disponibles (définis comme des <strong>constantes </strong>dans <span class="notranslate">GML</span>) :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Constant</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fixed</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> d'une taille fixe en octets. La taille est définie lors de la création du site <span class="notranslate">buffer</span> et ne peut plus être modifiée.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_grow</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> qui <i>s'agrandit</i> dynamiquement au fur et à mesure que des données sont ajoutées. Vous le créez avec une taille initiale (qui doit être une approximation de la taille des données à stocker), puis il se développe pour accepter d'autres données qui dépassent cette taille initiale.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_wrap</span></td>
        <td><br>
          Un <span class="notranslate">buffer</span> où les données seront <i>enveloppées</i>. Lorsque les données ajoutées atteignent la limite de la taille de <span class="notranslate">buffer</span>, l'écrasement est replacé au début de <span class="notranslate">buffer</span>, et l'écriture se poursuit à partir de ce point.</td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">buffer_fast</span></td>
        <td><br>
          Il s'agit d'une version spéciale &quot;dépouillée&quot; de <span class="notranslate">buffer</span> qui est extrêmement rapide en lecture/écriture. Cependant, il ne peut être utilisé qu'avec les types de données <span class="inline"><span class="inline">buffer_u8</span>, et doit être aligné sur 1 octet. (Des informations sur les <b>types de données</b> et l'<b>alignement des octets</b> sont disponibles plus bas sur cette page).</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Ce sont les types de <span class="notranslate">buffer</span> dont vous disposez avec <span data-keyref="GameMaker Name">GameMaker</span>, et celui que vous choisirez dépendra largement de l'utilisation que vous souhaitez en faire. Par exemple, un grow <span class="notranslate">buffer</span> serait utilisé pour stocker un &quot;instantané&quot; de données afin de créer un jeu de sauvegarde puisque vous ne connaissez pas la quantité réelle de données qui va y être placée, ou un fast <span class="notranslate">buffer</span> serait utilisé lorsque vous savez que les valeurs avec lesquelles vous travaillez sont toutes comprises entre 0 et 255 ou -128 et 127, par exemple lors du traitement des données <a class="glossterm" data-glossterm="ARGB" href="#">ARGB</a> d'une image.</p>
  <p><img>Lorsque vous créez un <span class="notranslate">buffer</span>, vous devez toujours essayer de lui donner une taille adaptée au type, la règle générale étant qu'il doit être créé pour accueillir la taille maximale des données qu'il doit stocker. En cas de doute, utilisez un <span class="notranslate">buffer</span> de croissance pour éviter les erreurs d'écrasement.</p>
  <p>Le code réel pour créer un <span class="notranslate">buffer</span> ressemblerait à quelque chose comme ceci :</p>
  <p class="code">player_buffer = buffer_create(16384, buffer_fixed, 2);</p>
  <p><br>
    Cela créerait un <span class="notranslate">buffer</span> fixe de 16384 octets et aligné sur 2, la fonction renvoyant une valeur d'identification unique qui est stockée dans une variable pour une référence ultérieure de ce <span class="notranslate">buffer</span>.</p>
  <p>Lorsque vous lisez et écrivez des données sur un site <span class="notranslate">buffer</span>, vous le faites par &quot;morceaux&quot; de données définis par leur &quot;type de données&quot;. Le &quot;type de données&quot; détermine le nombre d'octets alloués à la valeur écrite sur le site <span class="notranslate">buffer</span>. Il est essentiel que vous vous y preniez correctement, sinon vous obtiendrez des résultats très étranges (voire des erreurs) pour votre code.</p>
  <p>Les tampons sont écrits (et lus) <strong>séquentiellement</strong>, c'est-à-dire qu'une donnée est écrite après l'autre, chaque donnée étant d'un type déterminé. Cela signifie que vous devez idéalement savoir à tout moment quelles données vous écrivez sur le site <span class="notranslate">buffer</span>. Ces types de données sont définis dans <span class="notranslate">GML</span> par les constantes suivantes :</p>
  <p> </p>
  <table>
    <tbody>
      <tr>
        <th>Type de données Constante</th>
        <th>Octets</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="inline">buffer_u8</span></td>
        <td>1</td>
        <td><br>
          Un nombre entier non signé de 8 bits. Il s'agit d'une valeur positive comprise entre 0 et 255.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s8</span></td>
        <td>1</td>
        <td><br>
          Un nombre entier signé de 8 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -128 et 127 (0 est considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u16</span></td>
        <td>2</td>
        <td><br>
          Un nombre entier non signé de 16 bits. Il s'agit d'une valeur positive comprise entre 0 et 65 535.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s16</span></td>
        <td>2</td>
        <td><br>
          Un nombre entier signé de 16 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -32 768 et 32 767 (0 est considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f16</span></td>
        <td>2</td>
        <td><br>
          Un nombre à virgule flottante de 16 bits. Il peut s'agir d'une valeur positive ou négative comprise dans la plage de +/- 65504. <b>(Non pris en charge actuellement !)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u32</span></td>
        <td>4</td>
        <td><br>
          Un nombre entier non signé de 32 bits. Il s'agit d'une valeur positive comprise entre 0 et 4 294 967 295.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_s32</span></td>
        <td>4</td>
        <td><br>
          Un nombre entier signé de 32 bits. Il peut s'agir d'une valeur positive ou négative comprise entre -2 147 483 648 et 2 147 483 647 (0 étant considéré comme positif).</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f32</span></td>
        <td>4</td>
        <td><br>
          Un nombre à virgule flottante de 32 bits. Il peut s'agir d'une valeur positive ou négative comprise dans la plage de +/-16777216.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_u64</span></td>
        <td>8</td>
        <td><br>
          Une valeur entière non signée de 64 bits.<b>(Non supporté actuellement par toutes les fonctions de <span class="notranslate">buffer</span>!)</b></td>
      </tr>
      <tr>
        <td><span class="inline">buffer_f64</span></td>
        <td>8</td>
        <td><br>
          Un nombre à virgule flottante de 64 bits.</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_bool</span></td>
        <td>1</td>
        <td><br>
          Une valeur booléenne. Ne peut être que 1 ou 0 (<span class="inline">true</span> ou <span class="inline">false</span>)</td>
      </tr>
      <tr>
        <td><span class="inline">buffer_string</span></td>
        <td>N/A</td>
        <td><br>
          C'est une chaîne UTF-8 à terminaison nulle (0x00). En fait, une chaîne de caractères <span class="notranslate">GameMaker</span> est envoyée à <span class="notranslate">buffer</span>, et un 0 est placé à la fin.</td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <p>Par exemple, si vous avez créé un site <span class="notranslate">buffer</span> et que vous souhaitez y écrire des informations, vous pouvez utiliser le code suivant :</p>
  <p class="code">buffer_write(buff, buffer_bool, global.Sound);<br />
    buffer_write(buff, buffer_bool, global.Music);<br />
    buffer_write(buff, buffer_s16, obj_Player.x);<br />
    buffer_write(buff, buffer_s16, obj_Player.y);<br />
    buffer_write(buff, buffer_string, global.Player_Name);</p>
  <p>En regardant l'exemple ci-dessus, vous pouvez voir que vous pouvez écrire différents types de données dans un <span class="notranslate">buffer</span> en même temps (vous êtes seulement limité à un type de données spécifique lorsque vous utilisez le type de tampon <em>rapide </em>), et ces données seront ajoutées dans le <span class="notranslate">buffer</span> séquentiellement (bien que leur position réelle dans le <span class="notranslate">buffer</span> dépendra de leur alignement d'octets, expliqué ci-dessous). Il en va de même pour la lecture d'informations à partir de <span class="notranslate">buffer</span>. Dans le cas de l'exemple donné ci-dessus, vous lirez à partir de <span class="notranslate">buffer</span> dans l'ordre dans lequel vous avez écrit les données, en vérifiant que le type de données est le même, par ex :</p>
  <p class="code">global.Sound = buffer_read(buff, buffer_bool);<br />
    global.Music = buffer_read(buff, buffer_bool);<br />
    obj_Player.x = buffer_read(buff, buffer_s16);<br />
    obj_Player.y = buffer_read(buff, buffer_s16);<br />
    global.Player_Name = buffer_read(buff, buffer_string);</p>
  <p>Comme vous pouvez le constater, vous lisez les informations dans le même ordre que vous les avez lues sur le site <span class="notranslate">buffer</span>. Pour plus d'informations sur la façon d'ajouter et de supprimer des données sur le site <span class="notranslate">buffer</span>, veuillez consulter les exemples ci-dessous.</p>
  <p>Si vous avez parcouru cette page, vous aurez vu des références à l'<strong>alignement des octets </strong>d'un <span class="notranslate">buffer</span>. Il s'agit essentiellement de la position à laquelle les nouvelles données seront stockées dans un <span class="notranslate">buffer</span> donné. Comment cela fonctionne-t-il ? Eh bien, pour un <span class="notranslate">buffer</span> aligné sur un seul octet, chaque donnée est écrite sur le <span class="notranslate">buffer</span> de manière séquentielle, chaque nouvelle donnée étant ajoutée directement après la précédente. En revanche, un site <span class="notranslate">buffer</span> aligné sur 2 octets écrira chaque donnée à des intervalles de 2 octets, de sorte que même si votre écriture initiale est constituée d'un octet de données, l'écriture suivante sera déplacée pour s'aligner sur deux octets :</p>
  <p><img>Ainsi, si votre alignement d'octets est réglé sur 4 octets, par exemple, et que vous écrivez un seul élément de données d'un octet, puis effectuez un <strong>tell </strong> sur <span class="notranslate">buffer</span> (un tell indique la position actuelle de lecture/écriture sur <span class="notranslate">buffer</span>), vous obtiendrez un <strong>décalage </strong>d'un octet (dans ce cas, le décalage est le nombre d'octets entre le début de <span class="notranslate">buffer</span> et la position actuelle de lecture/écriture).</p>
  <p>Toutefois, si vous écrivez un autre élément de données, d'une taille d'un octet également, <em>puis </em>effectuez un tell sur <span class="notranslate">buffer</span>, vous obtiendrez un décalage de 5 octets (même si vous n'avez écrit que 2 octets de données), car l'alignement a paddé les données pour les aligner sur l'alignement de 4 octets de <span class="notranslate">buffer</span>.</p>
  <p>En gros, cela signifie que l'alignement n'affectera que l'<em>endroit où </em>les choses sont écrites, donc si vous faites un <span class="notranslate">buffer</span> tell après avoir écrit quelque chose, il retournera la position d'écriture actuelle qui suit immédiatement les données que vous avez précédemment écrites. Notez cependant que si vous écrivez ensuite un autre morceau de données, en interne, <span class="notranslate">buffer</span> déplacera la position d'écriture vers le multiple suivant de la taille d'alignement avant d'écrire réellement le morceau de données.</p>
  <p>Vous trouverez ci-dessous quelques exemples de l'utilisation de <span class="notranslate">buffers</span> dans un projet :</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Point de contrôle de la mémoire tampon</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Un exemple simple de la façon dont un <span class="notranslate">buffer</span> peut être utilisé dans un jeu <span data-keyref="GameMaker Name">GameMaker</span> pour n'importe quelle plateforme, est la fonction <a href="../GameMaker_Language/GML_Reference/General_Game_Control/game_save_buffer.htm"><span class="inline">game_save_buffer()</span></a>. Cette fonction prend un &quot;instantané&quot; de l'état actuel du jeu et l'enregistre dans un fichier prédéfini <span class="notranslate">buffer</span>, qui peut ensuite être lu pour charger à nouveau le jeu à cet endroit.</p>
    <p class="note"><strong>REMARQUE</strong>: Cette fonction est très limitée et est conçue pour les débutants qui souhaitent mettre en place un système de points de contrôle rapidement, mais les utilisateurs plus avancés préféreront peut-être coder leur propre système en utilisant les fonctions du fichier, car le jeu ne sauvegardera aucune des ressources dynamiques que vous pouvez créer au moment de l'exécution, comme les structures de données, les surfaces, l'ajout de <span class="notranslate">sprites</span>, etc...</p>
    <p class="dropspot">La première chose à faire est de créer un nouvel objet pour contrôler l'enregistrement et le chargement. Vous devez donc en créer un et lui attribuer un <strong>événement Create</strong>. Dans cet événement, vous pourriez placer le code suivant :</p>
    <p class="code">SaveBuffer = buffer_create(1024, buffer_grow, 1);<br />
      StateSaved = false;</p>
    <p class="dropspot">La première ligne crée un grow <span class="notranslate">buffer</span> (puisque nous ne connaissons pas la taille finale des données sauvegardées) de 1024 octets et aligné sur 1 octet. Une variable est ensuite créée pour vérifier si le jeu a été sauvegardé ou non (elle sera utilisée pour le chargement).</p>
    <p class="dropspot">Ensuite, nous ajouterons un <strong>événement Keypress</strong> (par exemple) dans lequel nous enregistrerons l'état actuel du jeu dans le tampon créé :</p>
    <p class="code">StateSaved = true;<br />
      buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
      game_save_buffer(SaveBuffer);</p>
    <p class="dropspot">L'exemple ci-dessus définit d'abord la variable de contrôle sur <span class="inline">true </span>(de manière à ce qu'elle soit sauvegardée lorsque nous sauvegardons le jeu sur <span class="notranslate">buffer</span>), puis cherche le début de <span class="notranslate">buffer</span> avant d'y écrire l'état de sauvegarde actuel. Pourquoi utilisons-nous <a href="../GameMaker_Language/GML_Reference/Buffers/buffer_seek.htm"><span class="inline">buffer_seek()</span></a>? Eh bien, comme nous l'avons déjà mentionné sur cette page, vous lisez et écrivez sur <span class="notranslate">buffer</span> à partir de la dernière position où des données ont été ajoutées. Cela signifie que si vous ne remettez pas le compteur <span class="notranslate">buffer</span> au début, lorsque vous sauvegardez, vous ajouterez les données dans <span class="notranslate">buffer</span> à la position actuelle de lecture/écriture de <span class="notranslate">buffer</span>. Nous utilisons donc la fonction <span class="inline">buffer_seek()</span> pour déplacer le tell au début de <span class="notranslate">buffer</span>.</p>
    <p class="dropspot">Nous avons maintenant sauvegardé l'état actuel du jeu dans un fichier <span class="notranslate">buffer</span>. L'étape suivante consistera à coder la manière de le charger, probablement dans un autre <strong>événement Keypress</strong>:</p>
    <p class="code">if StateSaved<br />
      {<br />
          buffer_seek(SaveBuffer, buffer_seek_start, 0);<br />
          game_load_buffer(SaveBuffer);<br />
      }</p>
    <p class="dropspot">Le jeu sera alors chargé à la fin de l'événement dans lequel vous placez le code ci-dessus.</p>
    <p class="note"><strong>REMARQUE</strong>: cette fonction ne doit être utilisée que dans la même pièce, et non pour générer des parties sauvegardées complètes après la fermeture ou le redémarrage de votre jeu !</p>
    <p class="dropspot">La dernière chose à ajouter à l'objet contrôleur est un code de &quot;nettoyage&quot;. <span class="notranslate">Buffers</span> est stocké dans la mémoire et, en tant que tel, si vous ne nettoyez pas quand vous avez fini avec eux, vous pouvez obtenir des fuites de mémoire qui finiront par ralentir et faire planter votre jeu. Vous ajouterez donc probablement un <strong>événement de fin de salle</strong> (de la catégorie <strong>Autres</strong> événements) avec :</p>
    <p class="code">buffer_delete(SaveBuffer);</p>
    <p class="dropspot">Cet objet peut maintenant être placé dans une pièce et, en appuyant sur une touche, sauvegarder et charger l'état de la pièce à partir du site <span class="notranslate">buffer</span>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Tampons de réseau</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Lorsque vous travaillez avec les <a href="../GameMaker_Language/GML_Reference/Networking/Networking.htm">fonctions réseau</a> de <span data-keyref="GameMaker Name">GameMaker</span>, vous devez utiliser <span class="notranslate">buffers</span> pour créer le paquet de données qui sera envoyé sur la connexion réseau. Cet exemple a pour but de montrer comment cela est fait, mais en raison de l'étendue des possibilités de mise en réseau, il n'est conçu que pour montrer comment utiliser le site <span class="notranslate">buffers</span> lui-même, et non le système de mise en réseau complet.</p>
    <p class="dropspot">La première chose que nous allons montrer est la création et l'utilisation d'un <span class="notranslate">buffer</span> pour le côté client de la connexion réseau. Ce <span class="notranslate">buffer</span> sera utilisé pour créer de petits paquets de données qui pourront ensuite être envoyés au serveur. Ainsi, dans l'<strong>événement de création d'</strong> une instance, nous affecterons un <span class="notranslate">buffer</span> comme suit :</p>
    <p class="code">send_buff = buffer_create(256, buffer_grow, 1);</p>
    <p class="dropspot">Nous faisons en sorte que le site <span class="notranslate">buffer</span> soit petit (256 octets), car il n'est pas destiné à contenir de grandes quantités de données, puis nous le faisons croître <span class="notranslate">buffer</span> pour éviter toute erreur si nous devons ajouter des données à envoyer à tout moment, et l'alignement est fixé à un pour des raisons pratiques.</p>
    <p class="dropspot">Maintenant, disons que nous voulons que notre client envoie des données au serveur. Pour cela, nous devons créer un &quot;paquet&quot; sur <span class="notranslate">buffer</span>. Dans cet exemple, nous allons envoyer un <strong>événement de pression de touche</strong>, comme lorsque le joueur appuie sur la <em>flèche gauche </em>pour se déplacer dans le jeu. Pour ce faire, nous écrivons d'abord les données nécessaires sur le site <span class="notranslate">buffer</span>, puis nous les envoyons :</p>
    <p class="code">buffer_seek(buff, buffer_seek_start, 0);<br />
      buffer_write(buff, buffer_u8, 1);<br />
      buffer_write(buff, buffer_s16, vk_left);<br />
      buffer_write(buff, buffer_bool, true);<br />
      network_send_packet(client, buff, buffer_tell(buff));</p>
    <p class="dropspot">Avant d'écrire sur <span class="notranslate">buffer</span>, nous avons placé le &quot;tell&quot; au début de <span class="notranslate">buffer</span>, car le réseau prend toujours les données au début d'un <span class="notranslate">buffer</span>. Nous écrivons ensuite la valeur de contrôle (qui sera utilisée par le serveur pour déterminer le type d'événement à traiter), puis la touche utilisée, et enfin l'état de la touche (dans ce cas, true pour pressé). Ce <span class="notranslate">buffer</span> est ensuite envoyé sous forme de paquet de données par la fonction réseau. Notez que nous n'envoyons pas l'intégralité de <span class="notranslate">buffer</span>! Nous n'envoyons que les données écrites, en utilisant la fonction buffer_tell pour retourner la position actuelle de lecture/écriture de <span class="notranslate">buffer</span> (rappelez-vous que l'écriture sur <span class="notranslate">buffer</span> déplace le &quot;tell&quot; à la fin de ce qui a été écrit). Ceci est simplement pour éviter d'envoyer plus d'octets que nécessaire.</p>
    <p class="dropspot">Qu'en est-il de la réception des données sur le serveur ? Le paquet de données reçu doit être écrit dans le <span class="notranslate">buffer</span> sur le serveur et ensuite utilisé pour mettre à jour le jeu. Pour cela, nous utiliserons l'<a href="../The_Asset_Editors/Object_Properties/Async_Events.htm">événement asynchrone Networking</a> dans l'objet contrôleur réseau du serveur, comme le montre le code simplifié ci-dessous :</p>
    <p class="code">var buff = ds_map_find_value(async_load, &quot;buffer&quot;);<br />
      if (cmd == buffer_read(buff, buffer_u8)) <br />
      {<br />
          key = buffer_read(buff, buffer_s16);<br />
          key_state = buffer_read(buff, buffer_bool);<br />
      }</p>
    <p class="dropspot">L'événement asynchrone contient une carte DS temporaire spéciale <span class="inline">async_load</span> (elle est automatiquement supprimée de la mémoire à la fin de l'événement) qui contient différentes informations en fonction du type de données entrantes du réseau. Dans ce cas, nous supposons que la carte a été vérifiée et qu'il s'agit d'un paquet de données <span class="notranslate">buffer</span> envoyé par un client. Nous vérifions maintenant le premier élément de données qui se trouve sur <span class="notranslate">buffer</span> pour voir quel type d'événement a été envoyé - dans ce cas, la valeur &quot;1&quot; représente un événement de touche, mais lorsque vous codez ces choses, vous devriez définir des constantes pour contenir ces valeurs afin de simplifier les choses - puis nous stockons la touche pressée et son état (<span class="inline">true</span> = pressée, <span class="inline">false</span> = relâchée). Ces informations seraient ensuite utilisées pour mettre à jour tous les clients avec le nouvel état du joueur client émetteur.</p>
    <p class="note"><strong>REMARQUE</strong>: Le site <span class="notranslate">buffer</span> créé à partir de la carte DS est automatiquement supprimé à la fin de l'événement asynchrone du réseau, il n'est donc pas nécessaire d'utiliser <span class="inline" style="font-size: 14px">buffer_delete()</span> ici.</p>
    <p class="dropspot"> </p>
  </div>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Additional_Information.htm">Informations complémentaires</a></div>
        <div style="float:right">Suivant : <a href="Bitwise_Operators.htm">Opérateurs binaires</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Buffers
Using Buffers
-->
  <!-- TAGS
using_buffers
-->
</body>
</html>