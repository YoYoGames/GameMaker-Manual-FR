<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables et port√©e des variables</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining variables and their scoping in GML" />
  <meta name="rh-index-keywords" content="Variables And Variable Scope" />
  <meta name="search-keywords" content="variables,scope,local variables,instance variables,global variables" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables et port√©e des variables</h1>
  <p>Comme tout langage de programmation, <b>GML</b> utilise des <i>variables</i> comme unit√© de base pour la plupart des op√©rations de programmation. Les variables sont utilis√©es pour stocker des informations dans la m√©moire du p√©riph√©rique en vue d'une utilisation ult√©rieure (ou instantan√©e). Un nom leur est attribu√© afin que vous puissiez vous y r√©f√©rer dans les fonctions de script et sur <span class="notranslate">runtime</span>. Une variable en <b>GML</b> peut stocker de nombreux √©l√©ments diff√©rents <a href="Data_Types.htm"><strong>Types de donn√©es</strong></a>Une variable en GML peut stocker beaucoup de choses diff√©rentes, comme un nombre r√©el (par exemple 100, 2.456575, -56 etc...), une cha√Æne de caract√®res (par exemple &quot;Hello world !&quot;), un nombre entier (par exemple 1, 556, -7), ou un bool√©en (<span class="inline">true</span> ou <span class="inline">false</span>), ainsi que d'autres choses :</p>
  <p class="code">var _num = 126.4545;<br />
    var _str = &quot;Hello World&quot;;<br />
    new_num = _num * 100;<br />
    global.my_string = _str + &quot; I said&quot;;</p>
  <p>Vous pouvez √©galement utiliser des variables pour contenir les valeurs renvoy√©es par les fonctions, par exemple :</p>
  <p class="code">var _id = instance_nearest(x, y, obj_Tree);<br />
    root = sqrt(1000);<br />
    global.str = string_upper(&quot;Hello World&quot;);</p>
  <p>Ainsi, une variable est quelque chose que nous pouvons nommer et utiliser pour stocker une valeur pour une utilisation ult√©rieure dans une ou plusieurs op√©rations. Un excellent exemple de variable dans le &quot;monde r√©el&quot; est <b>pi ùúã . </b>.. c'est une variable que tout le monde conna√Æt et qui contient la valeur 3,14159265 (etc...). Pourquoi l'avons-nous dans notre langue ? Eh bien, il est beaucoup plus facile de dire √† quelqu'un &quot;pi&quot; que &quot;trois point un quatre un cinq neuf deux six cinq&quot; ! Nommer les choses de cette fa√ßon rend la vie beaucoup plus simple et cela signifie √©galement que si la valeur de cette variable change, nous ne devons pas changer le nombre partout puisque le <i>nom de</i> la variable reste le m√™me.</p>
  <p>Lorsque vous formez des variables en <b>GML</b>, leur nom doit commencer par une lettre ou le symbole de soulignement &quot;_&quot; et ne peut contenir que des lettres, des chiffres et le symbole de soulignement &quot;_&quot;, avec une longueur maximale de 64 symboles. Ainsi, les variables valides sont des choses comme <span class="inline">fish</span>, <span class="inline">foo_bar</span>, <span class="inline">num1</span> ou <span class="inline">_str</span>, tandis que les variables invalides seraient <span class="inline">6fish</span>, <span class="inline">foo bar</span> ou <span class="inline">*num</span>.</p>
  <p>Dans de nombreux langages de programmation, vous devez cr√©er une &quot;affectation&quot; de variable avant de pouvoir l'utiliser. Cela signifie essentiellement que vous indiquez √† l'ordinateur le nom que vous souhaitez utiliser pour la variable et que vous lui attribuez une valeur initiale. La variable re√ßoit ensuite un emplacement en m√©moire pour stocker la valeur ou effectuer des op√©rations sur elle. L'affectation d'une variable se pr√©sente sous la forme suivante :</p>
  <p class="code">&lt;variable&gt; = &lt;expression&gt;;</p>
  <p>Une expression peut √™tre une simple valeur mais peut aussi √™tre plus compliqu√©e. Ainsi, plut√¥t que d'attribuer une valeur √† une variable, on peut aussi ajouter une valeur √† la valeur actuelle de la variable en utilisant <span class="inline"><b>+=</b></span>, par exemple :</p>
  <p class="code">a = 100;¬†¬†¬†// Assigning a simple value<br />
    b = 200;<br />
    c = 300;<br />
    a += b;¬†¬†¬†¬†// Assigning with operation<br />
    a = b + c; // Assigning with expression</p>
  <p class="note"><span class="note">NOTE</span> Le site <span class="notranslate">GameMaker Language</span> acceptera √©galement &quot;<span class="inline">:=</span>&quot; pour les affectations, bien que ce ne soit pas la mani√®re la plus courante de proc√©der :</p>
  <p class="code">&lt;variable&gt; := &lt;expression&gt;;</p>
  <p>De m√™me, vous pouvez soustraire avec <span class="inline"><b>-=</b></span>, multiplier avec <span class="inline"><b>*=</b></span>, diviser avec <span class="inline"><b>/=</b></span>, ou utiliser des op√©rateurs binaires avec <span class="inline"><b>|=</b></span>, <span class="inline"><b>&amp;=</b></span> ou <span class="inline"><b>^=</b></span>. Vous pouvez √©galement ajouter ou soustraire <i>un</i> √† une valeur avec <span class="inline"><b>++</b></span>, <span class="inline"><b>--</b></span>. Pour plus d'informations, consultez la section sur les <a href="Expressions_And_Operators.htm">expressions et les op√©rateurs</a>.</p>
  <p>Notez que vous <i>ne pouvez pas</i> faire ce qui suit (ou toute autre variante) :</p>
  <p class="code">a = b = c = 4;</p>
  <p>Et √† la place, il faut faire comme :</p>
  <p class="code">a = 4;<br />
    b = 4;<br />
    c = 4;</p>
  <p>Les affectations de variables pr√©sent√©es ci-dessus sont toutes des variables d'<strong>instance </strong>, mais il existe en fait trois autres cat√©gories principales de variables lorsque vous programmez avec <span data-keyref="GameMaker Name">GameMaker</span> et chacune a sa propre <strong>port√©e </strong>(qui peut √™tre consid√©r√©e comme sa zone d'op√©ration, ou port√©e). Les diff√©rents types de variables et leur port√©e sont d√©crits dans les pages suivantes :</p>
  <ul class="colour">
    <li><a href="Variables/Local_Variables.htm">Variables locales</a></li>
    <li><a href="Variables/Instance_Variables.htm">Variables d'instance</a></li>
    <li><a href="Variables/Global_Variables.htm">Variables globales</a></li>
    <li><a href="Variables/Constants.htm">Constantes</a></li>
  </ul>
  <p>Le site <span class="notranslate">GameMaker Language</span> dispose √©galement de plusieurs variables int√©gr√©es diff√©rentes qui peuvent avoir n'importe lequel des champs d'application mentionn√©s ci-dessus (sauf <i>local</i>). Ces variables sont sp√©ciales car elles sont incluses par d√©faut dans les objets et les pi√®ces du monde du jeu. Certaines variables globales int√©gr√©es sont list√©es dans la section mentionn√©e ci-dessus, et les diff√©rentes parties du manuel pour <span class="notranslate">sprites</span>, rooms, objets, etc... d√©crivent √©galement les variables int√©gr√©es disponibles dans chaque cas. Des exemples de telles variables d'instance int√©gr√©es seraient :</p>
  <ul class="colour">
    <li><span class="inline"><a href="../GML_Reference/Asset_Management/Sprites/Sprite_Instance_Variables/sprite_index.htm">sprite_index</a></span></li>
    <li><a href="../GML_Reference/Asset_Management/Paths/Path_Variables/path_index.htm"><span class="inline">path_scale</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Instances/Instance_Variables/speed.htm"><span class="inline">speed</span></a></li>
  </ul>
  <p>Et des exemples de variables globales int√©gr√©es seraient :</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Cameras_And_Display/Cameras_And_Viewports/view_xport.htm"><span class="inline">view_xport</span></a></li>
    <li><a href="../GML_Reference/OS_And_Compiler/GM_version.htm"><span class="inline">GM_version</span></a></li>
    <li><a href="../GML_Reference/Asset_Management/Rooms/room.htm"><span class="inline">room</span></a></li>
  </ul>
  <p>La plupart des variables int√©gr√©es peuvent √™tre modifi√©es et d√©finies comme les autres variables, et certaines peuvent m√™me √™tre des <a href="Arrays.htm">tableaux</a>, mais vous n'avez pas besoin de les d√©finir pour les cr√©er comme vous le feriez avec une variable ordinaire, car elles sont d√©j√† initialis√©es √† une valeur par d√©faut.</p>
  <p>Enfin, il existe un certain nombre de fonctions d√©di√©es au r√©glage, √† l'obtention ou √† la v√©rification des variables d'une mani√®re ou d'une autre, disponibles √† partir de la page suivante :</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Fonctions variables</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aper√ßu du GML</a></div>
        <div style="float:right">Suivant : <a data-xref="{title}" href="Data_Types.htm">Types de donn√©es</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits r√©serv√©s</span></h5>
  </div>
  <!-- KEYWORDS
variables
variables - built-in
variables - scope
declaring variables
scope
built-in variables
-->
  <!-- TAGS
variables
-->
</body>
</html>