<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>nombre d'arguments</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the argument_count variable" />
  <meta name="rh-index-keywords" content="argument_count" />
  <meta name="search-keywords" content="argument_count" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>nombre d'arguments</h1>
  <p>Cette variable <b>en lecture seule</b> renvoie le nombre d'&quot;arguments&quot; qui sont transmis à une <a href="../../Script_Functions.htm">fonction de script</a> ou à une fonction <a href="../../Method_Variables.htm"><span class="notranslate">method</span></a>. Normalement utilisée en conjonction avec un tableau d'arguments (<a href="argument.htm"><span class="inline">argument[0...15]</span></a>) pour permettre de varier les arguments d'entrée pour une fonction donnée.</p>
  <p class="note"><strong>NOTE</strong>: Ceci n'est plus strictement requis et est fourni pour le support de l'héritage plus qu'autre chose. Toutes les fonctions définies par l'utilisateur accepteront des arguments variables, et tout argument passé dans une fonction qui ne fait pas partie des entrées nommées sera initialisé à <span class="inline" style="font-size: 14px">undefined</span> par défaut, ce qui peut être vérifié en utilisant la fonction <a href="../../../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined()</a>.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">argument_count;</p>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">function my_array()<br />
    {<br />
        var i, arg;<br />
        for (i = 0; i &lt; 5; i += 1;)<br />
        {<br />
            if argument_count &gt; i<br />
            {<br />
                arg[i] = argument[i]<br />
            }<br />
            else<br />
            {<br />
                arg[i] = -1;<br />
            }<br />
        }<br />
    }</p>
  <p>Le code ci-dessus utilise la variable <span class="inline">argument_count</span> ainsi que le tableau <span class="inline">argument</span> pour initialiser les variables, et constitue un exemple de la manière dont on peut permettre à une fonction définie par l'utilisateur d'accepter un nombre variable d'arguments.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Global_Variables.htm">Variables globales</a></div>
        <div style="float:right">Suivant : <a href="async_load.htm"><span class="notranslate">async_load</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
argument_count
-->
  <!-- TAGS
argument_count
-->
</body>
</html>