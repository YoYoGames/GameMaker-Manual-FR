<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Adressage de variables dans d'autres instances</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining hoe to address variables in other instances" />
  <meta name="rh-index-keywords" content="Addressing Variables In Other Instances" />
  <meta name="search-keywords" content="" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Adressage des variables dans d'autres instances</h1>
  <p>Dans les sections consacrées aux <a href="Variables_And_Variable_Scope.htm">variables</a>, vous avez appris à créer et à utiliser des variables au sein d'une seule instance, ou sur une portée globale, mais que se passe-t-il si vous voulez qu'une instance <span class="notranslate">access</span> une variable dans une autre instance, différente ? Il y a de nombreux cas où vous pouvez vouloir faire cela, par exemple lors d'une collision avec un objet balle, vous pouvez vouloir savoir combien de dommages la balle fait en accédant à une variable dans la balle, ou vous pouvez vouloir arrêter le mouvement de toutes les balles dans un puzzle, ou vous pouvez vouloir déplacer le personnage principal à une position particulière, ou un certain nombre d'autres situations que vous rencontrez typiquement dans un jeu. Heureusement, le site <span class="notranslate">GameMaker Language</span> est équipé de mécanismes permettant d'y parvenir.</p>
  <p>L'une des méthodes les plus courantes pour accéder ou modifier une variable dans <em>une autre </em>instance consiste à utiliser son nom d'objet comme identifiant, puis à utiliser un point &quot;<span class="inline">.</span>&quot; pour indiquer à <span data-keyref="GameMaker Name">GameMaker</span> que la variable référencée doit être affectée ou modifiée dans l'instance de cet objet spécifique. C'est ce qu'on appelle la &quot;notation par points&quot;, dont la syntaxe est la suivante :</p>
  <p class="code">&lt;object_id&gt;.&lt;<em>variable</em>&gt; = &lt;value&gt;; </p>
  <p>En pratique, cela ressemblerait à ceci :</p>
  <p class="code">obj_ball.speed = 0;</p>
  <p>Avec le code ci-dessus, vous définissez la vitesse d'une instance de &quot;<span class="inline">obj_ball</span>&quot;. Cependant, si vous avez plus d'une instance de l'objet donné dans la pièce, le <em>code s'appliquera à TOUTES les instances de la même manière</em> - à moins que vous n'utilisiez <b>HTML5</b>, auquel cas il n'<em>en</em> affectera qu'<em>une</em> seule, mais vous n'avez aucun moyen de savoir laquelle - donc si vous avez besoin de <span class="notranslate">access</span> toutes les instances d'un objet, vous devriez utiliser <a href="Language_Features/with.htm"><span class="inline">with()</span></a>car il est compatible à 100 % avec les autres plates-formes. En général, ce format ne doit être utilisé que lorsque vous n'avez qu'une seule instance de l'objet dans la pièce, ou (comme vous le verrez dans la partie suivante) lorsque vous avez un <i> <b>ID d'</b></i>instance spécifique. </p>
  <p>Vous pouvez également consulter le site <span class="notranslate">access</span> pour une seule instance d'un objet lorsqu'il en existe plusieurs dans la room, en utilisant le <b>nom d'instance</b> unique pour indiquer à <span data-keyref="GameMaker Name">GameMaker</span> à quelle instance nous souhaitons nous adresser. La <b>constante de nom d'instance</b> est la constante d'identification unique qui est donnée à chaque instance ajoutée à une room dans votre jeu. Vous pouvez trouver cette constante en double-cliquant sur une instance dans l'<a href="../../The_Asset_Editors/Rooms.htm">éditeur de salle</a>:</p>
  <p><img>Notez que ce nom peut être modifié et recevoir un nom plus descriptif - bien que le nom <em>doive</em> être unique pour l'ensemble du jeu - et qu'il peut être utilisé comme côté gauche du point :</p>
  <p class="code">inst_4DB70D2.speed = 0;</p>
  <p>Toutefois, la méthode de loin la plus courante et la plus pratique consiste à utiliser une <i>variable</i> à gauche du point, pour autant que la variable en question<i> ait enregistré un <b>identifiant d'instance</b></i> valide. Les exemples suivants illustrent cette méthode.</p>
  <p class="code">// Example 1<br />
    var _inst = instance_position(mouse_x, mouse_y, all);<br />
    if instance_exists(_inst)<br />
    {<br />
        _inst.speed = 0;<br />
    }<br />
    <br />
    // Example 2<br />
    var _inst = instance_create_layer(mouse_x, mouse_y, &quot;Enemies&quot;, obj_E_Parent);<br />
    _inst.direction = point_direction(_inst.x, _inst.y, x, y);<br />
    _inst.target = id;
  </p>
  <p>Dans le code ci-dessus de l'exemple 1, il y a un appel de type <a href="../GML_Reference/Asset_Management/Instances/instance_exists.htm"><span class="inline">instance_exists()</span></a> dans le bloc de code. C'est parce que l'utilisation de la méthode point pour <span class="notranslate">access</span> ou changer la valeur d'une autre instance donnera une erreur et fera planter le jeu si l'instance n'existe pas, et il est possible que ce soit le cas dans cet exemple. Nous n'avons pas besoin de cette vérification dans les exemples 2 et 3 car nous <i>savons</i> que l'instance existe puisque dans l'exemple 2 nous l'avons créée, et dans l'exemple 3, c'est l'autre instance dans un événement de collision. Cependant, s'il existe <i>une</i> possibilité que l'instance soit détruite, désactivée ou retirée de la room en utilisant cette méthode, vous devriez <i>toujours</i> vérifier au préalable en utilisant la fonction <span class="inline">instance_exists()</span> ou la fonction <a href="../GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a> fonction.</p>
  <p>Notez que vous ne pouvez pas utiliser le <a href="Instance_Keywords.htm">mot-clé</a> spécial &quot;<span class="inline">all</span>&quot; avec cette méthode pour cibler toutes les instances (par exemple : <span class="inline">all.val = 10</span> donnerait une erreur), mais vous <i>pouvez</i> utiliser les mots-clés &quot;<span class="inline">other</span>&quot; et &quot;<span class="inline">self</span>&quot; sans problème. Par exemple, l'utilisation de <span class="inline">other</span> dans un <a href="../../The_Asset_Editors/Object_Properties/Object_Events.htm">événement de collision</a>:</p>
  <p class="code">// Example 3 other.hp -= 10;<br />
    if other.hp &lt;= 0<br />
    {<br />
        other.sprite_index = spr_E_Dead;<br />
    }</p>
  <p>Il est également important de noter que vous ne pouvez pas utiliser une fonction seule comme partie gauche d'une affectation. Par exemple, le code suivant vous donnerait une erreur :</p>
  <p class="code">instance_nearest(x, y, obj).speed = 0;</p>
  <p>La valeur de retour de l'expression dans cet exemple de code est un nombre entier (la valeur d'identification unique de l'instance la plus proche). Elle doit donc être placée entre parenthèses <span class="inline">()</span> pour être utilisée de cette manière et adresser correctement l'instance requise. Le code ci-dessus serait correctement écrit comme suit</p>
  <p class="code">(instance_nearest(x, y, obj)).speed = 0;<br />
    <br />
    //or<br />
    <br />
    var inst = instance_nearest(x, y, obj);<br />
    inst.speed = 0;
  </p>
  <p>Toutes ces méthodes sont parfaitement valables pour lire, modifier et définir des variables dans d'autres instances, et fonctionnent parce que le point est en fait un <i>opérateur</i>. Il prend une valeur comme <a class="glossterm" data-glossterm="opérande" href="#">opérande</a> gauche et une variable comme opérande droit, et renvoie l'adresse de cette variable particulière dans l'objet ou l'instance indiqué. Tous les noms d'objets, les constantes, les ID, etc... représentent simplement des valeurs et celles-ci peuvent être traitées comme n'importe quelle autre valeur.</p>
  <p>L'autre moyen de référencer des variables dans une autre instance est d'utiliser la fonction <span class="notranslate">GameMaker Language</span> <span class="inline">with()</span> , qui est abordée en détail <a href="Language_Features/with.htm">ici</a>:</p>
  <p class="code">// This will affect all instances of the object &quot;obj_Enemy&quot;<br />
    with (obj_Enemy)<br />
    {<br />
        target = other.parent;<br />
    }<br />
    <br />
    // This will affect one instance of the object &quot;obj_Enemy&quot;<br />
    var _enemy = instance_nearest(x, y, obj_Enemy);<br />
    if instance_exists(_enemy)<br />
    {<br />
        with (_enemy)<br />
        {<br />
            target.x = mouse_x;<br />
            target.y = mouse_y;<br />
        }<br />
    }
  </p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aperçu du GML</a></div>
        <div style="float:right">Suivant : <a data-xref="{title}" href="Expressions_And_Operators.htm">Expressions et opérateurs</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
variables - addressing
addressing variables
-->
  <!-- TAGS
addressing_variables
-->
</body>
</html>