<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>répéter</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the repeat function" />
  <meta name="rh-index-keywords" content="repeat" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>répéter</h1>
  <p>Le site <span class="notranslate">GameMaker Language</span> propose plusieurs façons d'effectuer des <i>boucles</i>, c'est-à-dire de faire itérer une ou plusieurs instructions sur elles-mêmes un certain nombre de fois. La plus simple d'entre elles est l'instruction <span class="inline">repeat</span>, qui a la forme suivante :</p>
  <p class="code">repeat (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Avec <span class="inline">repeat</span>, l'<a class="glossterm" data-glossterm="déclaration" href="#">instruction</a> donnée est répétée le nombre de fois indiqué par la valeur arrondie de l'<a class="glossterm" data-glossterm="expression" href="#">expression</a>. Par exemple, l'instruction suivante crée cinq boules à des positions aléatoires :</p>
  <p class="code">repeat (5)<br />
    {<br />
        instance_create_layer(random(400), random(400), &quot;Instances&quot;, obj_ball);<br />
    }</p>
  <p>Cela peut être très utile pour éviter de taper plusieurs fois le même code, ou pour utiliser des tableaux, ou pour compter un certain nombre d'opérations, etc... Vous n'êtes pas non plus limité à l'utilisation d'une seule instruction, et vous pouvez répéter plusieurs instructions en les entourant de crochets <span class="inline">{}</span>. Par exemple :</p>
  <p class="code">var _x = 32;<br />
    repeat (global.p_lives)<br />
    {<br />
        draw_sprite(spr_heart, 0, _x, 32);<br />
        _x += sprite_get_width(spr_heart);<br />
    }</p>
  <p>L'exemple ci-dessus répète les instructions entre crochets pendant le nombre d'<a class="glossterm" data-glossterm="itération" href="#">itérations</a>de la variable globale &quot;lives&quot;, et chaque itération dessine le cœur <span class="notranslate">sprite</span> à la position <span class="inline">_x</span>, puis déplace la position d'un bit en fonction de la largeur du cœur <span class="notranslate">sprite</span>.</p>
  <p><strong>Quand utiliser une boucle <span class="inline">repeat</span>?</strong> Chaque fois que vous souhaitez répéter une ou plusieurs instructions un nombre fixe de fois sans avoir besoin de tenir un compte des itérations.</p>
  <p>Il convient de noter que vous pouvez utiliser les instructions spéciales <span class="inline"><a href="break.htm">break</a></span> et <span class="inline"><a href="continue.htm">continue</a></span> dans une boucle. <font face="Lucida Console"><span style="font-size: 16px;"><b>répéter</b></span></font> également. L'utilisation de <span class="inline">break</span> permet de sortir immédiatement de la boucle et de passer à tout code se trouvant dans l'événement ou la fonction après que la boucle ait dû se terminer, par ex :</p>
  <p class="code">var i = 0;<br />
    var temp = 0;<br />
    repeat (10)<br />
    {<br />
        temp += array[i];<br />
        if (temp &gt; max_total)<br />
        {<br />
            break;<br />
        }<br />
        else<br />
        {<br />
            i += 1;<br />
        }<br />
    }</p>
  <p>Le code ci-dessus boucle sur 10 valeurs de <a href="../Arrays.htm">tableau</a> et les ajoute à une variable locale. Si le total de la variable locale est supérieur à la valeur donnée pour <span class="inline">max_total</span>, alors la boucle se termine en utilisant break, sinon la boucle continue. </p>
  <p>Voici un exemple d'utilisation de <span class="inline">continue</span> dans une boucle <span class="inline">repeat</span>:</p>
  <p class="code">repeat(10)<br />
    {   <br />
        var _x = random(room_width);<br />
        var _y = random(room_height);<br />
        if (instance_position(_x, y, obj_Enemy)<br />
        {<br />
            continue;<br />
        }<br />
        instance_create_layer(_x, _y, &quot;Instances&quot;, obj_Enemy);<br />
    }</p>
  <p>Ce code va se répéter 10 fois, générant une position aléatoire de la pièce puis vérifiant si une instance de l'objet <span class="inline">obj_Enemy</span> existe à cette position. Si c'est le cas, l'itération de la boucle actuelle est terminée à l'aide de <span class="inline">continue</span> et une nouvelle itération est lancée. Si ce n'est pas le cas, une instance de l'objet <span class="inline">obj_Enemy</span> est créée à la position aléatoire.</p>
  <p>Pour plus d'exemples de fonctions de boucle, veuillez consulter les sections sur <a href="while.htm"><span class="inline">while</span></a>, <a href="do___until.htm"><span class="inline">do... until</span></a>, et <a href="for.htm"><span class="inline">for</span></a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Language_Features.htm">Caractéristiques de la langue</a></div>
        <div style="float:right">Suivant : <a href="while.htm"><span class="notranslate">while</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
repeat
-->
  <!-- TAGS
repeat
-->
</body>
</html>