<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>try / catch / finally</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the try / catch / finally functions" />
  <meta name="rh-index-keywords" content="try,catch,finally" />
  <meta name="search-keywords" content="try,catch,finally" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>try / catch / finally</h1>
  <p>Les instructions <span class="inline">try</span>, <span class="inline">catch</span> et <span class="inline">finally</span> peuvent être utilisées dans votre jeu pour vérifier les erreurs et vous permettre de tester des blocs de code et de contrôler ce qui se passe si des <a href="../../../Additional_Information/Errors/Runner_Errors.htm">exceptions d'exécution</a> se produisent. L'utilisation de ces instructions empêchera l'exception de mettre fin au jeu et d'afficher le message d'erreur standard à l'utilisateur, mais cela signifie que vous devrez gérer ce qui se passe ensuite dans ce cas, comme la sauvegarde des fichiers journaux - par exemple - et la fin du jeu de manière élégante (notez que si vous choisissez de ne rien faire, votre jeu peut devenir instable et ne pas fonctionner correctement).</p>
  <p>Dans sa forme la plus simple, la syntaxe de <span class="inline">try</span> est la suivante :</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Cependant, le fait d'avoir un <span class="inline">try</span> sans rien pour gérer les exceptions que le code pourrait produire ne sera pas très utile, c'est pourquoi nous le couplons généralement avec un <span class="inline">catch</span>, avec la syntaxe suivante :</p>
  <p class="code">try<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }<br />
    catch(&lt;variable&gt;)<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        ...<br />
    }</p>
  <p>Ce que <span class="inline">catch</span> fait, c'est vous permettre d'exécuter le code supplémentaire fourni dans le bloc suivant lorsqu'une exception du bloc précédent <span class="inline">try</span> a été attrapée. S'il s'agit d'une exception <span class="notranslate">runtime</span>, alors la variable fournie peut être utilisée pour <span class="notranslate">access</span> une <a href="../Structs.htm">structure</a> qui contiendra les informations suivantes :</p>
  <p class="code">{<br />
    message : &quot;&quot;,               // a string that is a short message for this exception<br />
    longMessage : &quot;&quot;,           // a string that is a longer message for this exception<br />
    script : &quot;&quot;,                // a string that describes where the exception came from<br />
    stacktrace : [ &quot;&quot;, &quot;&quot; ],    // an array of strings that is the stack frame the exception was generated<br />
    }</p>
  <p>Un exemple simple d'utilisation est présenté ci-dessous :</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        c = a div b;<br />
    }<br />
    catch( _exception)<br />
    {<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }</p>
  <p>Il se peut que vous souhaitiez exécuter du code, qu'une exception ait été levée ou non, et pour cela vous pouvez ajouter un bloc <span class="inline">finally</span>. La syntaxe de <span class="inline">finally</span> est la suivante :</p>
  <p class="code">finally<br />
    {<br />
        &lt;statement1&gt;;<br />
        &lt;statement2&gt;;<br />
        etc...<br />
    }</p>
  <p>Il convient de noter que vous pouvez avoir n'importe quelle combinaison de ces deux éléments, c'est-à-dire que vous pouvez avoir une combinaison des deux :</p>
  <ul class="colour">
    <li><span class="inline">try</span> / <span class="inline">finally</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span></li>
    <li><span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span></li>
  </ul>
  <p>Notez que dans le bloc <span class="inline">finally</span> vous <em>ne pouvez pas </em>utiliser <a href="break.htm"><span class="inline">break</span></a>, <a href="continue.htm"><span class="inline">continue</span></a>, <a href="exit.htm"><span class="inline">exit</span></a> ou <a href="return.htm"><span class="inline">return</span></a> car elles n'ont aucune signification dans ce contexte et le compilateur générera une erreur si elles sont utilisées.</p>
  <p>Enfin, vous pouvez également emboîter plusieurs <span class="inline">try</span> / <span class="inline">catch</span> / <span class="inline">finally</span> les uns dans les autres, par exemple :</p>
  <p class="code">var a = 0, b = 0, c = 0;<br />
    try<br />
    {<br />
        try<br />
        {<br />
            c = a div b;<br />
        }<br />
        finally<br />
        {<br />
            ++a;<br />
        }<br />
    }<br />
    catch(_exception)<br />
    {<br />
        ++a;<br />
        show_debug_message(_exception.message);<br />
        show_debug_message(_exception.longMessage);<br />
        show_debug_message(_exception.script);<br />
        show_debug_message(_exception.stacktrace);<br />
    }<br />
    finally<br />
    {<br />
        show_debug_message(&quot;a = &quot; + string(a));<br />
    }</p>
  <p>Il convient de noter que vous pouvez reprendre le message d'erreur par défaut de <span class="notranslate">GML</span> et utiliser votre propre code de gestion en appelant la fonction <a href="../../GML_Reference/Debugging/exception_unhandled_handler.htm"><span class="inline">exception_unhandled_handler()</span></a>. Cette <a href="../Runtime_Functions.htm">fonction d'exécution</a> vous permet de fournir un message d'erreur personnalisé. <a href="../Method_Variables.htm"><span class="notranslate">method</span></a> personnalisée qui sera appelée à chaque fois que des exceptions non gérées se produisent dans votre jeu.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Language_Features.htm">Caractéristiques de la langue</a></div>
        <div style="float:right">Suivant : <a href="throw.htm"><span class="notranslate">throw</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
try
catch
finally
-->
  <!-- TAGS
try
catch
finally
-->
</body>
</html>