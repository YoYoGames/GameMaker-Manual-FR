<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>if / else et les opérateurs conditionnels</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the If / Else and Conditional Operators" />
  <meta name="rh-index-keywords" content="?,if,else,ternary operator,then" />
  <meta name="search-keywords" content="if,else,then,?,ternary,conditional" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>if / else et les opérateurs conditionnels</h1>
  <p>L'une des caractéristiques fondamentales de la plupart des langages de programmation est la possibilité de poser une question simple qui donne une réponse booléenne <span class="inline">true</span> ou <span class="inline">false</span>. Dans <span class="notranslate">GML</span>, cette fonction est réalisée à l'aide du mot-clé <span class="inline">if</span>. Une condition simple <span class="inline">if</span> prend une <a class="glossterm" data-glossterm="expression" href="#">expression</a> et exécutera une ou plusieurs<span class="glossextra">instructions</span> si l'expression se résout en <span class="inline">true</span>, avec la forme de base suivante :</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p><br>
    Ici, vous dites que si une expression se résout en <span class="inline">true</span>, il faut faire quelque chose. Notez que la partie &quot;alors&quot; de la condition est <em>implicite</em>, mais il existe un mot-clé <span class="inline">then</span> qui peut être utilisé (bien qu'il soit presque toujours omis), de sorte que vous pouvez également créer des conditionnels comme celui-ci :</p>
  <p class="code">if (&lt;expression&gt;) then<br />
    {<br />
        &lt;statement&gt;;<br />
        &lt;statement&gt;;<br />
        ...<br />
    }</p>
  <p>Outre <span class="inline">if</span> et <span class="inline">then</span>, vous pouvez également utiliser le mot-clé <span class="inline">else</span> pour faire autre chose si l'expression vérifiée est évaluée comme <span class="inline">false</span>. Cette forme &quot;<span class="inline">if... then... else...</span>&quot; ressemble à ceci :</p>
  <p class="code">if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;;<br />
    }</p>
  <p>Dans ce cas, l'expression sera évaluée, et si elle est évaluée comme <span class="inline">false</span>, l'instruction après <span class="inline">else</span> est exécutée, sinon l'instruction initiale est exécutée (c'est <span class="inline">true</span>).</p>
  <p class="note"><span class="note">NOTE</span> Dans le langage <span class="notranslate">GameMaker</span>, toute valeur inférieure ou égale à 0 sera évaluée comme <span class="inline">false</span>, tandis que toute valeur supérieure à 0 sera évaluée comme <span class="inline">true</span>.</p>
  <p>C'est une bonne habitude de toujours mettre des parenthèses autour des expressions et des accolades {} autour des déclarations dans le <span class="inline">if</span> (sinon seule la première déclaration sera exécutée), et de prendre une nouvelle ligne dans le bloc pour chaque déclaration, par exemple :</p>
  <p class="code">// This will work<br />
    if &lt;expression&gt; &lt;statement&gt;;<br />
    <br />
    // Example:<br />
    if test == true variable = false else variable = true;
  </p>
  <p class="code">// This is better<br />
    if (&lt;expression&gt;)<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    else<br />
    {<br />
        &lt;statement&gt;<br />
    }<br />
    <br />
    // Example<br />
    if (test == true)<br />
    {<br />
        variable = false;<br />
    }<br />
    else<br />
    {<br />
        variable = true;<br />
    }
  </p>
  <p>Notez que, bien que cela soit légèrement plus verbeux, cela signifie qu'il n'y a pas d'ambiguïté dans le code et qu'il sera compilé correctement sur toutes les plateformes à tout moment. Cependant, l'exemple initial peut ne pas l'être, comme expliqué dans la section de la page <a href="../Expressions_And_Operators.htm">Expressions et opérateurs</a>.</p>
  <p class="note"><strong>NOTE</strong>: Lorsque vous comparez deux valeurs pour voir si elles sont égales, vous devez utiliser l'opérateur &quot;<span class="inline">==</span>&quot;, et n'utiliser que l'opérateur &quot;<span class="inline">=</span>&quot; pour l'affectation. Actuellement, <span class="notranslate">GameMaker</span> les traite comme interchangeables, mais cela peut changer à l'avenir. Votre code est plus propre et plus évident lorsque vous utilisez les opérateurs corrects pour les comparaisons et les assignations.</p>
  <p>Pour donner un bon exemple de l'utilisation de <span class="inline">if</span>, considérez le code suivant qui déplacera une instance vers la position <span class="inline">x=200</span> dans la pièce lorsqu'elle est placée dans l'événement Step :</p>
  <p class="code">if (x &lt; 200)<br />
    {<br />
        x += 4;<br />
    }<br />
    else<br />
    {<br />
        x = 200;<br />
    }</p>
  <p>Notez que vous pouvez également effectuer des vérifications <i>composées</i> dans une <span class="inline">if</span>, c'est-à-dire vérifier plusieurs valeurs ou expressions dans la même instruction. Ces vérifications peuvent utiliser les différents <a href="../Expressions_And_Operators.htm">opérateurs de combinaison</a> (<span class="inline">&amp;&amp;</span> and, <span class="inline">||</span> or, et <span class="inline">^^</span> xor). Lorsque vous faites cela, <span data-keyref="GameMaker Name">GameMaker</span> évaluera chacun d'entre eux un par un, et en fonction de leur évaluation, le reste pourra être ignoré. Par exemple :</p>
  <p class="code">if (keyboard_check_pressed(vk_enter)) &amp;&amp; (instance_exists(obj_Player))<br />
    {<br />
        go = false;<br />
        alarm[0] = room_speed;<br />
    }</p>
  <p>Ici, nous vérifions à l'aide de l'opérateur &quot;et&quot; de <span class="inline">&amp;&amp;</span>, c'est-à-dire qu'il vérifie si <em>les deux </em>conditions de <span class="inline">if</span> sont évaluées à <span class="inline">true</span>, et si la première est <span class="inline">false</span>, la seconde ne sera même pas vérifiée. C'est ce qu'on appelle un &quot;court-circuitage&quot; du code. Par conséquent, lorsque vous combinez des expressions à vérifier, vous devez vous assurer que la plus &quot;économique&quot; en termes de performances est toujours la première afin d'éviter d'évaluer les plus coûteuses si la première évalue <span class="inline">false</span>. Dans le même ordre d'idées, si une condition peut être évaluée comme <span class="inline">true</span> ou <span class="inline">false</span> au moment de la compilation, la condition entière sera supprimée du code. Par exemple, disons que vous avez une <a href="../Variables/Constants.htm">macro</a> <span class="inline">DEBUG_ON </span>pour <span class="notranslate">debugging</span> et qu'elle peut être soit <span class="inline">true</span> soit <span class="inline">false</span> - lorsqu'elle est définie sur <span class="inline">false</span>, le bloc de code suivant sera supprimé du jeu lorsqu'il sera compilé :</p>
  <p class="code">if DEBUG_ON == true<br />
    {<br />
        show_debug_message(&quot;Instances = &quot; + string(instance_count));<br />
    }</p>
  <p>Vous pouvez également effectuer des <b>opérations conditionnelles</b> (également connues sous le nom d'opérations <b>ternaires</b> ), qui sont essentiellement un moyen &quot;raccourci&quot; d'effectuer une opération de base <span class="inline">if</span>. La syntaxe est la suivante :</p>
  <p class="code">variable = &lt;condition&gt; ? &lt;statement1 (if <i>true</i>)&gt; : &lt;statement2 (if <i>false</i>)&gt;</p>
  <p>L'opérateur conditionnel &quot;<span class="inline">?</span>&quot; renverra l'une des deux valeurs données selon que l'expression de la condition donne la valeur <span class="inline">true</span> ou <span class="inline">false</span>, par exemple :</p>
  <p class="code">var temp_x = (x &lt; (room_width / 2)) ? 32 : (room_width - 32);</p>
  <p>Le code ci-dessus vérifiera la valeur de &quot;x&quot; par rapport à la valeur de la moitié de la largeur de la pièce et si elle est inférieure, il définira &quot;<span class="inline">temp_x</span>&quot; à 32, sinon &quot;<span class="inline">temp_x</span>&quot; sera la largeur de la pièce - 32. Voici quelques autres exemples d'utilisation :</p>
  <p class="code">draw_text(x, y, &quot;The fee is &quot; + (global.Member ? &quot;$2.00&quot; : &quot;$10.00&quot;));<br />
    path_start(((global.level &gt; 10) ? path_hard : path_easy;), 2, path_action_reverse, true);<br />
    (--hp &lt;= 0) ? instance_destroy() : score += 10;</p>
  <p>Il convient également de noter que vous pouvez imbriquer des opérations conditionnelles, mais que si vous le faites, chaque opération devra être placée entre parenthèses, par exemple :</p>
  <p class="code">var c = a ? &quot;foo&quot; : (b ? &quot;bar&quot; : &quot;whee&quot;); // Correct<br />
    var c = a ? &quot;foo&quot; : b ? &quot;bar&quot; : &quot;whee&quot;;   // Will cause an error</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a data-xref="{title}" href="../GML_Overview.htm">Aperçu du GML</a></div>
        <div style="float:right">Suivant : <a data-xref="{title}" href="../Addressing_Variables_In_Other_Instances.htm">Adresser des variables dans d'autres instances</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
if
else
then
ternary operators
conditional operators
-->
  <!-- TAGS
if
else
then
-->
</body>
</html>