<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Fonctions et variables de script</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of scripts to create functions and global variables and macros" />
  <meta name="rh-index-keywords" content="Script Functions And Variables" />
  <meta name="search-keywords" content="user defined functions,script functions,gmcallback_,gmcallback" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Fonctions et variables de script</h1>
  <p>Les ressources de script sont essentiellement une collection d'une ou plusieurs fonctions ou variables définies par l'utilisateur que vous écrivez vous-même sous forme de fragments de code dans l'<a href="../../The_Asset_Editors/Scripts.htm">éditeur de script</a>. Les fonctions que vous définissez dans un script peuvent résoudre des expressions, renvoyer des valeurs ou faire toute autre chose que le site <span class="notranslate">GameMaker Language</span> autorise, tout comme les <a href="Runtime_Functions.htm">fonctions d'exécution</a> intégrées.</p>
  <p>Les fonctions de script doivent généralement être utilisées si vous avez un bloc de code que vous utilisez à plusieurs endroits ou dans plusieurs objets, ou si vous souhaitez qu'un bloc de code soit utilisé dans plusieurs objets de manière modulaire. L'utilisation de scripts pour définir des fonctions signifie que vous pouvez modifier la fonction une seule fois lorsque cela est nécessaire et que la modification sera &quot;reprise&quot; par tous les objets qui font appel à la fonction.</p>
  <p>Les scripts peuvent également être très pratiques d'un point de vue organisationnel, car ils vous permettent de créer des groupes de fonctions appartenant à une certaine catégorie. Par exemple, vous pourriez avoir plusieurs fonctions liées aux collisions entre les instances dans votre jeu, vous pourriez donc créer un script &quot;<span class="inline">Collision_Functions</span>&quot; et y stocker toutes ces fonctions ensemble.</p>
  <p>Voir aussi : <a data-xref="{title}" href="Script_Functions_vs_Methods.htm">Fonctions de script et méthodes</a></p>
  <h2>Création de fonctions</h2>
  <p>Lorsque vous créez un script contenant des fonctions, celles-ci doivent être créées en utilisant les formats suivants :</p>
  <p class="code"><span>function name( parameter1, parameter2, ... )<br />
      {</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p>ou :</p>
  <p class="code"><span><span>name = </span>function( parameter1, parameter2, ... )</span><br />
    <span>{</span><br />
    <span>    statement1;</span><br />
    <span>    statement2;</span><br />
    <span>    ...</span><br />
    <span>}</span>
  </p>
  <p class="note">Pour créer une fonction dans <span class="notranslate">GML</span> Visual, utilisez <a data-xref="{title}" href="../../Drag_And_Drop/Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Declare A New Function</a>. Activez son option &quot;Temp&quot; pour créer une variable de méthode (deuxième syntaxe indiquée ci-dessus).</p>
  <p>En général, cependant, vous utiliserez la <em>première </em>forme pour les fonctions de script car elle définira la fonction comme étant spécifiquement une fonction de script, ce qui signifie qu'elle aura une <a href="Variables_And_Variable_Scope.htm">portée</a> <strong>globale </strong>, qu'un <strong>index de script</strong> lui sera attribué et qu'elle ne nécessitera pas le préfixe <span class="inline">global</span> pour l'identifier puisque le compilateur la reconnaîtra comme une fonction de script.</p>
  <p>En utilisant la deuxième forme, vous générerez une <a href="Method_Variables.htm">variable de méthode de</a> portée globale et, en tant que telle, elle <em>ne sera pas </em>reconnue comme une fonction de script par le site <span class="notranslate">IDE</span> et nécessitera l'utilisation du préfixe <span class="inline">global</span> lorsque vous y ferez référence dans votre code.</p>
  <p class="note"><span class="note">NOTE</span> Vous pouvez vérifier cela en utilisant les deux formulaires dans un script, puis en appelant la fonction d'exécution <a href="../GML_Reference/Variable_Functions/typeof.htm">typeof()</a> sur chacun d'eux. L'un sera classé comme un &quot;nombre&quot; - puisqu'il renvoie un ID d'index de script - et l'autre sera classé comme une &quot;méthode&quot;.</p>
  <h2>Paramètres/Arguments</h2>
  <p>Vous pouvez définir vos propres paramètres/arguments pour une fonction, qui seront disponibles pour la fonction en tant que variables locales et pourront être utilisés à n'importe quelle fin dans cette fonction :</p>
  <p class="code">function move(<strong>spd, dir</strong>)<br />
    {<br />
        speed = <strong>spd</strong>;<br />
        direction = <strong>dir</strong>;<br />
    }</p>
  <p>Cette fonction prend deux arguments et applique leurs valeurs aux variables <span class="inline">speed</span> et <span class="inline">direction</span> de l'instance. Elle peut maintenant être appelée comme n'importe quelle fonction <span class="notranslate">runtime</span> et des arguments peuvent lui être passés :</p>
  <p class="code">var _mouse_dir = point_direction(x, y, mouse_x, mouse_y);<br />
    <br />
    <strong>move(4, _mouse_dir);</strong>
  </p>
  <h2>Arguments facultatifs</h2>
  <p>Si un argument n'est pas donné à une fonction, sa valeur sera <span class="inline">undefined</span>. Vous pouvez utiliser ceci pour définir des arguments <em>optionnels</em>, et vérifier si un argument est passé ou non en vérifiant s'il est égal à <span class="inline">undefined</span>. Cependant, vous pouvez également définir explicitement une valeur par défaut pour un argument qui sera utilisée à la place de <span class="inline">undefined</span> lorsqu'il n'est pas passé.</p>
  <p>Vous pouvez attribuer une telle valeur par défaut à un paramètre en utilisant le signe égal (<span class="inline">=</span>), ce qui en fait une variable facultative :</p>
  <p class="code">function move(spd, <strong>dir = 90</strong>)<br />
    {<br />
        speed = spd;<br />
        direction = dir;<br />
    }</p>
  <p>Si l'argument <span class="inline">dir</span> n'est pas transmis lors de l'appel de la fonction ci-dessus, sa valeur sera par défaut <span class="inline">90</span>, ce qui déplace l'instance vers le haut.</p>
  <p class="note"><span class="tip">ASTUCE</span> Vous pouvez omettre des arguments dans les appels de fonction et ils prendront par défaut la valeur <span class="inline">undefined</span> (ou la valeur par défaut de cet argument telle que définie par la fonction).<br>
    <br>
    Par exemple, écrire <span class="inline">my_func(0,,,1)</span> revient à écrire <span class="inline">my_func(0, undefined, undefined, 1)</span>.
  </p>
  <hr />
  <p>La valeur par défaut d'une variable facultative peut être une expression. Ainsi, vous pouvez par exemple utiliser des variables et appeler des fonctions tout en définissant une variable facultative. Notez qu'une telle expression ne sera exécutée que si son argument facultatif n'est pas fourni dans l'appel de fonction. Voir l'exemple suivant d'une fonction de journalisation :</p>
  <p class="code">function log(text = &quot;Log&quot;, object = object_index, time = date_datetime_string(date_current_datetime()))<br />
    {<br />
        var _string = &quot;[&quot; + string(time) + &quot;] &quot;;<br />
        _string += object_get_name(object) + &quot;: &quot;;<br />
        _string += text;<br />
        <br />
        show_debug_message(_string);<br />
    }</p>
  <p>Cette fonction prend trois arguments, le premier étant par défaut une constante de type chaîne, le deuxième une variable d'instance (dans la portée de l'instance appelante) et le troisième une expression appelant une fonction pour récupérer la date et l'heure actuelles. Cette fonction peut maintenant être appelée avec un maximum de trois arguments, comme le montre l'exemple suivant :</p>
  <p class="code">log();<br />
    // Prints: [09-Jun-21 12:34:37 PM] Object1: Log<br />
    <br />
    log(&quot;Player Shot&quot;, obj_player, 10);<br />
    // Prints: [10] obj_player: Player Shot
  </p>
  <h2>JSDoc</h2>
  <p>Nous vous recommandons également d'ajouter des commentaires pour définir les propriétés de la fonction (voir la section sur les <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">commentaires JSDoc</a> pour plus de détails), de sorte qu'un script simple ressemblerait à ceci :</p>
  <p class="code">/// @function                 log(message);<br />
    /// @param {string}  message  The message to show<br />
    /// @description              Show a message whenever the function is called.<br />
    <br />
    function log(message)<br />
    {<br />
        show_debug_message(message);<br />
    }
  </p>
  <p>Des fonctions supplémentaires pour le script peuvent être ajoutées en utilisant le même format que celui illustré ci-dessus, l'une après l'autre dans l'actif du script.</p>
  <p><img alt="Multiple Functions In One Script" class="center" src="../../assets/Images/Scripting_Reference/GML/Overview/Multiple_Functions_Scripts.png" /></p>
  <h2>Valeur de retour</h2>
  <p>Les fonctions dans les scripts peuvent également renvoyer une valeur, tout comme les fonctions <span class="notranslate">runtime</span>, et en tant que telles, elles peuvent être utilisées dans des expressions. Pour cela, vous utiliserez l'instruction <a href="Language_Features/return.htm"><span class="inline">return</span></a> déclaration :</p>
  <p class="code">return &lt;expression&gt;</p>
  <p>Il convient de noter que l'instruction <strong><i>l'exécution de la fonction se termine à l'instruction de retour</i></strong>signifie que tout code qui vient après l'appel de <strong>return </strong> <i>ne sera pas exécuté</i>. Voici un court exemple d'une fonction appelée &quot;<span class="inline">sqr_calc</span>&quot; qui calcule le carré de n'importe quelle valeur qui lui est passée, et dans le cas où la valeur donnée n'est pas un nombre réel, elle utilise <strong>return</strong> pour terminer la fonction prématurément afin que le calcul réel ne soit jamais exécuté :</p>
  <p class="code">/// @function           sqr_calc(val);<br />
    /// @param {real}  val  The value to calculate the square of<br />
    /// @description        Calculate the square of the given value<br />
    <br />
    function sqr_calc(val)<br />
    {<br />
        if (!is_real(val))<br />
        {<br />
            return 0;<br />
        }<br />
    <br />
        return (val * val);<br />
    }
  </p>
  <p>Notez que si vous créez une fonction de script <em>sans</em> valeur de retour et que vous en vérifiez une dans votre code, vous obtiendrez la valeur <span class="inline">undefined</span> par défaut.</p>
  <p>Pour appeler une fonction de script à partir d'un morceau de code, il suffit de l'utiliser de la même manière que pour l'appel de n'importe quelle fonction <span class="notranslate">runtime</span>, c'est-à-dire en écrivant le nom de la fonction avec les valeurs des paramètres entre parenthèses. Ainsi, le script ci-dessus serait appelé de la manière suivante :</p>
  <p class="code">if keyboard_check_pressed(vk_enter)<br />
    {<br />
        val = sqr_calc(amount);<br />
    }</p>
  <p class="note"><strong>REMARQUE</strong>: Lorsque vous utilisez vos propres fonctions à partir de scripts dans l'éditeur de code, vous pouvez appuyer sur<span> <img></span> ou cliquer avec le bouton central de la souris <span><img> </span>sur le nom de la fonction pour ouvrir le script qui la contient et l'éditer directement.</p>
  <h2>Noms de script et noms de fonction</h2>
  <p>Il est important de comprendre que les <i>noms de</i> scripts sont <b>indépendants des fonctions qu'ils contiennent</b>, vous pouvez donc nommer vos scripts d'une manière plus &quot;sensée&quot;, c'est-à-dire que toutes vos fonctions d'IA pourraient être placées dans un script &quot;<span class="inline">Enemy_AI</span>&quot; (en respectant les conventions de nommage des ressources standard, à savoir uniquement les caractères alphanumériques et le &quot; _ &quot; sous la barre). Cependant, vous pouvez toujours appeler des scripts dans votre jeu - et vous pouvez nommer les scripts de la même manière que les fonctions que vous y définissez - ce qui peut donner lieu à des problèmes dus à la manière dont <span data-keyref="GameMaker Name">GameMaker</span> stocke les références des ressources. Pour donner un exemple, considérez ce code, appelé depuis une instance :</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Le code ci-dessus tente d'appeler un script appelé &quot;myscript&quot; dans une méthode, ce qui dans ce cas échouera. Cela est dû au fait que la fonction en ligne utilise en fait l'<em>index</em> de l'actif du script et <strong>n'</strong>appelle <strong>pas </strong>réellement la fonction du script - par exemple, si l'index du script correspond à &quot;4&quot;, la fonction appelle essentiellement <span class="inline">4(arg);</span>, ce qui n'a aucun sens. Le code devrait plutôt être structuré de l'une des deux façons suivantes :</p>
  <p class="code">function indirectCall(func, arg)<br />
    {<br />
        func(arg);<br />
    }<br />
    <br />
    indirectCall(method(undefined, myscript), arg);<br />
    <br />
    // 2<br />
    function indirectCall(func, arg)<br />
    {<br />
        script_execute(func, arg);<br />
    }<br />
    <br />
    indirectCall(myscript, arg);
  </p>
  <p>Il est important de le noter, notamment lorsque vous travaillez sur d'anciens projets où les scripts contiennent une seule fonction, et où la fonction est nommée de la même manière que le script. Cependant, vous <em>ne</em> devriez <em>jamais</em> faire cela, et vos scripts devraient être nommés indépendamment des fonctions qu'ils contiennent.</p>
  <div data-conref="../../assets/snippets/Script_empty_reference_error.hts"> </div>
  <h2>Portée du script</h2>
  <p>Ceci nous amène à la dernière et plus importante chose à savoir sur les scripts et les fonctions qu'ils contiennent : les scripts sont analysés à un niveau <b>global</b> et seront <strong>compilés au tout début du jeu</strong>. Cela signifie que, <em>techniquement,</em> toutes les fonctions d'un script sont des <a href="Method_Variables.htm">variables de méthode</a>&quot;non liées&quot;, et que toute variable déclarée en dehors d'une fonction dans le script sera considérée comme une <a href="Variables/Global_Variables.htm">variable globale</a>. Par exemple, considérez ce script :</p>
  <p class="code">function Foo()<br />
    {<br />
        // Do something<br />
    }<br />
    blah = 10;<br />
    function Bar()<br />
    {<br />
        // Do something else<br />
    }</p>
  <p>Dans le cas ci-dessus, nous avons non seulement défini les fonctions <span class="inline">Foo</span> et <span class="inline">Bar</span> mais aussi la variable <span class="inline">blah</span> et toutes ces fonctions sont considérées comme ayant été créées dans la portée <b>globale</b>. Les fonctions n'ont pas besoin du mot clé <span class="inline">global</span> pour être reconnues car le compilateur comprend que ces fonctions font partie du script, mais si vous vouliez <span class="notranslate">access</span> <span class="inline">blah</span> alors vous devriez le faire :</p>
  <p class="code">val = global.blah;</p>
  <p>Cela dit, nous vous recommandons de <b>toujours saisir explicitement les variables globales</b> lorsque vous les créez dans des scripts afin d'éviter tout problème ultérieur. Les scripts sont également l'endroit idéal pour définir des <strong>macros</strong> ou des <strong>enums</strong><a href="Variables/Constants.htm">(constantes</a>), car les ajouter à un script en dehors d'une fonction signifie également qu'ils seront créés pour être utilisés avant que le code du jeu ne commence à s'exécuter. Voici un exemple de script qui crée différentes valeurs de portée globale pour un jeu :</p>
  <p class="code">/// Initialise All Global Scope Values And Constants<br />
    global.player_score = 0;<br />
    global.player_hp = 100;<br />
    global.pause = false;<br />
    global.music = true;<br />
    global.sound = true;<br />
    <br />
    enum rainbowcolors<br />
    {<br />
        red,<br />
        orange,<br />
        yellow,<br />
        green,<br />
        blue,<br />
        indigo,<br />
        violet<br />
    }<br />
    <br />
    #macro weapon_num 3<br />
    #macro weapon_gun 0<br />
    #macro weapon_bomb 1<br />
    #macro weapon_knife 2
  </p>
  <p>Notez que toutes ces constantes sont configurées en dehors de tout appel de fonction, ce qui signifie qu'elles seront initialisées avant tout le reste et à une portée <em>globale </em>. Cela signifie que si vous souhaitez utiliser un script pour initialiser des variables à l'échelle d'une <em>instance </em>, vous devez les inclure dans une fonction, par exemple :</p>
  <p class="code">/// @function                init_enemy();<br />
    /// @description             Initialise enemy instance vars<br />
    <br />
    function init_enemy()<br />
    {<br />
        hp = 100;<br />
        dmg = 5;<br />
        mana = 50;<br />
    }
  </p>
  <p>Ainsi, les scripts peuvent être utilisés pour générer des macros, des enums et des variables globales avant le démarrage du jeu afin qu'ils soient prêts à être utilisés à tout moment. Ils peuvent également être utilisés pour créer des méthodes &quot;non liées&quot; (fonctions définies par l'utilisateur) qui peuvent être utilisées dans votre jeu comme des fonctions <span class="notranslate">GML</span> <span class="notranslate">runtime</span>.</p>
  <p>Une dernière chose à noter à propos des fonctions de script est que si vous développez pour le <strong>Web </strong>(c'est-à-dire en ciblant <strong>HTML5</strong>), il existe un protocole de fonction supplémentaire que vous pouvez utiliser lorsque vous ajoutez des fonctions aux scripts, qui consiste à préfixer le nom de la fonction par <span class="inline">gmcallback_</span>, par exemple :</p>
  <p class="code">gmcallback_create_button</p>
  <p>L'utilisation du nom de fonction ci-dessus signifie que la fonction <span class="inline">gmcallback_create_button()</span> ne sera pas obscurcie et pourra donc être utilisée dans des extensions JavaScript et dans d'autres zones de votre jeu, par exemple, lors de l'utilisation de la fonction <a href="../GML_Reference/Web_And_HTML5/Web_And_HTML5.htm"><span class="inline">clickable_*</span></a> fonctions.</p>
  <h2>Variables statiques</h2>
  <p>Les fonctions peuvent également utiliser des variables statiques, qui conservent leur valeur à chaque appel de fonction. Veuillez <a href="Functions/Static_Variables.htm">lire cette page</a> pour plus d'informations.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aperçu du GML</a></div>
        <div style="float:right">Suivant : <a href="Method_Variables.htm">Variables de méthode</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions
User Defined Functions
function
gmcallback
-->
  <!-- TAGS
script_functions
-->
</body>
</html>