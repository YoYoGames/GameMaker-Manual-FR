<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Types de données</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining Data Types" />
  <meta name="rh-index-keywords" content="Data Types" />
  <meta name="search-keywords" content="Data Types" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Types de données</h1>
  <p>Dans la section précédente, nous avons abordé les <a href="Variables_And_Variable_Scope.htm">variables et leurs règles de délimitation</a>, mais nous avons peu parlé des différents <b>types de données</b> qu'une variable peut stocker. C'est pourquoi cette section explique les différents types et ce à quoi ils peuvent servir.</p>
  <p>Avant de poursuivre, expliquons brièvement ce que nous entendons par &quot;types de données&quot;. Lorsque vous créez une variable, elle peut être utilisée pour contenir des informations, et lorsque vous appelez une fonction, elle peut également stocker les informations renvoyées. Cependant, ces informations peuvent avoir différentes &quot;saveurs&quot; - par exemple, il peut s'agir d'un <em>nombre réel</em> ou d'une <em>chaîne de caractères</em>. Ces différents types de valeurs utilisées sont appelés <b>types de données</b> et, lorsque vous utilisez le site <span class="notranslate">GameMaker Language</span>, il peut s'agir de l'un des éléments suivants :</p>
  <p> </p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Les chiffres réels</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Les nombres réels sont toute valeur qui n'est pas une chaîne de caractères, ni aucun des autres types de données possibles. Ainsi, 124, 45639.566546456, 0, -45.5 etc... sont tous des exemples de nombres réels. Tous les nombres réels sont stockés sous forme de valeurs en virgule flottante 64 bits à double précision (ou valeurs entières), et le compilateur les optimisera dans la mesure du possible (par exemple, 0,0 sera optimisé à la valeur entière de 0).</p>
    <p class="dropspot">Lorsque vous traitez une valeur qui n'est pas un nombre entier, vous pouvez rencontrer de légères erreurs d'arrondi en raison de la nature des mathématiques à virgule flottante. Pour plus d'informations sur cette fonction et d'autres fonctions liées aux nombres, veuillez consulter : <a href="../GML_Reference/Maths_And_Numbers/Number_Functions/Number_Functions.htm">Référence GML - Fonctions numériques</a>.</p>
    <p class="note"><span class="note">NOTE</span> Sur la cible <b>HTML5</b>, tous les nombres réels sont des doubles.</p>
    <p class="dropspot">Notez que même si les variables créées dans <span data-keyref="GameMaker Name">GameMaker</span> sont toutes stockées sous forme de nombres à virgule flottante ou d'entiers en double précision, vous pouvez toujours utiliser d'autres formats lorsque vous traitez avec des extensions. Ceux-ci peuvent être transmis à <span data-keyref="GameMaker Name">GameMaker</span> à partir d'une extension, puis vérifiés à l'aide de la fonction <span class="inline">is_*()</span> appropriée, dont la liste est disponible <a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">ici</a>.</p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down6" href="#">Booléen</a></p>
  <div class="droptext" data-targetname="drop-down6">
    <p class="dropspot">Un booléen est simplement une valeur qui peut être soit <span class="inline">true</span>, soit <span class="inline">false</span>. Notez qu'actuellement, <span data-keyref="GameMaker Name">GameMaker</span> interprète un nombre réel égal ou inférieur à 0,5 comme une valeur <span class="inline">false</span>, et tout nombre réel supérieur à 0,5 comme étant <span class="inline">true</span>.
      Cela <i>ne</i> signifie <i>pas</i> pour autant que vous devez vérifier 1 et 0 (ou tout autre nombre réel) pour vrai et faux, car vous disposez également des <b>constantes</b> <span class="inline">true</span> et <span class="inline">false</span> qui doivent toujours être utilisées dans votre code pour
      pour éviter tout problème si des types de données booléennes réelles sont ajoutés dans une future mise à jour.</p>
    <p class="dropspot">Vous pouvez convertir tout nombre réel en une valeur implicitement booléenne à l'aide de la fonction suivante :</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/bool.htm"><span class="notranslate">bool</span></a></li>
    </ul>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Cordes</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot"><label for="one">Une chaîne de caractères est simplement un texte placé entre guillemets &quot;...&quot;. Vous pouvez effectuer certaines opérations sur les chaînes de caractères, comme ajouter deux chaînes de caractères ensemble pour créer une chaîne plus longue (concaténation) et vous pouvez également modifier les propriétés des chaînes de caractères et même en extraire des nombres réels. Pour plus d'informations sur les chaînes de caractères et les fonctions de chaîne de caractères, voir : <a href="../GML_Reference/Strings/Strings.htm">Référence GML - Chaînes de caractères</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down2" href="#">Tableaux</a></p>
  <div class="droptext" data-targetname="drop-down2">
    <p class="dropspot"><label for="three">Un tableau est un type de données spécial qui peut être utilisé pour contenir plusieurs valeurs. Vous affectez le tableau à une variable, puis vous &quot;remplissez&quot; les différents indices du tableau avec des valeurs. Ce tableau peut ensuite être transmis à des scripts et à des fonctions sur la base d'un passage par référence. Toutefois, si vous modifiez le tableau transmis, il deviendra alors une copie du tableau original et devra donc être renvoyé à la variable originale pour que le tableau soit mis à jour. Pour plus d'informations sur les tableaux, veuillez consulter : <a href="Arrays.htm">Aperçu GML - Tableaux</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down3" href="#">Structures</a></p>
  <div class="droptext" data-targetname="drop-down3">
    <p class="dropspot"><label for="eleven">Un <span class="notranslate">struct</span> (parfois appelé &quot;objet léger&quot;) est une structure de données brutes qui sert de conteneur pour les variables de tous types de données. Vous attribuez un <span class="notranslate">struct</span> à une variable et dans le <span class="notranslate">struct</span> vous pouvez ensuite définir d'autres variables et celles-ci peuvent être lues ou écrites selon les besoins. Pour de plus amples informations sur <span class="notranslate">structs</span>, veuillez consulter la section <a href="Structs.htm">Vue d'ensemble du GML - Structs</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down4" href="#">Variables de la méthode</a></p>
  <div class="droptext" data-targetname="drop-down4">
    <p class="dropspot"><label for="twelve">Une variable de méthode est une variable à laquelle a été attribuée une fonction et qui peut être utilisée exactement de la même manière que vous utiliseriez une fonction <span class="notranslate">GML</span> <span class="notranslate">runtime</span>. Pour des informations plus détaillées, veuillez consulter la section <a href="Method_Variables.htm">Variables de méthode</a>.</label></p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down13" href="#">int64</a></p>
  <div class="droptext" data-targetname="drop-down13">
    <p class="dropspot">Un &quot;int64&quot; est un entier de 64 bits qui peut être créé à l'aide de <span class="inline"><a href="../GML_Reference/Variable_Functions/int64.htm">int64()</a></span> (en passant dans un nombre réel non 64 bits) ou lors de la lecture d'une valeur <span class="inline">buffer_u64</span> à partir d'un <a href="../GML_Reference/Buffers/buffer_read.htm">tampon</a>.</p>
    <p class="dropspot">Cela peut être utilisé dans les cas où un entier de 64 bits est strictement nécessaire, ou lorsque vous voulez travailler avec le <a href="../../Additional_Information/Bitwise_Operators.htm">décalage des bits</a> et avez besoin de ces positions de 64 bits.</p>
    <p class="dropspot">Toutes les opérations bit à bit, même lorsqu'elles sont exécutées sur des valeurs non-64 bits, renverront toujours un entier 64 bits.</p>
    <p class="dropspot">Les divisions sur des valeurs int64 retourneront également des entiers (par exemple : <span class="inline2">int64(5) / int64(2) = 2</span>).</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down5" href="#">Valeurs hexadécimales</a></p>
  <div class="droptext" data-targetname="drop-down5">
    <p class="dropspot"><span data-keyref="GameMaker Name">GameMaker</span> accepte les <b>littéraux hexadécimaux</b> comme des valeurs légitimes. Les valeurs hexadécimales sont particulièrement courantes lorsqu'on travaille avec des couleurs, mais elles peuvent être utilisées partout où une valeur entière positive est nécessaire. Les valeurs hexadécimales peuvent être formatées des deux manières suivantes, où <span class="inline"><em>abcd</em></span> est la valeur hexadécimale réelle :</p>
    <p class="code"><span style="background-color: transparent;"><strong>$</strong><em>abcd</em></span><br />
      <strong>0x</strong><em>abcd</em>
    </p>
    <p class="dropspot">Par exemple, les valeurs décimales suivantes peuvent être exprimées en hexadécimal comme indiqué :</p>
    <p class="code"><strong>11406</strong> -&gt; $2c8e, 0x2c8e<br />
      <strong>16777215</strong> -&gt; $ffffff, 0xffffff
    </p>
    <hr />
    <p class="dropspot">Une valeur hexadécimale peut également commencer par un symbole dièse (<span class="inline2">#</span>), mais lorsqu'elle est écrite de cette manière, sa valeur ne sera pas égale à une valeur hexadécimale similaire écrite selon un format antérieur<span class="inline2">($</span> ou <span class="inline2">0x</span>). Cela est dû à la manière dont les couleurs sont interprétées sur <span class="notranslate">GML</span>, qui a nécessité la modification du format des valeurs hexadécimales dièse/livre pour que les couleurs CSS puissent être écrites dans un format <span class="inline2">#RRGGBB</span>. Pour plus d'informations, lisez <a data-xref="{text}" href="../GML_Reference/Drawing/Colour_And_Alpha/Colour_And_Alpha.htm#h">Hex Colours</a>.</p>
    <p class="dropspot">Par exemple, les deux suivants ne sont pas égaux :</p>
    <p class="code">$2c8edd <strong>!=</strong> #2c8edd</p>
    <p class="dropspot">Pour qu'ils se réfèrent à la même valeur décimale, il faudrait intervertir les deux premiers et les deux derniers caractères :</p>
    <p class="code">$<strong>2c</strong>8edd <strong>=</strong><strong>=</strong> #dd8e<strong>2c</strong></p>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down7" href="#">Pointeur</a></p>
  <div class="droptext" data-targetname="drop-down7">
    <p class="dropspot">Un pointeur est un type de données qui &quot;pointe&quot; vers un emplacement mémoire. Vous ne pouvez pas effectuer d'opérations sur un pointeur et il n'est utilisé que pour certaines fonctions très spécifiques, comme récupérer une texture ou l'adresse <span class="notranslate">buffer</span> de la mémoire pour une autre fonction. Pour des exemples de fonctions qui renvoient un pointeur, vous pouvez voir <a href="../GML_Reference/Buffers/buffer_get_address.htm"><span class="inline">buffer_get_address()</span></a> ou <a href="../GML_Reference/Asset_Management/Sprites/Sprite_Information/sprite_get_texture.htm"><span class="inline">sprite_get_texture()</span></a>.</p>
    <p class="dropspot">Il existe également une fonction permettant de vérifier si une valeur est un pointeur (voir &quot;<b>Vérification des types de données</b>&quot;, ci-dessous) et une fonction permettant de convertir une valeur en un pointeur :</p>
    <ul class="dropspotlist">
      <li class="dropspot"><a href="../GML_Reference/Variable_Functions/ptr.htm" style="background-color: transparent;"><span class="notranslate">ptr</span></a></li>
    </ul>
    <p class="dropspot">Vous pouvez également utiliser (et obtenir en retour) les constantes intégrées suivantes lorsque vous utilisez des pointeurs :</p>
    <table class=" cke_show_border">
      <tbody>
        <tr>
          <th>Constant</th>
          <th>Description</th>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_null</span></td>
          <td>Cette constante indique que le pointeur ne pointe vers rien de significatif (comme <span class="inline">NULL</span> en C++ ou <span class="inline">null</span> en C#). Cette valeur est <a class="glossterm" data-glossterm="falsy" href="#">faussée</a>.</td>
        </tr>
        <tr>
          <td><span class="notranslate"><span class="inline">pointer_invalid</span></td>
          <td>Cette constante signifie simplement que la valeur n'est pas un pointeur valide.</td>
        </tr>
      </tbody>
    </table>
    <p> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down8" href="#">Enum</a></p>
  <div class="droptext" data-targetname="drop-down8">
    <p class="dropspot">Un enum est un &quot;énumérateur&quot;, et il vous permet essentiellement de créer votre propre type de données limité avec une liste de valeurs constantes. Les enums sont expliqués en détail sur la page consacrée aux <a href="Variables/Constants.htm">constantes</a>.</p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down9" href="#">Indéfini</a></p>
  <div class="droptext" data-targetname="drop-down9">
    <p class="dropspot"><label for="seven">Une valeur indéfinie (également connue sous le nom de valeur &quot;nulle&quot;) est une expression qui n'a pas de valeur correcte, bien qu'elle soit syntaxiquement correcte, et qui doit donc renvoyer <i>quelque chose</i>. Par exemple, disons que vous avez une <a href="../GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">carte DS</a> et que vous utilisez la fonction <a href="../GML_Reference/Data_Structures/DS_Maps/ds_map_find_value.htm"><span class="inline">ds_map_find_value()</span></a>. Que se passe-t-il lorsque la carte ne contient pas la valeur recherchée ? Eh bien, puisque la fonction est correctement formatée et que le problème est que cette valeur n'existe pas, elle renvoie la constante <span class="inline">undefined</span>, et vous pouvez vérifier cette constante comme vous le feriez pour <span class="inline">true</span> ou toute autre valeur.<br></label></p>
    <p class="code"><label for="seven">var _value = ds_map_find_value(my_map, &quot;key&quot;);<br /><br />if (<a href="../GML_Reference/Variable_Functions/is_undefined.htm">is_undefined</a>(value)) {<br />    show_debug_message(&quot;The key does not exist!&quot;);<br />}</label><br /></p>
    <p class="dropspot"> <br /></p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down10" href="#">NaN</a></p>
  <div class="droptext" data-targetname="drop-down10">
    <p class="dropspot"><label for="nine"><span class="inline">NaN</span> signifie &quot;pas un nombre&quot;, et est une constante qui peut être retournée lorsque le compilateur ne peut pas évaluer les résultats d'une opération comme un nombre. Par exemple, 0/0 ne peut pas être défini comme un nombre réel, et est donc représenté par <span class="inline">NaN</span>, ou la racine carrée d'un nombre négatif - qui est considéré comme un nombre &quot;imaginaire&quot; - ne peut pas être représentée comme un nombre réel, et est donc représentée par <span class="inline">NaN</span>.</label></p>
    <p class="dropspot">Notez que puisque <span class="inline">NaN</span> n'est pas un nombre, il ne peut pas être comparé à lui-même, donc des comparaisons telles que <span class="inline">NaN == NaN</span> retourneront <span class="inline">false</span>. Il en va de même pour une comparaison de tableau telle que celle-ci :</p>
    <p class="code">show_debug_message(array_equals([NaN], [NaN]));<br />
      <br />
      // Output: 0 (false)
    </p>
    <p class="dropspot"> </p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down11" href="#">Infinity</a></p>
  <div class="droptext" data-targetname="drop-down11">
    <p class="dropspot">La constante <span class="inline">infinity</span> fait référence à un nombre considéré comme infini, tel que le résultat que vous obtiendriez en divisant une valeur à virgule flottante par zéro, par exemple : 1,0/0.</p>
    <p class="dropspot">Notez que la constante <span class="inline">infinity</span> est égale à elle-même, donc <span class="inline">infinity == infinity</span> renverra <span class="inline">true</span>.</p>
  </div>
  <p id="variable"><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down12" href="#">Tout</a></p>
  <div class="droptext" data-targetname="drop-down12">
    <p class="dropspot">Le type de données &quot;<strong>Any</strong>&quot; se retrouve sur de nombreuses pages du manuel, par exemple <a href="../GML_Reference/Variable_Functions/is_string.htm">dans les arguments</a> ou comme <a href="../GML_Reference/Variable_Functions/array_get.htm">valeur de retour</a>. Il indique que <em>tout type de valeur</em> est accepté, ou peut être retourné.</p>
  </div>
  <p> </p>
  <p>Vous pouvez vérifier le type de données de n'importe quelle variable à l'aide des fonctions énumérées à la page suivante :</p>
  <ul class="colour">
    <li><a href="../GML_Reference/Variable_Functions/Variable_Functions.htm">Fonctions variables</a></li>
  </ul>
  <p>Vous pouvez également trouver ici des tableaux de types arithmétiques qui montrent les résultats de différentes opérations utilisant des types de données variables mixtes :</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="../../Additional_Information/Type_Tables.htm">Tableaux de type</a></li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="GML_Overview.htm">Aperçu du GML</a></div>
        <div style="float:right">Suivant : <a data-xref="{title}" href="Language_Features/If_Else_and_Conditional_Operators.htm">if / else et les opérateurs conditionnels</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Data Type - Real
Data Type - String
Data Type - Pointer
Data Type - Undefined
Data Type - Enum
Data Type - True
Data Type - False
Data Type - Array
Data Type - Boolean
Data Type - NaN
Data Type - Infinite
Data Type - Struct
real
string
pointer
undefined
enum
true
false
arrays
boolean
NaN
infinite
ptr
struct
pointer_null
pointer_invalid
-->
  <!-- TAGS
data_type
real
string
pointer
undefined
enum
true
false
arrays
boolean
ptr
struct
pointer_null
pointer_invalid
-->
</body>
</html>