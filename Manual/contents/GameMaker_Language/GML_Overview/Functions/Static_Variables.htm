<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Variables statiques</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page outlining the use of Static Variables" />
  <meta name="rh-index-keywords" content="Static Variables" />
  <meta name="search-keywords" content="Static Variables,static" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Variables statiques</h1>
  <p>Une caractéristique intéressante des <a href="../Script_Functions.htm">fonctions de script</a> et des <a href="../Method_Variables.htm">variables de méthode</a> est qu'elles peuvent avoir des <strong>variables statiques</strong>. Une variable statique est une variable qui est définie la première fois que la fonction est appelée et qui conservera sa valeur par la suite. Pour créer une variable statique, vous devez la définir à l'aide du mot-clé <span class="inline">static</span>, comme le montre cet exemple simple :</p>
  <p class="code">counter = function()<br />
    {<br />
        static num = 0;<br />
        return num++;<br />
    }</p>
  <p>Dans l'exemple ci-dessus, la variable <span class="inline">num</span> est une variable statique, et sera donc définie comme <span class="inline">0</span> la première fois que la fonction sera appelée, mais chaque fois que la fonction sera appelée ensuite, l'initialisation de la variable sera ignorée. Donc, si vous appelez ensuite cette fonction comme ceci :</p>
  <p class="code">for (var i = 0; i &lt; 10; ++i;)<br />
    {<br />
        show_debug_message(counter());<br />
    }</p>
  <p>La sortie sera :</p>
  <p class="code">0<br />
    1<br />
    2<br />
    3<br />
    4<br />
    5<br />
    6<br />
    7<br />
    8<br />
    9</p>
  <p>Si vous n'aviez pas utilisé le mot-clé <span class="inline">static</span> ici, la sortie serait simplement <span class="inline">0</span> pour chaque itération de la boucle, puisque la variable <span class="inline">num</span> sera définie comme <span class="inline">0</span> à chaque appel de la fonction avant d'être retournée. Notez qu'une variable statique ne peut être modifiée qu'à l'intérieur de la fonction d'origine, et que son retour vous donnera simplement une copie de sa valeur - essentiellement, la variable statique partagée ne peut être modifiée que par la fonction qui la contient.</p>
  <p>Une variable statique est toujours initialisée au début de la fonction, donc peu importe où vous définissez une variable statique dans la fonction, elle sera toujours disponible pour être lue et modifiée tout au long de la fonction (même si elle est utilisée avant d'être définie). Voir l'exemple suivant :</p>
  <p class="code">function add_health()<br />
    {<br />
        my_health++;<br />
        show_debug_message(my_health);<br />
        static my_health = 1;<br />
    }</p>
  <p>Ici, la variable statique &quot;<span class="inline">my_health</span>&quot; est modifiée et imprimée dans la sortie du compilateur <em>avant d'</em> être initialisée. Bien que cela semble incorrect, c'est tout à fait normal car les variables statiques sont initialisées <em>avant l'</em>exécution de tout code de fonction. Notez que s'il y a plusieurs variables statiques dans une fonction, l'ordre dans lequel elles ont été définies sera conservé lorsqu'elles seront initialisées au début.</p>
  <p>Vous pouvez également utiliser le mot-clé <span class="inline">static</span> à l'intérieur d'une fonction pour créer une <strong>fonction statique</strong>, ce qui - comme pour les variables - signifie simplement que la fonction ne sera définie qu'une seule fois, soit la première fois que la fonction est appelée, par exemple :</p>
  <p class="code">function(_x, _y) Vector2 constructor<br />
    {<br />
        x = _x;<br />
        y = _y;<br />
    <br />
        static Add = function( _other )<br />
        {<br />
            x += _other.x;<br />
            y += _other.y;<br />
        }<br />
    }
  </p>
  <p>Dans l'exemple ci-dessus, la fonction constructeur <span class="inline"><span class="inline">Vector2</span> peut être utilisée pour créer un <span class="notranslate">struct</span>, et le <span class="notranslate">struct</span> aura quelques variables, dont l'une est la variable de méthode <span class="inline"><span class="inline">Add</span>. Comme cette variable a été définie comme statique, la fonction qu'elle contient ne sera initialisée qu'<em>une seule fois </em>lors du premier appel de la fonction <span class="inline">Vector2</span>, et toutes les autres <span class="notranslate">structs</span> créées avec ce constructeur feront référence à la fonction <span class="inline">Add</span> qui a été créée initialement, au lieu de créer une nouvelle fonction pour chaque <span class="notranslate">struct</span> (pour plus d'informations sur <span class="notranslate">structs</span> et le mot-clé <span class="inline">constructor</span>, voir <a href="../Structs.htm">ici</a>).</p>
  <p>Lorsque l'on utilise l'héritage avec des constructeurs, les variables statiques du constructeur enfant ne seront initialisées qu'après l'exécution du constructeur parent, de sorte que les variables statiques du constructeur enfant ne remplaceront pas les variables statiques du parent. Voir l'exemple suivant :</p>
  <p class="code">function Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 10;<br />
    }<br />
    <br />
    function Child() : Parent() constructor<br />
    {<br />
        show_debug_message(value);<br />
        static value = 20;<br />
    }<br />
    <br />
    var _child = new Child();
  </p>
  <p>L'appel du constructeur de <span class="inline">Child()</span> imprime ceci dans le journal de sortie :</p>
  <p class="code">10<br />
    20</p>
  <p>La première valeur provient du constructeur parent, et la seconde du constructeur enfant. Cela montre que la variable statique <span class="inline">value</span> de l'enfant n'a pas été initialisée avant la fin du constructeur parent, et que dans chaque constructeur, la variable statique a été initialisée avant l'appel à <span class="inline">show_debug_message()</span>.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../GML_Overview.htm">Aperçu du GML</a></div>
        <div style="float:right">Suivant : <a data-xref="{title}" href="../Arrays.htm">Tableaux</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Static Variables
static
-->
  <!-- TAGS
static
-->
</body>
</html>