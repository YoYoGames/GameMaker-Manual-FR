<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Fonctions de script et méthodes</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Page explaining practical differences between Script Functions and Methods." />
  <meta name="rh-index-keywords" content="Script Functions vs. Methods" />
  <meta name="search-keywords" content="calling methods, calling script functions, method performance" />
</head>
<body>
  <h1>Fonctions de script et méthodes</h1>
  <p>Cette page présente des informations essentielles sur l'utilisation des fonctions de script par rapport aux méthodes.</p>
  <h2>Différence de base</h2>
  <p>Une <a href="Script_Functions.htm">fonction de script</a> est créée avec cette syntaxe :</p>
  <p class="code">function name()<br />
    {<br />
        code;<br />
    }</p>
  <p>Une <a href="Method_Variables.htm">variable de méthode</a> est créée avec cette syntaxe :</p>
  <p class="code">name = function()<br />
    {<br />
        code;<br />
    }</p>
  <p>Vous devriez utiliser la première syntaxe dans les scripts, pour créer des fonctions globales qui peuvent être appelées à partir de n'importe quelle portée dans votre jeu.</p>
  <p>Vous devez utiliser la deuxième syntaxe pour créer des fonctions dans les <a href="Structs.htm">structs/constructeurs</a> et les objets. Cette syntaxe crée une variable contenant une méthode.</p>
  <h2>Appels directs</h2>
  <p>Vous pouvez appeler les fonctions et les méthodes de script directement en utilisant les parenthèses <span class="inline2">()</span>, tout comme une <a href="Runtime_Functions.htm">fonction d'exécution</a>:</p>
  <p class="code">// Create the function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Call the function<br />
    reset_x();
  </p>
  <p>Vous pouvez également utiliser la fonction <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> pour exécuter une fonction de script, bien qu'il s'agisse d'une ancienne fonction dont l'utilisation n'est pas recommandée.</p>
  <h2>Appels indirects : Méthodes</h2>
  <p>Vous pouvez stocker une référence à une méthode, dans une autre variable, pour l'appeler plus tard à travers cette autre variable :</p>
  <p class="code">// Create method<br />
    reset_alpha = function()<br />
    {<br />
        image_alpha = 1;<br />
    }<br />
    <br />
    // Pass reference and call<br />
    temp_1 = reset_alpha;<br />
    temp_1();
  </p>
  <p class="note"><span class="note">NOTE</span> Voyez comment le code ne met pas <span class="inline2">()</span> après <span class="inline2">reset_alpha</span>. C'est parce que nous lisons la référence de la méthode et ne l'appelons pas.</p>
  <p>Dans cet exemple, l'appel de <span class="inline2">temp_1</span> appellera <span class="inline2">reset_alpha</span>, car il stocke une référence à cette <strong>méthode</strong>.</p>
  <p>Vous pouvez tout à fait transmettre une référence de méthode de cette manière. Cependant, lorsque vous utilisez des fonctions de script, il y a une mise en garde.</p>
  <h2>Appels indirects : Fonctions de script</h2>
  <p>Vous pouvez également stocker une référence à une fonction de script, dans une autre variable :</p>
  <p class="code">// Create function<br />
    function reset_x()<br />
    {<br />
        x = xstart;<br />
    }<br />
    <br />
    // Store reference<br />
    temp_1 = reset_x;
  </p>
  <p>Maintenant, vous pouvez appeler <span class="inline2">temp_1</span> en faisant ceci :</p>
  <p class="code">temp_1();</p>
  <p>Toutefois, comme cette variable fait référence à une <strong>fonction de script</strong>, il doit d'abord la convertir en <strong>méthode</strong>, puis l'appeler.</p>
  <p>Cela peut facilement entraîner une augmentation de l'utilisation de la mémoire, surtout si vous l'appelez à chaque image, car le moteur doit maintenant créer une nouvelle méthode à chaque image pour cet appel. </p>
  <p>Alors, quelle est la solution ?</p>
  <ul class="colour">
    <li>Utilisez <a href="../GML_Reference/Asset_Management/Scripts/script_execute.htm"><span class="inline">script_execute()</span></a> pour appeler la fonction de script via sa référence, ce qui ne créera pas de méthode.</li>
    <li>Ou, meilleure solution : convertissez votre fonction de script <a href="../GML_Reference/Variable_Functions/method.htm">en méthode</a> lorsque vous lui transmettez sa référence.</li>
  </ul>
  <p>Pour mettre en œuvre la deuxième solution, votre code ressemblerait à ceci :</p>
  <p class="code">temp_1 = method(undefined, reset_x);</p>
  <p>Il s'agit de créer une nouvelle méthode à partir de la fonction de script <span class="inline2">reset_x</span>, à l'aide des éléments suivants <a href="../GML_Reference/Variable_Functions/method.htm"><span class="inline">method()</span></a>.</p>
  <p>Appeler <span class="inline2">temp_1()</span> maintenant en utilisant les parenthèses n'augmentera pas l'utilisation de la mémoire, car la méthode est déjà créée pour vous.</p>
  <p>Encore une fois, cela ne s'applique que si vous appelez une fonction de script <strong>indirectement</strong>, via une référence stockée dans une variable. L'appeler directement ne pose pas de tels problèmes.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Retour : <a data-xref="{title}" href="GML_Overview.htm">Aperçu du code GML</a></div>
        <div>Suivant : <a data-xref="{title}" href="Functions/Static_Variables.htm">Variables statiques</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Script Functions vs. Methods
-->
  <!-- TAGS
script_functions_vs_methods
-->
</body>
</html>