<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>delta_temps</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for delta_time" />
  <meta name="rh-index-keywords" content="delta_time" />
  <meta name="search-keywords" content="delta_time" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>delta_temps</h1>
  <p>Cette variable renvoie le temps delta de la trame, qui est la différence de temps entre la trame précédente et la trame actuelle. Cette valeur est exprimée en microsecondes, où 1 microseconde correspond à 1 000 000ème de seconde.</p>
  <p>Le but de la synchronisation delta est d'éliminer les effets du décalage ou de la lenteur des ordinateurs qui essaient de gérer des graphiques complexes ou beaucoup de code. Il s'agit d'une valeur qui peut être ajoutée à la vitesse des objets afin qu'ils se déplacent finalement à la même vitesse, indépendamment du décalage. Dans <span data-keyref="GameMaker Name">GameMaker</span>, on y parvient en utilisant la variable <span class="inline">delta_time</span> à chaque étape, car elle mesure le temps qui s'est écoulé entre une étape et la suivante en microsecondes. Par conséquent, la variable <span class="inline">delta_time</span> peut être utilisée pour calculer la vitesse à laquelle (par exemple) un personnage doit se déplacer pour compenser un pic de retard dans le jeu.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">delta_time</p>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Real">Real</span> (integer)</p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var _dt = delta_time / 1000000;<br />
    speed = spd * _dt;</p>
  <p>Le code ci-dessus définira la vitesse de l'instance en utilisant le temps delta pour corriger le décalage. La variable &quot;_dt&quot; sera utilisée pour contenir la valeur du temps delta calculée précédemment, afin que le ratio puisse être utilisé pour multiplier la valeur de la vitesse de base (contenue dans la variable &quot;spd&quot;) et ainsi obtenir une vitesse cohérente pour l'instance.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Date_And_Time.htm">Date et heure</a></div>
        <div style="float:right">Suivant : <a href="date_set_timezone.htm"><span class="notranslate">date_set_timezone</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
delta_time
-->
  <!-- TAGS
delta_time
-->
</body>
</html>