<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>différence d'angle</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <script src="../../../../assets/scripts/canvas_helpers.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for angle_difference" />
  <meta name="rh-index-keywords" content="angle_difference" />
  <meta name="search-keywords" content="angle_difference" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>différence d'angle</h1>
  <p>Cette fonction renvoie la plus petite différence entre les deux angles spécifiés, la différence étant calculée à partir de l'angle source vers l'angle de destination. La valeur renvoyée sera comprise entre -180 et 180 degrés (où un angle positif correspond au sens inverse des aiguilles d'une montre et un angle négatif au sens des aiguilles d'une montre).</p>
  <p>La relation entre les angles &quot;source&quot; et &quot;destination&quot; est telle que la différence que vous obtenez en appelant <span class="inline2">angle_difference(dest, src)</span>, lorsqu'elle est ajoutée à la valeur <span class="inline2">src</span>, vous donne l'angle <span class="inline2">dest</span> (bien que les valeurs numériques exactes puissent différer). Vous pouvez utiliser une technique similaire pour déplacer l'angle source vers l'angle destination progressivement à chaque étape, où vous ajoutez, disons, 10% de la différence retournée à <span class="inline2">src</span> pour le déplacer un peu vers <span class="inline2">dest</span> (ceci est démontré dans l'exemple ci-dessous).</p>
  <p> </p>
  <h4><b>Syntaxe :</b></h4>
  <p class="code">angle_difference(dest, src)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th><th>Type</th>
        <th>Description</th>
     </tr>
      <tr>
        <td><span class="notranslate">dest</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The destination or target angle</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">src</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The source angle</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Real"></span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">var _dir = point_direction(x, y, mouse_x, mouse_y);<br />
    var _diff = angle_difference(_dir, image_angle);<br />
    image_angle += _diff * 0.1;</p>
  <p>Le code ci-dessus obtiendra la direction de l'instance vers le curseur de la souris, puis la différence entre cet angle et l'angle actuel. <a href="../../Asset_Management/Sprites/Sprite_Instance_Variables/image_angle.htm"><span class="inline">image_angle</span></a>en utilisant cette valeur pour faire pivoter progressivement l'instance vers la souris.</p>
  <p><img class="invisible" src="../../../../assets/Images/InteractiveExamples/DirectionalSprite.png" /></p>
  <p><canvas class="gml_reference_example" height="128" id="angle_difference_example" width="128"> </canvas></p>
  <p class="canvas_subtitle">Exemple interactif</p>
  <script>
    //<![CDATA[
    let elm = document.getElementById("angle_difference_example");
    let ewidth = elm.clientWidth,
      eheight = elm.clientHeight;
    let context = elm.getContext("2d");
    let imagePath = "../../../../assets/Images/InteractiveExamples/DirectionalSprite.png";
    let img = new Image();
    img.src = imagePath;
    img.onload = () => {
      drawImageCenteredRotated(img, context, ewidth / 2, eheight / 2, angle);
    }
    var angle = 0;
    var targetAngle = 0;
    createMouseMoveEvent(elm, (mx, my) => {
      let diffX = mx - ewidth / 2;
      let diffY = my - eheight / 2;
      targetAngle = radToDeg(Math.atan2(diffY, diffX));
    });
    canvasLoop(() => {
      let diff = angle_difference(targetAngle, angle);
      angle += diff * 0.1;
      context.clearRect(0, 0, ewidth, eheight);
      drawImageCenteredRotated(img, context, ewidth / 2, eheight / 2, angle);
    });
    //]]>
  </script>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Angles_And_Distance.htm">Angles et distances</a></div>
        <div style="float:right">Suivant : <a href="lengthdir_x.htm"><span class="notranslate">lengthdir_x</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
angle_difference
-->
  <!-- TAGS
angle_difference
-->
</body>
</html>