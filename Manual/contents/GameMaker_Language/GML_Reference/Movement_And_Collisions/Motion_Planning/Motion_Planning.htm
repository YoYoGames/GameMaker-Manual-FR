<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Planification des mouvements</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference section for Motion Planning functions and variables" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Motion Planning,mp,mp funtions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Planification des mouvements</h1>
  <p>Dans de nombreux jeux, vous souhaitez que les adversaires, les PNJ, les ennemis, etc... interagissent avec le joueur et fassent preuve d'une certaine intelligence lorsqu'ils se déplacent : vous voulez qu'ils évitent les obstacles, qu'ils planifient des itinéraires et qu'ils ne se heurtent pas à tout sur leur passage ! Pour y parvenir, <span data-keyref="GameMaker Name">GameMaker</span> dispose d'une série de fonctions qui traitent de la planification des mouvements. Notez que, bien qu'elles soient conçues pour des choses comme les ennemis du jeu, elles peuvent être utilisées pour toutes sortes de choses comme la création d'une manière fluide d'introduire du texte, ou de créer des transitions, etc... Cependant, quel que soit le type de fonctions que vous choisissez d'utiliser dans votre jeu, il faut noter que dans de nombreuses situations, un seul ensemble de fonctions ne vous donnera pas une solution parfaite et que vous devrez &quot;mélanger&quot; les fonctions, en utilisant l'une ou l'autre en fonction de la situation dans votre jeu.</p>
  <p>Dans <span data-keyref="GameMaker Name">GameMaker</span>, la planification des mouvements est gérée par les fonctions <b>mp_</b>, qui sont elles-mêmes divisées en trois groupes :</p>
  <h2><label for="one">Fonctions linéaires</label></h2>
  <p>Ce type de fonction tente de calculer un chemin sans collision pour l'instance. Une fois que ce chemin a été calculé, vous pouvez l'assigner à l'instance pour qu'elle se déplace vers le but. Le calcul du chemin prendra un certain temps mais ensuite l'exécution du chemin sera rapide. Bien sûr, ceci n'est valable que si la situation n'a pas changé entre-temps. Par exemple, si les obstacles changent, vous devrez peut-être recalculer le chemin. Notez à nouveau que ces fonctions peuvent échouer et qu'aucun chemin ne peut être trouvé pour l'instance.</p>
  <ul class="colour">
    <li><a href="mp_linear_step.htm"><span class="notranslate">mp_linear_step</span></a></li>
    <li><a href="mp_linear_step_object.htm"><span class="notranslate">mp_linear_step_object</span></a></li>
    <li><a href="mp_linear_path.htm"><span class="notranslate">mp_linear_path</span></a></li>
    <li><a href="mp_linear_path_object.htm"><span class="notranslate">mp_linear_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="three">Fonctions potentielles</label></h2>
  <p>Ce sont les fonctions d'évitement de base et elles sont bonnes pour une IA simple. Elles fonctionnent en faisant en sorte qu'une instance fasse un pas vers une position cible particulière en essayant d'aller tout droit si possible mais en prenant une direction différente si nécessaire. Ces fonctions doivent être utilisées dans l'<b>événement Step</b> d'une instance.</p>
  <ul class="colour">
    <li><a href="mp_potential_settings.htm"><span class="notranslate">mp_potential_settings</span></a></li>
    <li><a href="mp_potential_step.htm"><span class="notranslate">mp_potential_step</span></a></li>
    <li><a href="mp_potential_step_object.htm"><span class="notranslate">mp_potential_step_object</span></a></li>
    <li><a href="mp_potential_path.htm"><span class="notranslate">mp_potential_path</span></a></li>
    <li><a href="mp_potential_path_object.htm"><span class="notranslate">mp_potential_path_object</span></a></li>
  </ul>
  <p> </p>
  <h2><label for="two">Fonctions de la grille</label></h2>
  <p>Le dernier type de fonction utilise un mécanisme beaucoup plus complexe basé sur une approche en grille (parfois appelé algorithme A*). Il sera beaucoup plus efficace pour trouver des chemins (bien qu'il puisse encore échouer) et trouvera les chemins les plus courts possibles, mais sa mise en place demande plus de travail de votre part.</p>
  <p>L'idée générale est la suivante : tout d'abord, nous créons une grille qui couvre la pièce (ou la partie concernée). Vous pouvez choisir d'utiliser une grille fine, qui sera plus lente, ou une grille grossière, mais les deux doivent être basées sur la résolution de la pièce afin que la recherche de chemin soit aussi précise que possible. Par exemple, si vous avez une pièce de 400x200 pixels, vous pouvez avoir une résolution de grille de 40, ou 20, ou 10... tout dépend de la précision dont vous avez besoin pour le chemin et de la quantité de traitement que vous voulez que <span class="notranslate">GameMaker</span> fasse pour le générer.</p>
  <p>Ensuite, pour tous les objets pertinents que nous voulons éviter, nous devons déterminer les cellules de la grille qu'ils recouvrent (sur la base de leurs boîtes englobantes ou de leur adresse précise <span class="notranslate">sprite</span>) et marquer ces cellules comme étant interdites. Ainsi, une cellule sera marquée comme totalement interdite, même si un obstacle ne la chevauche que partiellement.</p>
  <p>Enfin, nous spécifions une position de départ et une position d'arrivée, qui <i>doivent</i> toutes deux se trouver dans des cellules libres, et la fonction calcule alors le chemin le plus court possible entre ces deux positions. Le chemin passera entre les centres de toutes les cellules libres, donc si les cellules sont suffisamment grandes pour que l'instance placée en son centre se trouve complètement à l'intérieur, ce sera un succès. Ce chemin est ensuite assigné à l'instance à suivre en utilisant les fonctions <a href="../../Asset_Management/Paths/Paths.htm"><span class="inline">path_*</span></a> pour le suivre. Vous devriez vous rendre compte de l'importance de la taille des cellules pour cela, car les cellules doivent être suffisamment grandes pour que l'objet mobile placé avec son origine au centre d'une cellule se trouve <i>complètement</i> à l'intérieur de celle-ci. (Faites attention à la position de l'origine de l'objet. Sachez également que vous pouvez décaler la trajectoire si l'origine de l'objet n'est pas en son centre). D'autre part, plus les cellules sont petites, plus il y a de chemins possibles. Si vous faites des cellules trop grandes, les ouvertures entre les obstacles peuvent se fermer parce que toutes les cellules coupent un obstacle.</p>
  <ul class="colour">
    <li><a href="mp_grid_create.htm"><span class="notranslate">mp_grid_create</span></a></li>
    <li><a href="mp_grid_destroy.htm"><span class="notranslate">mp_grid_destroy</span></a></li>
    <li><a href="mp_grid_path.htm"><span class="notranslate">mp_grid_path</span></a></li>
    <li><a href="mp_grid_add_cell.htm"><span class="notranslate">mp_grid_add_cell</span></a></li>
    <li><a href="mp_grid_add_instances.htm"><span class="notranslate">mp_grid_add_instances</span></a></li>
    <li><a href="mp_grid_add_rectangle.htm"><span class="notranslate">mp_grid_add_rectangle</span></a></li>
    <li><a href="mp_grid_get_cell.htm"><span class="notranslate">mp_grid_get_cell</span></a></li>
    <li><a href="mp_grid_clear_all.htm"><span class="notranslate">mp_grid_clear_all</span></a></li>
    <li><a href="mp_grid_clear_cell.htm"><span class="notranslate">mp_grid_clear_cell</span></a></li>
    <li><a href="mp_grid_clear_rectangle.htm"><span class="notranslate">mp_grid_clear_rectangle</span></a></li>
    <li><a href="mp_grid_to_ds_grid.htm"><span class="notranslate">mp_grid_to_ds_grid</span></a></li>
    <li><a href="mp_grid_draw.htm"><span class="notranslate">mp_grid_draw</span></a></li>
  </ul>
  <p> </p>
  <p>L'approche basée sur la grille est très puissante (et est utilisée dans de nombreux jeux professionnels), mais elle nécessite une réflexion approfondie car vous devez déterminer quelle surface et quelle taille de cellule sont suffisantes pour résoudre le jeu. Vous devez également déterminer quels objets doivent être évités et si un contrôle précis est important. Tous ces paramètres influencent fortement l'efficacité de l'approche. Vous devez également décider si elle est réellement nécessaire, car l'une des fonctions moins coûteuses de <span class="inline">mp_*</span> peut peut-être faire le travail tout aussi bien.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Le dos : <a href="../Movement_And_Collisions.htm">Mouvement et collisions</a></div>
        <div style="float:right">Suivant : <a href="../Collisions/Collisions.htm">Collisions</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Motion Planning
MP Functions
Motion Planning Functions
-->
  <!-- TAGS
mp_functions
-->
</body>
</html>