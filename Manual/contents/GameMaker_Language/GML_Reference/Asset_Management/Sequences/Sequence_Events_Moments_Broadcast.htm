<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Séquence des événements, des moments et des messages de diffusion</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the different functions and variables associated with Sequence Events, Moments and Broadcast Messages" />
  <meta name="rh-index-keywords" content="" />
  <meta name="search-keywords" content="Sequence Events,Sequence Momements,Sequence Messages,broadcast messages,event_create,event_destroy,event_clean_up,event_step,event_step_begin,event_step_end,event_async_system,event_broadcast_message" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Événements, moments et messages diffusés</h1>
  <p>Outre toutes les propriétés énumérées <a href="Sequences.htm">ici</a> pour une séquence <span class="notranslate">struct</span>, vous avez également la possibilité d'ajouter des propriétés d'&quot;action&quot; spéciales à une séquence. Il existe trois types différents de ces propriétés d'&quot;action&quot; qui peuvent être ajoutées à un objet de séquence - <b>Événements</b>. <b>Moments</b> et <b>Messages de diffusion</b> - et chacun d'entre eux est expliqué plus en détail dans les sections ci-dessous.</p>
  <h2>Séquence des événements</h2>
  <p>Des <b>événements</b> peuvent être ajoutés aux objets de séquence, et ces événements sont analogues à ceux utilisés par les actifs d'objet. Les événements que vous attribuez à un objet séquence se produiront dans un ordre spécifique, soit une fois à un moment défini du cycle de vie de la séquence, soit à chaque image de la séquence en cours d'exécution. Dans cette section, nous abordons la manière dont ces événements sont traités à l'aide du code, mais ils peuvent également être ajoutés à l'aide de l'<a href="../../../../The_Asset_Editors/Sequences.htm">éditeur de séquence</a>. Notez que l'ordre des événements énumérés ici n'est pas influencé par la direction de <a class="glossterm" data-glossterm="tête de lecture" href="#">la tête de lecture</a>, et même si la séquence est lue à l'envers, les événements seront toujours exécutés dans l'ordre indiqué ci-dessous.</p>
  <p>Les événements disponibles sont les suivants :<b></b></p>
  <ul class="colour">
    <li><b>Créer</b>: cette action est déclenchée lorsqu'une instance de séquence est créée sur une couche.</li>
    <li><b>Destroy</b>: cette action est déclenchée lorsqu'une instance de séquence sur une couche est détruite.</li>
    <li><b>Nettoyage</b>: il est déclenché lorsqu'une instance de séquence est ramassée.</li>
    <li><b>Step</b>: déclenché juste avant l'événement habituel de l'objet step. <b>Important !</b> Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.</li>
    <li><b>Begin Step</b>: déclenché juste avant l'événement begin-step de l'objet. <b>Important !</b> Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.</li>
    <li><b>End Step</b>: déclenché juste avant l'événement end-step de l'objet. <b>Important !</b> Si la séquence est en pause, cet événement ne sera pas déclenché avant le prochain pas après la reprise de la séquence.</li>
    <li><b>Système asynchrone</b>: déclenché de la même manière que n'importe quel objet Gestionnaire d'<a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/System.htm">événements du système asynchrone</a>. <em><b>Important !</b></em>Si la séquence est en pause, cet événement ne sera pas déclenché.</li>
    <li><b>Message de diffusion</b>: déclenché pendant la mise à jour de la séquence lorsqu'une image clé de message de diffusion est rencontrée.</li>
  </ul>
  <p>Tous les événements doivent être associés à des fonctions définies dans un script. Pour configurer un événement, il faut donc affecter une <a href="../../../GML_Overview/Method_Variables.htm">variable de méthode</a> à une propriété portant le nom correct qui indique à la séquence quel événement doit appeler la fonction. La syntaxe pour cela est la suivante :</p>
  <p class="code">&lt;sequence_struct&gt;.&lt;event_property&gt; = method(&lt;sequence_struct&gt;, &lt;function_name&gt;);</p>
  <p>Les propriétés de la séquence <span class="notranslate">struct</span> pour les différents événements sont les suivantes :<span class="inline"></span></p>
  <ul class="colour">
    <li><span class="inline">event_create</span><span class="inline"></span></li>
    <li><span class="inline">event_destroy</span><span class="inline"></span></li>
    <li><span class="inline">event_clean_up</span><span class="inline"></span></li>
    <li><span class="inline">event_step</span><span class="inline"></span></li>
    <li><span class="inline">event_step_begin</span><span class="inline"></span></li>
    <li><span class="inline">event_step_end</span></li>
    <li><span class="inline">event_async_system</span><span class="inline"></span></li>
    <li><span class="inline">event_broadcast_message</span></li>
  </ul>
  <p>Pour donner un exemple d'utilisation, disons que nous voulons que la séquence inverse la direction lorsqu'un clic sur le bouton gauche de la souris est détecté. Nous devrions d'abord créer un script avec la fonction que nous voulons appeler, quelque chose comme ceci :</p>
  <p class="code">/// @function seq_reverse();<br />
    <br />
    function seq_reverse()<br />
    {<br />
        if (mouse_check_button_pressed(mb_left))<br />
        {<br />
            if (self.headDirection == seqdir_right)<br />
            {<br />
                self.headDirection = seqdir_left;<br />
            }<br />
            else self.headDirection = seqdir_right;<br />
        }<br />
    }
  </p>
  <p>Dans cette fonction, tout ce que nous faisons est d'écouter une pression de la souris et d'inverser le sens de lecture de la séquence à laquelle la méthode a été liée. Vous remarquerez qu'actuellement, il n'est pas possible de passer des paramètres aux fonctions liées à ces propriétés et que, dans tous les cas, la variable <a href="../../../GML_Overview/Instance_Keywords.htm"><span class="inline">self</span></a> dans la portée de la fonction est assignée à l'instance de la séquence.</p>
  <p class="note"><b>REMARQUE</b>: Il convient de noter que dans le script ci-dessus, l'identifiant <span class="inline">self</span> peut être omis et n'est utilisé que pour montrer explicitement la portée de la variable de méthode utilisée dans cet exemple.</p>
  <p>Pour l'attribuer à une séquence, vous devez procéder comme suit :</p>
  <p class="code">var _seq = sequence_get(Sequence1);<br />
    _seq.event_step = method(_seq, seq_reverse);</p>
  <p>Nous avons maintenant assigné un événement step à l'<i>objet</i> séquence avec une fonction pour détecter quand une souris est pressée et ensuite changer la direction de la tête de lecture de l'<i>instance de la</i> séquence après qu'elle ait été créée dans une pièce.</p>
  <h2><label for="2">Moments</label></h2>
  <p>Un <b>moment de</b> séquence est une action de code unique qui est déclenchée sur une ou plusieurs images spécifiées pendant la lecture de la séquence. Ces moments de code sont - comme pour les événements (expliqués ci-dessus) - simplement des <a href="../../../GML_Overview/Method_Variables.htm">variables de méthode</a> prédéfinies qui sont déclenchées sur l'image donnée. Par exemple, si vous voulez qu'une séquence crée une instance de &quot;balle&quot; sur une image spécifique de l'animation, vous devez d'abord créer la fonction qui sera utilisée pour cette action, comme ceci :</p>
  <p class="code">/// @function seq_shoot();<br />
    <br />
    seq_shoot = function()<br />
    {<br />
        instance_create_layer(sequence.xorigin, sequence.yorigin, &quot;Instances&quot;, obj_Bullet);<br />
    }
  </p>
  <p>Vous devez ensuite l'ajouter à une image dans la propriété <span class="inline">momentKeyframes</span> de la séquence <span class="notranslate">struct</span>. Il s'agit essentiellement d'une piste &quot;spéciale&quot; qui n'est utilisée qu'à cette fin et qui ne peut donc recevoir que des données d'images clés associées aux actions momentanées que vous souhaitez conférer à la séquence. Cette piste est créée de la même manière que n'importe quelle autre piste, en créant des images clés <span class="notranslate">structs</span> et en les remplissant de données d'images clés, où le canal 0 est le seul canal que vous pouvez utiliser et le type de piste est <span class="inline">seqtracktype_moment</span>. Vous trouverez ci-dessous un exemple de création de cette piste, utilisant la fonction que nous avons définie ci-dessus pour déclencher les moments (images) donnés :</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br />
    var _k = array_create(3);<br />
    _k[0] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[0].frame = 60;<br />
    _k[1] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[1].frame = 120;<br />
    _k[2] = sequence_keyframe_new(seqtracktype_moment);<br />
    _k[2].frame = 180;<br />
    var _d = array_create(1);<br />
    _d[0] = sequence_keyframedata_new(seqtracktype_moment);<br />
    _d[0].channel = 0;<br />
    _d[0].event = method(_d[0], seq_shoot);<br />
    _k[0].channels = _d;<br />
    _k[1].channels = _d;<br />
    _k[2].channels = _d;<br />
    _seq.momentKeyframes = _k;</p>
  <p>Le code ci-dessus va simplement définir les images 60, 120 et 180 de la piste &quot;moment&quot; pour appeler la méthode <span class="inline">seq_shoot</span>. Vous remarquerez qu'actuellement, vous n'êtes pas en mesure de passer des paramètres aux fonctions qui sont utilisées pour chaque moment, et dans tous les cas, la variable <span class="inline">self</span> dans la portée de la fonction est affectée à l'instance de la séquence (vous n'avez généralement pas besoin d'utiliser <span class="inline">self</span> mais dans certains cas particuliers, cela peut être utile).</p>
  <h2><label for="3">Messages de diffusion</label></h2>
  <p>Les séquences peuvent être conçues pour générer des <b>messages de diffusion</b>, qui sont de simples chaînes ajoutées à des images spécifiques le long de la ligne de temps de l'animation. Lorsque ce point de la ligne de temps est atteint, la chaîne est diffusée à toutes les instances d'objets qui l'écoutent. Vous pouvez ajouter ces messages dans le site <span class="notranslate">IDE</span> à l'aide de l'<a href="../../../../The_Asset_Editors/Sequences.htm">éditeur de séquence</a>, mais ils peuvent également être créés et modifiés à l'aide de code.</p>
  <p>Pour créer un message de diffusion sur une séquence à l'aide de <span class="notranslate">GML</span>, vous devez les ajouter à une image dans la propriété <span class="inline">messageEventKeyframes</span> de la séquence <span class="notranslate">struct</span>. Il s'agit essentiellement d'une piste &quot;spéciale&quot; qui n'est utilisée qu'à cette fin et qui ne peut donc recevoir que des données d'images clés associées aux messages de diffusion que vous souhaitez pour la séquence. Cette piste est créée de la même manière que n'importe quelle autre piste, en créant des images clés <span class="notranslate">structs</span> et en les remplissant de données d'images clés, où le canal 0 est le seul canal que vous pouvez utiliser et le type de piste est <span class="inline">seqtracktype_message</span>. Vous trouverez ci-dessous un exemple de création de cette piste :</p>
  <p class="code">var _seq = sequence_get(my_Seq);<br />
    var _k = array_create(2);<br />
    _k[0] = sequence_keyframe_new(seqtracktype_message);<br />
    _k[0].frame = 60;<br />
    _k[1] = sequence_keyframe_new(seqtracktype_message);<br />
    _k[1].frame = 120;<br />
    var _m1 = array_create(2);<br />
    _m1[0] = &quot;Hello&quot;;<br />
    _m1[1] = &quot;World&quot;;<br />
    var _m2 = array_create(1);<br />
    _m2[0] = &quot;This is a Broadcast Message&quot;;<br />
    var _d1 = array_create(1);<br />
    _d1[0] = sequence_keyframedata_new(seqtracktype_message);<br />
    _d1[0].channel = 0;<br />
    _d1[0].events = _m1;<br />
    var _d2 = array_create(1);<br />
    _d2[0] = sequence_keyframedata_new(seqtracktype_message);<br />
    _d2[0].channel = 0;<br />
    _d2[0].events = _m2;<br />
    _k[0].channels = _d1;<br />
    _k[1].channels = _d2;<br />
    _seq.messageEventKeyframes = _k;</p>
  <p>Vous remarquerez que le texte du message est transmis au canal de données de l'image clé sous forme de tableau. En effet, vous pouvez diffuser plusieurs messages sur la même image, et faire en sorte que différentes instances d'objets les écoutent et réagissent différemment en fonction du message qu'elles attendent.</p>
  <p>Une fois qu'un message de diffusion a été émis par la séquence, vous pouvez l'analyser en utilisant l'événement <i>Other</i> &gt; <i>Broadcast Message</i> dans les instances d'objets, qui est expliqué en détail <a href="../../../../The_Asset_Editors/Sequence_Properties/Broadcast_Messages.htm">ici</a>.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Sequences.htm">Séquences</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Sequence Events
Sequence Moments
Sequence Broadcast Messages
broadcast Messages
event_create
event_destroy
event_clean_up
event_step
event_step_begin
event_step_end
event_async_system
event_broadcast_message
-->
  <!-- TAGS
sequence_events_moments_broadcasts
-->
</body>
</html>