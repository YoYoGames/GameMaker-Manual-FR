<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>audio_falloff_set_model</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page explaining the function audio_falloff_set_model" />
  <meta name="rh-index-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
  <meta name="search-keywords" content="audio_falloff_set_model,audio_falloff_exponent_distance,audio_falloff_exponent_distance_clamped,audio_falloff_inverse_distance,audio_falloff_inverse_distance_clamped,audio_falloff_linear_distance,audio_falloff_linear_distance_clamped,audio_falloff_none" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1><span data-field="title" data-format="default">audio_falloff_set_model</span></h1>
  <p>Pour ajouter plus de polyvalence au moteur audio, <span data-keyref="GameMaker Name">GameMaker</span> vous permet de sélectionner le modèle de falloff qui convient à votre jeu. Ce modèle sera utilisé pour <b>toutes les</b> fonctions audio du jeu ou de l'application, et vous devez donc vous assurer que le modèle que vous choisissez est le bon, car chacun d'eux affectera la façon dont l'auditeur perçoit les sons que vous jouez par le biais d'émetteurs ou avec la fonction <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span>.</p>
  <p>Le modèle de falloff par défaut est <span class="inline">audio_falloff_none</span>, ce qui signifie qu'il n'y a pas de falloff lors de l'utilisation d'émetteurs ou de sons positionnés, sauf si vous modifiez le modèle de falloff.</p>
  <h2>Modèles de falloff</h2>
  <p>Lorsque vous jouez de l'audio via <span class="inline"><a href="audio_play_sound_at.htm">audio_play_sound_at()</a></span> ou que vous définissez le <a href="Audio_Emitters/audio_emitter_falloff.htm">falloff d'un émetteur</a>, vous devez définir trois arguments. Chacun d'entre eux est approprié à un modèle spécifique et affectera la façon dont le son final sera entendu par le joueur en fonction de la distance entre l'auditeur et la source. Les trois arguments sont les suivants :</p>
  <ul class="colour">
    <li><b>Distance de référence</b>: il s'agit de la distance par rapport à l'auditeur à laquelle le volume du son diffusé devrait normalement diminuer de moitié avant d'être influencé par le facteur d'atténuation ou la distance maximale spécifiée.<b></b></li>
    <li><b>Distance maximale</b>: elle définit la distance à laquelle il n'y aura plus d'atténuation du son source. Il peut s'agir du point où le son n'est plus entendu <i>ou</i> du point où le volume sonore ne descend plus en dessous du seuil minimal défini par le modèle choisi.<b></b></li>
    <li><b>Facteur de falloff</b>: Le facteur de falloff est utilisé dans l'atténuation de la distance basée sur le modèle de distance inverse et définit le seuil minimum final pour un son avec falloff.</li>
  </ul>
  <p>Les modèles de falloff qui sont affectés par ces arguments sont représentés dans <span data-keyref="GameMaker Name">GameMaker</span> par les constantes suivantes (le tableau indique également les calculs exacts utilisés) :</p>
  <table>
    <colgroup>
      <col />
      <col />
    </colgroup>
    <tbody>
      <tr>
        <th colspan="2"><span data-keyref="Type_Constant_Audio_Falloff_Type"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm" target="_blank">Constante de Falloff audio</a></span></th>
      </tr>
      <tr>
        <th>Constant</th>
        <th>Calcul du gain</th>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance</span></td>
        <td><span class="inline"><br />
            gain = (listener_distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (distance / reference_distance) ^ (-falloff_factor)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_exponent_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = ((distance / reference_distance) ^ (-falloff_factor)) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance</span></td>
        <td><span class="inline"><br />
            gain = reference_distance / (reference_distance + falloff_factor * (listener_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_inverse_distance_scaled</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            <br />
            gain = (reference_distance / (reference_distance + falloff_factor * (distance - reference_distance))) * (((maximum_distance - distance) / (maximum_distance - reference_distance)) ^ (distance / maximum_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance</span></td>
        <td><span class="inline"><br />
            distance = min(distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_linear_distance_clamped</span></td>
        <td><span class="inline"><br />
            distance = clamp(listener_distance, reference_distance, maximum_distance)<br />
            gain = (1 - falloff_factor * (distance - reference_distance) / (maximum_distance - reference_distance))</span></td>
      </tr>
      <tr>
        <td><span class="notranslate"><span class="inline">audio_falloff_none</span></td>
        <td><span class="inline"><br />
            gain = 1</span></td>
      </tr>
    </tbody>
  </table>
  <p>Les modèles &quot;<span class="inline">_scaled</span>&quot; sont échelonnés de telle sorte que les sons sont garantis de tomber entièrement à la distance maximale.</p>
  <p>Les graphiques suivants sont des représentations visuelles de la façon dont certaines des constantes ci-dessus fonctionnent et affectent le son joué :</p>
  <p><img alt="Distance Model Examples" class="center" src="../../../../assets/Images/Scripting_Reference/GML/Reference/Audio/Distance_Models.png" /></p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code"><span data-field="title" data-format="default">audio_falloff_set_model</span>(model);</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate">model</span></td>
        <td><span data-keyref="Type_Constant_Audio_Falloff_Type"><a href="../../../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/audio_falloff_set_model.htm" target="_blank">Constante de Falloff audio</a></span></td>
        <td><span class="notranslate">The <b>constant</b> used to set the falloff model.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code"><span data-field="title" data-format="default">audio_falloff_set_model</span>(audio_falloff_exponent_distance_clamped);<br />
    audio_play_sound_at(snd_Waterfall, x, y, 0, 100, 300, 1, true, 1);</p>
  <p>Le code ci-dessus définit le modèle de falloff et joue ensuite le son indexé dans la variable &quot;snd_Waterfall&quot;, qui sera mis en boucle à sa position dans la pièce, avec une référence de falloff de 100, une distance de falloff de 300, un facteur de falloff de 1 et une priorité faible.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Audio.htm">Audio</a></div>
        <div style="float:right">Suivant : <a href="audio_sound_gain.htm"><span class="notranslate">audio_sound_gain</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
audio_falloff_set_model
audio_falloff_exponent_distance
audio_falloff_exponent_distance_clamped
audio_falloff_inverse_distance
audio_falloff_inverse_distance_clamped
audio_falloff_linear_distance
audio_falloff_linear_distance_clamped
audio_falloff_none
-->
  <!-- TAGS
audio_falloff_set_model
-->
</body>
</html>