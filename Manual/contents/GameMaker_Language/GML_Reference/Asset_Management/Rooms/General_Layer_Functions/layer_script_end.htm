<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>fin_script_couche</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page outlining the function layer_script_end" />
  <meta name="rh-index-keywords" content="layer_script_end" />
  <meta name="search-keywords" content="layer_script_end" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>fin_script_couche</h1>
  <p>Avec cette fonction, vous pouvez attribuer une <a href="../../../../GML_Overview/Script_Functions.htm">fonction de script</a> à un calque et elle sera appelée après le rendu du calque. Lorsque vous ajoutez une fonction à un calque de cette manière, elle sera exécutée à la fin de <i>chacun des différents événements de dessin</i>. Vous pouvez donc vérifier dans la fonction assignée quel événement a actuellement terminé le rendu et adapter le code en conséquence. Cela peut être fait en vérifiant les paramètres <a href="../../Objects/Object_Events/event_type.htm"><span class="inline">event_type</span></a> et/ou la fonction <a href="../../Objects/Object_Events/event_number.htm"><span class="inline">event_number</span></a> (voir l'exemple étendu ci-dessous). Notez que la fonction <i>n'est pas</i> censée être appelée dans les événements de dessin ou les événements d'étape, mais qu'elle ne doit être appelée qu'au début de la pièce dans le <strong>code de création de pièce</strong> ou dans l'<strong>événement de création / </strong> <strong>événement de début de pièce</strong> d'une instance.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">layer_script_end(layer_id, script)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate">layer_id</span></td>
        <td><span data-keyref="Type_String">Chaîne</span> ou <span data-keyref="Type_ID_Layer">ID de couche</span></td>
        <td><span class="notranslate">The unique ID value of the layer to target (or the layer name as a string)</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">script</span></td>
        <td><span data-keyref="Type_Function_Script">Fonction de script</span></td>
        <td><span class="notranslate">The script function index to assign to the layer</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>Dans cet exemple étendu, nous allons tout d'abord vous montrer comment une simple fonction de script est structurée pour définir certaines données uniformes de <span class="notranslate">shader</span> de sorte que lorsque la couche donnée est dessinée, cette fonction sera exécutée et le site <span class="notranslate">shader</span> fonctionnera correctement. Dans l'exemple, il est intéressant de noter comment nous vérifions quel événement est appelé afin que le reste de la fonction ne soit exécuté que lors de l'événement spécifique sur lequel nous voulons qu'elle fonctionne - dans ce cas, uniquement lors de l'événement principal de dessin :</p>
  <p class="code">/// @function layer_shader_start();<br />
    function layer_shader_start()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                colour_to_find = shader_get_uniform(sShaderDemo5, &quot;f_Colour1&quot;);<br />
                colour_to_set = shader_get_uniform(sShaderDemo5, &quot;f_Colour2&quot;);<br />
                shader_set(s_ColourChanger);<br />
                shader_set_uniform_f(colour_to_find, 1,1,1 );<br />
                shader_set_uniform_f(colour_to_set, 1,0,0 );<br />
            }<br />
        }<br />
    }</p>
  <p>Nous aurions alors une fonction complémentaire pour réinitialiser le site <span class="notranslate">shader</span> une fois le dessin terminé :</p>
  <p class="code">/// @function layer_shader_end();<br />
    function layer_shader_end()<br />
    {<br />
        if (event_type == ev_draw) <br />
        {<br />
            if event_number == 0<br />
            {<br />
                shader_reset();<br />
            }<br />
        }<br />
    }</p>
  <p>Maintenant que nous avons défini nos fonctions de script pour définir le site <span class="notranslate">shader</span>, nous devons les affecter à une couche spécifique afin que celle-ci sache qu'elle doit les appeler. Cela peut être fait dans le code de création de la pièce, ou dans l'événement de création ou l'événement de démarrage de la pièce d'un objet contrôleur (il n'est pas nécessaire de les définir à chaque étape, mais plutôt une fois au démarrage de la pièce, ou lorsque la couche est initialement créée) :</p>
  <p class="code">var lay_id = layer_get_id(&quot;Instances&quot;);<br />
    layer_script_begin(lay_id, layer_shader_start);<br />
    layer_script_end(lay_id, layer_shader_end);</p>
  <p>Ce dernier bloc de code affecte les scripts à la couche.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="General_Layer_Functions.htm">Fonctions générales des couches</a></div>
        <div style="float:right">Suivant : <a href="layer_shader.htm"><span class="notranslate">layer_shader</span></a></div>
      </div>
      <h5><span data-keyref="Copyright Notice">© Copyright YoYo Games Ltd. 2022 All Rights Reserved</span></h5>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
layer_script_end
--><!-- TAGS
layer_script_end
--></body>
</html>