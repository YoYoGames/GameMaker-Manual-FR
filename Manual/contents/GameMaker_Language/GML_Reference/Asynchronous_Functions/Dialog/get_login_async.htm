<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>get_login_async</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for get_login_async" />
  <meta name="rh-index-keywords" content="get_login_async" />
  <meta name="search-keywords" content="get_login_async" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>get_login_async</h1>
  <p>Cette fonction ouvre une fenêtre qui demande à l'utilisateur de saisir un nom d'utilisateur et un mot de passe. Ces arguments peuvent être définis comme une chaîne vide ou vous pouvez stocker des valeurs précédemment saisies pour les utiliser si vous le souhaitez. Il s'agit d'une fonction asynchrone, et en tant que telle, <span data-keyref="GameMaker Name">GameMaker</span> <i>ne</i> bloque <i>pas</i> le périphérique sur lequel elle est exécutée en attendant une réponse, mais continue à exécuter les événements normalement. Une fois que l'utilisateur a saisi les détails et appuyé sur le bouton &quot;Okay&quot;, un événement asynchrone d'<b>interaction avec l'utilisateur</b> est déclenché qui, pour la durée de cet événement <i>uniquement</i>, aura une carte DS stockée dans la variable <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a>.</p>
  <p>Cette carte contiendra les deux clés, &quot;<strong>username&quot;</strong> et &quot;<strong>password</strong>&quot;, avec l'entrée utilisateur correspondante stockée dans chacune d'elles. Comme c'est une carte DS qui a été créée, elle peut ensuite être utilisée, par exemple, par la fonction <a href="../../File_Handling/Encoding_And_Hashing/json_encode.htm"><span class="inline">json_encode()</span></a> prête à être envoyée à un serveur ou écrite dans un fichier sur le périphérique choisi.</p>
  <p>Cette fonction renvoie un numéro d'index pour l'événement asynchrone qui a été déclenché, qui peut ensuite être vérifié dans l'événement correspondant afin que vous puissiez &quot;cibler&quot; des données spécifiques au cas où vous attendriez le déclenchement de plusieurs événements asynchrones (peut-être à partir d'une autre fonction).</p>
  <p class="note"><strong><em><span class="note">NOTE</span></em></strong><em> Cette fonction est <span data-keyref="Dialog for debug only"> <strong>réservée à un usage de débogage et de test</strong></span>et ne doit pas être utilisée dans les jeux publiés. Dans ce cas, vous devez créer une interface utilisateur personnalisée pour recevoir les entrées des joueurs, de manière à avoir un contrôle total sur l'apparence et le comportement des boîtes de dialogue.</em></p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">get_login_async(name, password);</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th><th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate">username</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The default user name</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">password</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The default password</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_ID_Async_Event">Async Request ID</span></p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>L'<b>événement de création (</b> par exemple) de l'objet qui contrôle la connexion de notre utilisateur aurait le code suivant :</p>
  <p class="code">ini_open(&quot;Profile.ini&quot;);<br />
    u = ini_read_string(&quot;User&quot;,&quot;0&quot;,&quot;&quot;);<br />
    p = ini_read_string(&quot;User&quot;,&quot;1&quot;,&quot;&quot;);<br />
    ini_close();<br />
    login = get_login_async(u,p);</p>
  <p>Le code ci-dessus ouvre un fichier ini (ou en crée un s'il n'existe pas) et récupère le nom et le mot de passe stockés dans ce fichier. S'ils n'existent pas, une chaîne vide (&quot;&quot;) est retournée par défaut. Ces valeurs sont ensuite utilisées dans <span class="inline">get_login_async()</span> pour demander à l'utilisateur son nom d'utilisateur et son mot de passe, l'index de la requête étant stocké dans la variable &quot;login&quot;. Notez qu'en attendant que l'utilisateur fournisse les informations nécessaires, le jeu et ses événements continuent de fonctionner normalement.</p>
  <p>Maintenant que le code asynchrone a été lancé, nous devons vérifier la valeur de retour dans l'<a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm">événement asynchrone pour les dialogues de</a> la manière suivante :</p>
  <p class="code">if ds_map_find_value(async_load, &quot;id&quot;) == login<br />
    {<br />
        u = ds_map_find_value(async_load, &quot;username&quot;);<br />
        p = ds_map_find_value(async_load, &quot;password&quot;);<br />
    }</p>
  <p>Le code ci-dessus vérifie la clé &quot;id&quot; de la carte <span class="inline">async_load</span> DS et si elle contient la même valeur que celle stockée dans la variable &quot;login&quot;, les détails de la carte sont alors lus dans les variables correspondantes que vous pouvez ensuite stocker ou utiliser pour vérifier les valeurs de la base de données, etc...</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Dialog.htm">Dialogue</a></div>
        <div style="float:right">Suivant : <a href="get_string_async.htm"><span class="notranslate">get_string_async</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
get_login_async
-->
  <!-- TAGS
get_login_async
-->
</body>
</html>