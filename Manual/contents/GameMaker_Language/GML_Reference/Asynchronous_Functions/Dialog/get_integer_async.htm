<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>get_integer_async</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for get_integer_async" />
  <meta name="rh-index-keywords" content="get_integer_async" />
  <meta name="search-keywords" content="get_integer_async" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>get_integer_async</h1>
  <p>Cette fonction ouvre une fenêtre et affiche un message ainsi qu'un espace permettant à l'utilisateur de saisir une valeur (qui contiendra la valeur par défaut fournie pour commencer). Il s'agit d'une fonction asynchrone, et en tant que telle, <span data-keyref="GameMaker Name">GameMaker</span> <i>ne</i> bloque <i>pas</i> le périphérique sur lequel elle est exécutée en attendant une réponse, mais continue à exécuter les événements normalement. Une fois que l'utilisateur a tapé sa chaîne de caractères et appuyé sur le bouton &quot;Okay&quot;, un événement asynchrone est déclenché. <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Dialog.htm"><b>Dialogue</b></a> est déclenché et, pendant la durée de cet événement <i>uniquement</i>, une carte DS est stockée dans la variable <a href="../../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a>.</p>
  <p>Cette carte contiendra les trois clés, &quot;<span class="inline">id</span>&quot;, &quot;<span class="inline">status</span>&quot; et &quot;<span class="inline">value</span>&quot;. &quot;<span class="inline">id</span>&quot; est la valeur renvoyée par la fonction lorsqu'elle est appelée, le &quot; statut &quot; sera soit <span class="inline">true</span> si le bouton &quot; Okay &quot; a été pressé, soit <span class="inline">false</span> si le message a été annulé (le cas échéant, car toutes les plateformes cibles ne permettent pas d'annuler les messages). Enfin, &quot;<span class="inline">value</span>&quot; renverra le nombre entier que l'utilisateur a entré sous forme de chaîne (une chaîne vide &quot;&quot; sera renvoyée si aucune entrée n'a été donnée).</p>
  <p class="note"><strong><em><span class="note">NOTE</span></em></strong><em> Cette fonction est <span data-keyref="Dialog for debug only"> <strong>réservée à un usage de débogage et de test</strong></span>et ne doit pas être utilisée dans les jeux publiés. Dans ce cas, vous devez créer une interface utilisateur personnalisée pour recevoir les entrées des joueurs, de manière à avoir un contrôle total sur l'apparence et le comportement des boîtes de dialogue.</em></p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">get_integer_async(string, default);</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate">string</span></td>
        <td><span data-keyref="Type_String">Chaîne de caractères</span></td>
        <td><span class="notranslate">The message to show in the dialog.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">default</span></td>
        <td><span data-keyref="Type_Real">Real</span></td>
        <td><span class="notranslate">The default value.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_ID_Async_Event">Async Request ID</span></p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>L'<b>événement de pression de la souris gauche</b> (par exemple) de l'objet qui affiche le message aurait le code suivant :</p>
  <p class="code">msg = get_integer_async(&quot;How old are you?&quot;, 0);</p>
  <p>L'exemple ci-dessus affiche un message demandant à l'utilisateur de saisir une chaîne de caractères et d'appuyer sur &quot;Okay&quot;. L'identifiant de la fonction est stocké dans la variable &quot;msg&quot; et sera utilisé dans l'événement asynchrone Dialogs, comme indiqué ci-dessous :</p>
  <p class="code">var i_d = ds_map_find_value(async_load, &quot;id&quot;);<br />
    if i_d == msg<br />
    {<br />
        if ds_map_find_value(async_load, &quot;status&quot;)<br />
        {<br />
            global.Age = ds_map_find_value(async_load, &quot;value&quot;);<br />
        }<br />
    }</p>
  <p>Le code ci-dessus vérifie la clé &quot;<span class="inline">id</span>&quot; de l'adresse <span class="inline">DS Map</span> retournée par rapport à la valeur stockée dans la variable &quot; msg &quot;. S'ils sont identiques, il vérifie ensuite si &quot;Okay&quot; a été pressé (plutôt que la fenêtre a été fermée/annulée) et s'il retourne <span class="inline">true</span>, il définit alors une variable globale à partir de l'entier retourné.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Dialog.htm">Dialogue</a></div>
        <div style="float:right">Suivant : <a href="show_message_async.htm"><span class="notranslate">show_message_async</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
get_integer_async
-->
  <!-- TAGS
get_integer_async
-->
</body>
</html>