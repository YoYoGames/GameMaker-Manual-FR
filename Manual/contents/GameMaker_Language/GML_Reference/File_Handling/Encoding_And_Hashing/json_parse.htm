<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>json_parse</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../../assets/css/default.css" type="text/css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for json_parse" />
  <meta name="rh-index-keywords" content="json_parse" />
  <meta name="search-keywords" content="json_parse" />
  <meta name="is_pure" content="true" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>json_parse</h1>
  <p>Cette fonction peut être utilisée pour analyser une chaîne JSON (soit créée précédemment à l'aide de <a href="json_stringify.htm"><span class="notranslate">json_stringify</span></a> ou à partir de toute source valide), et la convertir en une collection de tableaux ou <span class="notranslate">structs</span>, où un tableau est l'équivalent d'un tableau JSON et un <span class="notranslate">struct</span> est l'équivalent d'un objet JSON. Vous fournissez la chaîne à analyser et la fonction renvoie le tableau de premier niveau ou <span class="notranslate">struct</span> qui peut ensuite être utilisé dans votre code. Si vous n'êtes pas sûr du contenu du JSON, vous pouvez utiliser les différentes <a href="../../Variable_Functions/Variable_Functions.htm">fonctions variables</a> (telles que <a href="../../Variable_Functions/typeof.htm"><span class="inline">typeof()</span></a> et <a href="../../Variable_Functions/variable_struct_get_names.htm"><span class="inline">variable_struct_get_names()</span></a> dans le cas d'un <span class="notranslate">struct</span>) pour vérifier le contenu retourné. Notez que si vous essayez d'analyser une valeur invalide (c'est-à-dire qui n'est pas une chaîne de caractères), une exception sera levée.</p>
  <p>Lorsque vous utilisez cette fonction, vous devez tenir compte de certains éléments importants :</p>
  <ul class="colour">
    <li>Si la chaîne JSON fournie comprend <span class="inline">undefined</span> comme valeur pour une propriété, elle sera convertie en <span class="inline">pointer_null</span> lors de son analyse.</li>
    <li>Cette fonction ne permet de charger que des fichiers JSON dont la limite d'imbrication maximale est de 128.</li>
  </ul>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">json_parse(json)</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th><th>Type</th>
        <th>Description</th>
     </tr>
      <tr>
        <td><span class="notranslate">json</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The JSON string to parse</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Struct">Struct</span> or <span data-keyref="Type_Array">Array</span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">json = &quot;{\&quot;myObj\&quot;: { \&quot;apples\&quot;:10, \&quot;oranges\&quot;:12, \&quot;potatoes\&quot;:100000, \&quot;avocados\&quot;:0 }, \&quot;myArray\&quot;:[0, 1, 2, 2, 4, 0, 1, 5, 1]}&quot;;<br />
    <br />
    data = json_parse(json);<br />
    show_debug_message(data);
  </p>
  <p>Le code ci-dessus crée une nouvelle chaîne contenant un objet JSON valide, puis appelle <span class="inline">json_parse()</span> pour convertir cette chaîne en <span class="notranslate">GML</span> <span class="notranslate">struct</span>. Il imprime ensuite le résultat dans le journal de débogage.</p>
  <p class="note"><span class="note">REMARQUE</span> Vous remarquerez que la chaîne JSON contient une barre oblique inverse<span class="inline2">(\)</span> avant chaque guillemet double (<span class="inline2">&quot;</span>) :<br>
    <br>
   <span class="inline2">json = &quot;{ \ <strong>&quot; </strong></span>monObj<br>
    <br>
    Cela permet de s'assurer que le guillemet double est lu comme un caractère réel dans la chaîne, au lieu d'être lu comme une partie du code et de fermer la chaîne prématurément. De cette façon, nous utilisons une barre oblique inverse pour &quot;échapper&quot; au guillemet double.<br>
    <br>
    Cependant, si vous chargez JSON à partir d'un fichier externe, il n'est pas nécessaire d'échapper aux caractères dans ce fichier, ce qui pourrait entraîner des erreurs lors de l'analyse.
  </p>
  <hr />
  <p>Après avoir analysé la chaîne JSON ci-dessus, si vous connaissez sa structure, vous pouvez utiliser diverses <a href="../../Variable_Functions/Variable_Functions.htm">fonctions variables</a> pour vérifier et lire son contenu :</p>
  <p class="code">data = json_parse(json);<br />
    <br />
    // Check if the struct has myObj variable<br />
    if variable_struct_exists(data, &quot;myObj&quot;)<br />
    {<br />
        // Check if it&#39;s a struct<br />
        if is_struct(data.myObj)<br />
        {<br />
            // Print all struct members to the log<br />
            var _names = variable_struct_get_names(data.myObj);<br />
            var _str = &quot;&quot;;<br />
            for (var i = 0; i &lt; array_length(_names); i++;)<br />
            {<br />
                _str = _names[i] + &quot;: &quot; + string(variable_struct_get(data.myObj, _names[i]));<br />
                show_debug_message(_str);<br />
            }<br />
        }<br />
    }<br />
    <br />
    // Check if the struct has myArray variable<br />
    if variable_struct_exists(data, &quot;myArray&quot;)<br />
    {<br />
        // Check if it&#39;s an array<br />
        if is_array(data.myArray)<br />
        {<br />
            show_debug_message(data.myArray);<br />
        }<br />
    }
  </p>
  <p>Le code ci-dessus analysera la chaîne JSON donnée, générant la sortie console suivante :</p>
  <p class="code">oranges: 12<br />
    potatoes: 100000<br />
    avocados: 0<br />
    apples: 10<br />
    [ 0,1,2,2,4,0,1,5,1 ]</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Encoding_And_Hashing.htm">Codage des fichiers</a></div>
        <div style="float:right">Suivant : <a href="base64_encode.htm"><span class="notranslate">base64_encode</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
json_parse
-->
  <!-- TAGS
json_parse
-->
</body>
</html>