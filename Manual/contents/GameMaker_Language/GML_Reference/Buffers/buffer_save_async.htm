<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>buffer_save_async</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for buffer_save_async" />
  <meta name="rh-index-keywords" content="buffer_save_async" />
  <meta name="search-keywords" content="buffer_save_async" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>buffer_save_async</h1>
  <p>Cette fonction permet de sauvegarder une partie du contenu d'un <span class="notranslate">buffer</span> dans un fichier, prêt à être relu en mémoire à l'aide de la fonction <a href="buffer_load.htm"><span class="inline">buffer_load()</span></a> (ou l'une des autres fonctions de chargement de <span class="notranslate">buffers</span>). Le &quot;décalage&quot; définit la position de départ dans le <span class="notranslate">buffer</span> pour la sauvegarde (en octets), et la &quot;taille&quot; est la taille de la zone du <span class="notranslate">buffer</span> à sauvegarder à partir de ce décalage (également en octets). Cette fonction fonctionne de manière asynchrone, et le jeu continuera donc de tourner pendant la sauvegarde, et tous les fichiers sauvegardés à l'aide de cette fonction seront placés dans un dossier &quot;par défaut&quot;. Ce dossier <i>n'a pas</i> besoin d'être inclus dans le nom du fichier car il est ajouté automatiquement par <span class="notranslate">GameMaker</span>. Par exemple, le chemin du nom de fichier &quot;<span class="inline">Data\Player_Save.sav</span>&quot; sera en fait enregistré dans &quot;<span class="inline">default\Data\Player_Save.sav</span>&quot;. Toutefois, si vous chargez ensuite le fichier à l'aide de la fonction <a href="buffer_load_async.htm"><span class="inline">buffer_load_async()</span></a>vous n'avez pas non plus besoin de fournir la partie &quot;par défaut&quot; du chemin d'accès (mais toute autre fonction de fichier <i>le</i> demandera, sauf sur les consoles Xbox One, PS4 et <span class="notranslate">Nintendo</span> <span class="notranslate">Switch</span>).</p>
  <p class="note"><b>NOTE</b>: En HTML5, &quot;default/&quot; n'est pas ajouté automatiquement et vous devrez peut-être en tenir compte dans votre code.</p>
  <p>La fonction renverra une valeur d'ID unique et déclenchera un <a href="../../../The_Asset_Editors/Object_Properties/Async_Events/Save_Load.htm">événement de sauvegarde/chargement asynchrone</a> où vous pourrez utiliser l'ID renvoyé pour vérifier la valeur d'ID de <span class="inline">async_load</span>, comme le montre l'exemple étendu ci-dessous. La carte <a href="../../GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a> dans l'événement aura les deux paires clé/valeur suivantes :</p>
  <ul>
    <li><b>&quot;id&quot; : </b>l'ID de la fonction asynchrone tel que retourné par la fonction de sauvegarde.</li>
    <li><b>&quot;status&quot; : </b>retournera <span class="inline">true</span> si les données ont été sauvegardées/chargées correctement, et <span class="inline">false</span> sinon.</li>
  </ul>
  <p>Notez que vous pouvez enregistrer plusieurs <span class="notranslate">buffers</span> en une seule fois en appelant cette fonction plusieurs fois entre les appels à <a href="buffer_async_group_begin.htm"><span class="inline">buffer_async_group_begin()</span></a> et <a href="buffer_async_group_end.htm"><span class="inline">buffer_async_group_end()</span></a> (voir ces fonctions pour plus d'informations à ce sujet).</p>
  <p class="note"><b>REMARQUE</b>: En HTML5, les résultats renvoyés sont enregistrés sous forme de chaînes codées en base64 lorsqu'ils sont enregistrés dans un fichier.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">buffer_save_async(buffer, filename, offset, size);</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th><th>Type</th>
        <th>Description</th>
     </tr>
      <tr>
        <td><span class="notranslate">buffer</span></td><td><span data-keyref="Type_ID_Buffer"></span></td>
        <td><span class="notranslate">The index of the buffer to save.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">filename</span></td><td><span data-keyref="Type_String"></span></td>
        <td><span class="notranslate">The name of the file to save as.</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">offset</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The offset within the buffer to save from (in bytes).</span></td>
     </tr>
      <tr>
        <td><span class="notranslate">size</span></td><td><span data-keyref="Type_Real"></span></td>
        <td><span class="notranslate">The size of the buffer area to save (in bytes).</span></td>
     </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_ID_Async_Event">Async Request ID</span></p>
  <p> </p>
  <h4>Exemple étendu :</h4>
  <p>La fonction <span class="inline">buffer_save_async()</span> peut être appelée à partir de n'importe quel événement, et comme elle est asynchrone, le rappel peut être presque instantané ou prendre plusieurs secondes. L'appel de la fonction est simple et ressemble à quelque chose comme ceci :</p>
  <p class="code">saveid = buffer_save_async(buff, &quot;Player_Save.sav&quot;, 0, 16384);</p>
  <p>Le code ci-dessus enregistre le contenu de <span class="notranslate">buffer</span> &quot;<i>buff</i>&quot; dans le fichier de sauvegarde donné, en stockant l'ID de l'appel de fonction dans la variable &quot;<i>saveid</i>&quot;. Lorsque la sauvegarde est terminée, l'événement asynchrone Save/Load sera déclenché et vous pourrez analyser la carte <span class="inline">async_load</span> pour trouver l'ID correct de la fonction, comme ceci :</p>
  <p class="code">if ds_map_find_value(async_load, &quot;id&quot;) == saveid<br />
    {<br />
        if ds_map_find_value(async_load, &quot;status&quot;) == false<br />
        {<br />
            show_debug_message(&quot;Save failed!&quot;);<br />
        }<br />
    }</p>
  <p>Le code ci-dessus vérifiera d'abord l'id de la carte DS qui a été créée, puis le statut de la callback, en affichant un message de débogage s'il y a eu des problèmes.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="Buffers.htm">Tampons</a></div>
        <div style="float:right">Suivant : <a href="buffer_load.htm"><span class="notranslate">buffer_load</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
buffer_save_async
-->
  <!-- TAGS
buffer_save_async
-->
</body>
</html>