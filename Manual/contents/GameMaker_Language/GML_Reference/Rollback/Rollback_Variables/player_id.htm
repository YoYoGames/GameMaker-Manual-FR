<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>numéro de joueur</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="template" content="../../../../assets/masterpages/Manual_Keyword_Page.htt" />
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="condition-tags" content="Export:Beta" />
  <meta name="rh-index-keywords" content="player_id" />
  <meta name="search-keywords" content="player_id" />
</head>
<body>
  <h1>numéro de joueur</h1>
  <p>Lorsque vous utilisez <a href="../Rollback_Functions/rollback_define_player.htm"><span class="inline">rollback_define_player()</span></a> pour définir un objet joueur, le système crée automatiquement une instance de cet objet pour chaque joueur. Chaque instance de cet objet reçoit la variable <span class="inline">player_id</span>, qui stocke l'ID de ce joueur.</p>
  <p>Cet ID commence à 0, qui est initialement l'hôte lui-même. Tous les joueurs à partir de 1 sont des &quot;pairs&quot; qui ont rejoint le jeu.</p>
  <p>Si vous n'utilisez pas <span class="inline">rollback_define_player()</span>, cette variable ne sera créée pour aucun objet. Dans ce cas, les instances de joueurs et leurs identifiants doivent être gérés manuellement, comme expliqué dans la section <a data-xref="{text}" href="../Rollback_System.htm#h1">Définition d'un objet joueur</a>.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">player_id;</p>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Real"><a href="../../../../../GameMaker_Language/GML_Overview/Data_Types.htm" target="_blank">Real</a></span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">// Create event<br />
    if (player_id == 0)<br />
    {<br />
        x = 300;<br />
    }<br />
    else if (player_id == 1)<br />
    {<br />
        x = 500;<br />
    }</p>
  <p>Le code ci-dessus modifie la position X de l'instance du lecteur en fonction de son ID.</p>
  <p>Vous pouvez également utiliser cet ID comme un index de tableau, par exemple, pour stocker les scores de tous les joueurs :</p>
  <p class="code">// Step event<br />
    var _coin = instance_place(x, y, obj_coin);<br />
    if (_coin != noone)<br />
    {<br />
        obj_game.scores[player_id]++;<br />
        instance_destroy(_coin);<br />
    }<br />
    <br />
    // Draw event<br />
    var _my_score = obj_game.scores[player_id];<br />
    draw_text(x, y, _my_score);
  </p>
  <p>Le code de l'événement Step ci-dessus augmente le score du joueur dans un tableau de <span class="inline2">obj_game</span> lorsqu'il entre en collision avec une pièce. Cette instance de pièce est alors détruite.</p>
  <p>Le code de l'événement Draw ci-dessus récupère le score du joueur dans le même tableau, et dessine sa valeur.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Retour : <a data-xref="{title}" href="Rollback_Variables.htm">Variables de retour en arrière</a></div>
        <div>Suivant : <a data-xref="{title}" href="player_local.htm">player_local</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
player_id
-->
  <!-- TAGS
player_id
-->
</body>
</html>