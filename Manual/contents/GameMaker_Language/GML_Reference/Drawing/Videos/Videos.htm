<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Lecture vidéo</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Overview of video drawing functions" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="videos" />
  <meta name="search-keywords" content="videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1 id="h1">Lecture vidéo</h1>
  <h2>Comment lire les vidéos ?</h2>
  <p>Suivez ces étapes pour charger des vidéos sur <span class="notranslate">runtime</span> et les lire :</p>
  <ul class="colour">
    <li>Ajoutez un fichier vidéo aux <a data-xref="{text}" href="../../../../Settings/Included_Files.htm#h">fichiers inclus</a> (répertoire<span class="inline2">/datafiles</span> ) de votre projet.</li>
    <li>Chargez la vidéo en utilisant <span class="inline"><a href="video_open.htm">video_open()</a></span>.
      <ul>
        <li>Vous pouvez également charger une vidéo à partir d'une URL.</li>
      </ul>
    </li>
    <li>Dessinez-la dans un événement Draw à l'aide de <span class="inline"><a href="video_draw.htm">video_draw()</a></span>.
      <ul>
        <li>Cette fonction dessine la vidéo sur une surface interne, qu'elle renvoie dans le cadre de son tableau de retour.</li>
        <li>Vous devez dessiner cette surface manuellement en utilisant <span class="inline"><a href="../Surfaces/draw_surface.htm">draw_surface()</a></span> pour que la vidéo apparaisse.
          <ul>
            <li>Le dessin de <a data-xref="{title}" href="YUV_Videos.htm">vidéos YUV</a> nécessite des étapes supplémentaires.</li>
          </ul>
        </li>
      </ul>
    </li>
    <li>Lorsque la vidéo est terminée, supprimez-la de la mémoire en appelant <span class="inline"><a href="video_close.htm">video_close()</a></span>.
      <ul>
        <li>Utilisez les <a href="#h">Callbacks asynchrones</a> pour exécuter du code lorsque la vidéo se termine.</li>
      </ul>
    </li>
  </ul>
  <h2>Codecs vidéo et licences</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> n'est livré avec aucun codec et utilise les codecs présents sur la plate-forme sur laquelle le jeu est exécuté. Cela signifie que vos vidéos doivent être encodées dans un format qui peut être décodé sur la ou les plateformes cibles prévues.</p>
  <p>L'utilisation de certains formats peut vous obliger à payer des droits de licence en fonction de la licence du codec concerné et des revenus de votre jeu. Dans ce cas, le développeur sera légalement responsable de tous les droits à payer aux propriétaires du codec. Les codecs font également l'objet d'une licence différente sur chaque plate-forme. Il convient donc d'être prudent pour les jeux distribués sur plusieurs plates-formes.</p>
  <p>Notez que les formats vidéo (tels que <span class="inline2">.mp4</span>, <span class="inline2">.avi</span>, <span class="inline2">.mkv</span>, etc.) sont simplement des conteneurs qui enveloppent les flux <strong>vidéo</strong> et <strong>audio</strong>, qui peuvent tous deux être codés séparément et nécessiter des licences distinctes.</p>
  <p>Pour la distribution sur les plateformes de consoles, vérifiez auprès de votre représentant de compte quels sont les formats que vous êtes autorisé à utiliser sans avoir à payer de frais de licence supplémentaires.</p>
  <h2>Formats</h2>
  <p>Les formats vidéo que vous pouvez charger et lire dans votre jeu dépendent de votre plate-forme cible et des codecs qui sont pris en charge par cette plate-forme.</p>
  <h2>Fonctions</h2>
  <p>Vous pouvez charger, lire et manipuler des fichiers vidéo sur <span class="notranslate">runtime</span> à l'aide des fonctions suivantes :</p>
  <ul class="colour">
    <li><a data-xref="{title}" href="video_open.htm">vidéo_ouvert</a></li>
    <li><a data-xref="{title}" href="video_close.htm">vidéo_close</a></li>
    <li><a data-xref="{title}" href="video_draw.htm">video_draw</a></li>
    <li><a data-xref="{title}" href="video_set_volume.htm">video_set_volume</a></li>
    <li><a href="video_pause.htm">vidéo_pause</a></li>
    <li><a href="video_resume.htm">CV vidéo</a></li>
    <li><a href="video_enable_loop.htm">video_enable_loop</a></li>
    <li><a href="video_seek_to.htm">recherche_vidéo</a></li>
  </ul>
  <p> </p>
  <p>Les fonctions suivantes sont utilisées pour obtenir des informations sur la vidéo actuellement chargée :</p>
  <ul class="colour">
    <li><a href="video_is_looping.htm">video_s_looping</a></li>
    <li><a href="video_get_volume.htm">video_get_volume</a></li>
    <li><a href="video_get_duration.htm">vidéo_get_duration </a></li>
    <li><a href="video_get_position.htm">video_get_position</a></li>
    <li><a href="video_get_status.htm">vidéo_get_status</a></li>
    <li><a href="video_get_format.htm">vidéo_get_format </a></li>
  </ul>
  <h2 id="h">Callbacks asynchrones</h2>
  <p>L'événement <a href="../../../../The_Asset_Editors/Object_Properties/Async_Events/Social.htm">Async Social</a> est déclenché aux étapes indiquées ci-dessous, avec la clé <span class="inline2">&quot;type&quot;</span> dans sa carte <span class="inline2">async_load</span> définie sur la valeur donnée :</p>
  <ul class="colour">
    <li><span class="inline2">&quot;video_start&quot;</span>: Lorsque la vidéo commence à être lue, c'est-à-dire lorsque son <a href="video_get_status.htm">statut</a> passe de &quot; <span class="inline2">video_status_preparing&quot;</span> à <span class="inline2">&quot;video_status_playing&quot;</span>.</li>
    <li><span class="inline2">&quot;video_end&quot;</span>: Lorsque la vidéo se termine. Ceci ne se déclenche pas lorsque la vidéo est <a href="video_enable_loop.htm">réglée en boucle</a>.</li>
  </ul>
  <p>Voici un exemple d'un événement social asynchrone à l'écoute de rappels vidéo :</p>
  <p class="code">var _type = async_load[? &quot;type&quot;];<br />
    <br />
    if (_type == &quot;video_start&quot;)<br />
    {<br />
        obj_video.display_video = true;<br />
    }<br />
    else if (_type == &quot;video_end&quot;)<br />
    {<br />
        obj_video.display_video = false;<br />
        video_close();<br />
    }
  </p>
  <p>Le code ci-dessus lit le type à partir de la carte <span class="inline2">async_load</span>. Lorsque la vidéo démarre, il définit une variable dans un objet à <span class="inline2">true</span>, afin de pouvoir afficher la vidéo.</p>
  <p>Lorsque la vidéo se termine, il met cette même variable à <span class="inline2">false</span>, puis appelle <span class="inline"><a href="video_close.htm">video_close()</a></span> pour supprimer la vidéo de la mémoire.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Retour : <a data-xref="{title}" href="../Drawing.htm">Dessin</a></div>
        <div>Suivant : <a data-xref="{title}" href="../Colour_And_Alpha/Colour_And_Alpha.htm">Couleur et alpha</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
	Videos
-->
  <!-- TAGS
-->
</body>
</html>