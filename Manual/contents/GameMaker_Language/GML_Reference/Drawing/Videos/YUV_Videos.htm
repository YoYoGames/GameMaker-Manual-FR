<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <title>Vidéos YUV</title>
  <meta name="topic-status" content="Draft" />
  <link rel="stylesheet" type="text/css" href="../../../../assets/css/default.css" />
  <script src="../../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Gurpreet S. Matharoo" />
  <meta name="topic-comment" content="Information on drawing YUV videos" />
  <meta name="template" content="../../../../assets/masterpages/Manual_Page.htt" />
  <meta name="rh-index-keywords" content="yuv videos" />
  <meta name="search-keywords" content="yuv videos" />
  <meta name="condition-tags" content="" />
</head>
<body>
  <h1>Vidéos YUV</h1>
  <p>Les plates-formes qui utilisent le format de couleur YUV pour les vidéos nécessitent des étapes supplémentaires pour dessiner ces vidéos. Il s'agit d'utiliser un <span class="notranslate">shader</span> pour dessiner deux surfaces sur un quad <span class="notranslate">primitive</span>.</p>
  <p>Lisez d'abord la page de référence <span class="inline"><a href="video_draw.htm">video_draw()</a></span> pour savoir quelles données cette fonction renvoie pour les vidéos YUV, puis continuez à lire ci-dessous pour obtenir des instructions sur l'utilisation de ces données pour dessiner la vidéo.</p>
  <h2>Shader YUV</h2>
  <p>Créez un actif <span class="notranslate">shader</span> dans votre projet, et remplacez son code Fragment <span class="notranslate">Shader</span> (<span class="inline2">.fsh</span>) par celui-ci :</p>
  <pre>//
// fragment CUSTOM <span class="notranslate">shader</span> pour la gestion du contenu YUV
//
variable vec2 v_vTexcoord ;
variable vec4 v_vColour ;
échantillonneur2D uniforme v_chroma ;
const float x = 1.164383 ;
const float y = 1.138393 ;
const float z = 1.138393 ;
const vec3 src_bias = vec3(16.0 / 255.0, 128.0 / 255.0, 128.0 / 255.0) ;
const mat3 src_xform = mat3(1.00000000 * x, 0.00000000 * y, 1.57480000 * z,
                            1.00000000 * x, -0.18732427 * y, -0.46812427 * z,
			    1.00000000 * x, 1.85560000 * y, 0.00000000 * z) ;
void main()
{
    float yy = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y)).r ;
    vec2 cbcr = texture2D(v_chroma, vec2(v_vTexcoord.x, v_vTexcoord.y)).rg ;
    vec3 yuv = vec3(yy, cbcr) ;
    yuv -= src_bias ;
    yuv *= src_xform ;
    gl_FragColor = vec4(yuv, 1.0) ;
}
  
</pre>
  <h2>Obtenir un échantillon</h2>
  <p>Dans l'événement Create de votre objet, récupérez l'ID de l'échantillonneur de l'uniforme <span class="inline2">v_chroma</span> <span class="notranslate">shader</span>, uniquement si la vidéo est YUV :</p>
  <pre>var _format = video_get_format() ;
si (_format == video_format_yuv)
{
    videochromasampler = shader_get_sampler_index(shader_YUV, &quot;v_chroma&quot;) ;
}
</pre>
  <h2 id="h">Dessiner la vidéo</h2>
  <p>Dans l'événement Draw de votre objet, appelez <span class="inline"><a href="video_draw.htm">video_draw()</a></span>, et si la première position du tableau est <strong>0</strong> (ce qui signifie que la vidéo est en cours de lecture), dessinez la vidéo.</p>
  <p>Dans le code ci-dessous, nous utilisons une instruction de commutation sur la fonction <span class="inline"><a href="video_get_format.htm">video_get_format()</a></span>. Si la vidéo utilise le format RGBA, elle dessine simplement la surface à la position <span class="inline2">[1]</span> du tableau.</p>
  <p>Si la vidéo utilise le format YUV, elle utilise le site <span class="notranslate">shader</span> pour dessiner les deux surfaces (en positions <span class="inline2">[1]</span> et <span class="inline2">[2]</span>) sur un quadrant <span class="notranslate">primitive</span>.</p>
  <pre>var _data = video_draw() ;
si(_data[0] == 0)
{
	switch(video_get_format())
	{
		cas video_format_rgba :
			var _surf = _data[1] ;
			draw_surface(_surf,0,0) ;
		pause ;
	
		// #### PARTIE YUV ICI ####
		cas video_format_yuv :
			var _surf = _data[1] ;
			var _chromasurf = _data[2] ;
			if(surface_exist(_surf) and surface_exist(_chromasurf))
			{
				shader_set(shader_YUV) ;
			
				var _tex_id = surface_get_texture(_surf) ;
				var _chroma_tex_id = surface_get_texture(_chromasurf) ;
				texture_set_stage(videochromasampler, _chroma_tex_id) ;
				gpu_set_texfilter(false) ;
			
				draw_primitive_begin_texture(pr_trianglestrip, _tex_id) ;
			        draw_vertex_texture(0, 0, 0, 0) ;
				draw_vertex_texture(surface_get_width(_chromasurf), 0, 1, 0) ;
				draw_vertex_texture(0, surface_get_height(_chromasurf), 0, 1) ;
				draw_vertex_texture(surface_get_width(_chromasurf), surface_get_height(_chromasurf), 1, 1) ;
				draw_primitive_end() ;
			
				gpu_set_texfilter(true) ;
				shader_reset() ;
			}
		break ;
	}
}
  </pre>
  <p>Le code sous le <span class="inline2">cas video_format_yuv :</span> fait ce qui suit :</p>
  <ul class="colour">
    <li>Obtient la surface vidéo<span class="inline2">(_surf</span>) et la surface chromatique<span class="inline2">(_chromasurf</span>).</li>
    <li>S'assure qu'ils existent, en utilisant <span class="inline"><a href="../Surfaces/surface_exists.htm">surface_exist()</a></span>
      <ul>
        <li>Définit le <span class="notranslate">shader</span> à <span class="inline2">shader_YUV</span> (qui est notre nouvelle création YUV <span class="notranslate">shader</span>)</li>
        <li>Récupère les textures des deux surfaces</li>
        <li>Affecte la texture de la surface chromatique à l'échantillonneur que nous avons récupéré dans l'événement Create.</li>
        <li>Désactive le filtrage des textures</li>
        <li>Commence à dessiner une bande triangulaire <span class="notranslate">primitive</span>, à laquelle est attribuée la texture de la surface vidéo.</li>
        <li>Dessine un rectangle pour couvrir la surface vidéo, en utilisant la largeur et la hauteur de la surface chromatique pour ce rectangle.</li>
        <li>Termine la primitive</li>
        <li>Réactive le filtrage des textures et réinitialise le shader.</li>
      </ul>
    </li>
  </ul>
  <p>Ici, la surface vidéo principale est dessinée par <span class="notranslate">primitive</span>, et la surface chromatique est fusionnée avec elle par <span class="notranslate">shader</span>. C'est la raison pour laquelle la texture de la surface chromatique a été transmise à <span class="notranslate">shader</span> via un échantillonneur.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div>Retour : <a data-xref="{text}" href="Videos.htm#h1">Lecture de la vidéo</a></div>
        <div>Suivant : <a data-xref="{title}" href="video_set_volume.htm">video_set_volume</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
YUV	Videos
-->
  <!-- TAGS
-->
</body>
</html>