<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>gml_pragma</title>
  <meta name="generator" content="Adobe RoboHelp 2022" />
  <link rel="stylesheet" href="../../../assets/css/default.css" type="text/css" />
  <script src="../../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Reference page for gml_pragma" />
  <meta name="rh-index-keywords" content="gml_pragma" />
  <meta name="search-keywords" content="gml_pragma" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>gml_pragma</h1>
  <p>La fonction <span class="inline">gml_pragma</span> affecte la façon dont la cible donnée compile votre code et doit être appelée avec les différentes commandes pour optimiser davantage la compilation finale de votre projet. Ces commandes sont effectivement <i>prétraitées</i> avant que le jeu ne soit compilé et la fonction peut donc être placée n'importe où dans votre projet et elle sera toujours traitée avant que le jeu ne soit entièrement compilé. Les commandes disponibles sont les suivantes :</p>
  <ul class="colour">
    <li>&quot;<b>forceinline</b>&quot; - Lorsque la fonction est appelée avec le pragma &quot; forceinline &quot; dans une <b>fonction de script</b>, le YYC compilera le projet avec la fonction en ligne, plutôt que référencée. Cela donne un avantage supplémentaire en termes de traitement, mais il faut être prudent lors de l'utilisation de ce pragme car il gonflera également la taille du fichier exécutable final, en particulier si le code en ligne est important et/ou utilisé à plusieurs endroits différents, et augmentera considérablement le temps de compilation. Notez que ce pragma <b>n'</b>est <b>valable que lors de la construction en utilisant le YYC</b>.</li>
    <li>&quot;<b>global</b>&quot;, &quot;<b>[code gml]</b>&quot; - Le pragme &quot;global&quot; vous permet d'appeler un code <span class="notranslate">GML</span> formaté comme une chaîne de caractères, à une portée <b>globale</b>, au moment de la compilation, avant l'exécution de la première pièce du jeu. Par exemple :
     <p class="code">gml_pragma(&quot;global&quot;, &quot;Init()&quot;);</p>
      Ceci appellera la fonction de script &quot;Init&quot; avant l'exécution de la première pièce du jeu. Notez que l'adresse <span class="notranslate">GML</span> fournie comme second argument <b>doit être une constante de compilation</b>, et notez également que vous ne pouvez pas utiliser ce pragme pour créer des instances ou effectuer des opérations nécessitant le fonctionnement d'une room (ou de quoi que ce soit dans une room).
    </li>
    <li>&quot;<b>PNGCrush</b>&quot; - Le pragme &quot;PNGCrush&quot; utilisera le programme <a href="https://pmt.sourceforge.io/pngcrush/" target="_blank">PNGCrush</a> sur chaque texture créée. Notez que cela peut augmenter de manière significative le temps de compilation du jeu, donc vous ne voulez pas l'utiliser tout le temps, bien que cela puisse faire des économies significatives sur la taille finale du fichier. Cette option ne s'applique qu'aux groupes de textures qui utilisent le format PNG (voir <a data-xref="{text}" href="../../../Settings/Texture_Groups.htm#h">Paramètres des groupes</a>).</li>
    <li>&quot;<b>Texgroup.Scale</b>&quot;, &quot;<b>[TextureGroupName]</b>&quot;, &quot;<b>[Scale Divisor]</b>&quot; - Le &quot;Texgroup.Scale&quot; mettra à l'échelle le groupe de texture donné lors de la compilation. Vous devez fournir deux arguments supplémentaires : le &quot;[TexGroupName]&quot;, qui est le nom (une chaîne de caractères) du groupe de texture à mettre à l'échelle, et le &quot;[Scale Divisor]&quot; (également une chaîne de caractères), qui est le diviseur que vous souhaitez utiliser pour la mise à l'échelle, par exemple :
     <p class="code">gml_pragma(&quot;Texgroup.Scale&quot;, &quot;level1&quot;, &quot;2&quot;);</p>
      Ceci va diviser par deux toutes les textures du groupe de textures &quot;level1&quot;.
    </li>
    <li>&quot;<b>UnityBuild</b>&quot;, &quot;<b>[enable/disable]</b>&quot; - Si vous appelez la fonction avec ce pragme et que vous définissez l'argument enable/disable à <span class="inline">true</span>, lors de la compilation, tous les fichiers .cpp du projet seront comprimés en un seul fichier qui sera utilisé pour tout construire, par exemple :
     <p class="code">gml_pragma(&quot;UnityBuild&quot;, &quot;true&quot;);</p>
      L'avantage de faire une compilation unitaire est que les constructions sont plus rapides, mais l'inconvénient est qu'il fait une compilation <i>complète</i> à chaque fois, donc même si vous changez une seule partie du code, il reconstruira tout sans utiliser les fichiers cachés. Ceci a été ajouté spécifiquement pour l'exportation Xbox One en utilisant le YYC bien qu'il puisse être appelé pour d'autres builds<b>(YYC seulement</b>). Pour plus d'informations sur les builds de l'unité, veuillez voir <a href="http://buffered.io/posts/the-magic-of-unity-builds/" target="_blank">ici</a>.
    </li>
  </ul>
  <p class="note"><b>REMARQUE</b>: Le premier argument de la fonction <span class="inline">gml_pragma</span> <b>doit être une constante de chaîne au moment de la compilation</b> et non une variable.</p>
  <p> </p>
  <h4>Syntaxe :</h4>
  <p class="code">gml_pragma(command, [optional...]);</p>
  <table>
    <tbody>
      <tr>
        <th>Arguments</th>
        <th>Type</th>
        <th>Description</th>
      </tr>
      <tr>
        <td><span class="notranslate">command</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Chaîne de caractères</a></span></td>
        <td><span class="notranslate">A string with one of the commands listed above.</span></td>
      </tr>
      <tr>
        <td><span class="notranslate">[optional]</span></td>
        <td><span data-keyref="Type_String"><a data-rhwidget="HyperlinkPopover" href="../../../../GameMaker_Language/GML_Overview/Data_Types.htm">Chaîne de caractères</a></span></td>
        <td><span class="notranslate">Some of the available commands require an optional argument or arguments. These are explained above for each command.</span></td>
      </tr>
    </tbody>
  </table>
  <p> </p>
  <h4>Les retours :</h4>
  <p class="code"><span data-keyref="Type_Void">N/A</span></p>
  <p> </p>
  <h4>Exemple :</h4>
  <p class="code">gml_pragma(&quot;forceinline&quot;);</p>
  <p>L'exemple de code ci-dessus forcera la fonction de script où elle est utilisée à être en ligne à la compilation.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="OS_And_Compiler.htm">Système d'exploitation et compilateur</a></div>
        <div style="float:right">Suivant : <a href="parameter_count.htm"><span class="notranslate">parameter_count</span></a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
gml_pragma
-->
  <!-- TAGS
gml_pragma
-->
</body>
</html>