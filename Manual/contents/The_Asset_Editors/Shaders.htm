<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Shaders</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../assets/css/default.css" type="text/css" />
  <script src="../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how the shader editor works" />
  <meta name="rh-index-keywords" content="Shader Editor" />
  <meta name="search-keywords" content="shaders,shader,open GL,open GL ES" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Le rédacteur en chef <span class="notranslate">Shader</span> </h1>
  <p><img>Les nuanceurs sont un outil très puissant qui peut être utilisé pour manipuler les graphiques que votre jeu rend à l'écran, permettant des effets incroyablement rapides qui peuvent aller, par exemple, de l'ajout d'une subtile nuance de couleur à un <span class="notranslate">sprite</span>, jusqu'à des effets de distorsion en plein écran. Mais qu'est-ce qu'un <span class="notranslate">shader</span>?</p>
  <p>Un <span class="notranslate">shader</span> est essentiellement un programme en deux parties qui s'exécute directement sur la carte graphique elle-même, ce qui le rend très rapide puisque le GPU fait tout le travail et libère des cycles CPU pour votre code de jeu. Le site complet <span class="notranslate">shader</span> est composé d'un programme de sommet <span class="notranslate">shader</span> et d'un programme de fragment <span class="notranslate">shader</span> (également connu sous le nom de pixel <span class="notranslate">shader</span>). Ces deux petits programmes travaillent ensemble afin de manipuler ce que la carte graphique rend à l'écran. Cela vous permet ensuite de manipuler en temps réel la position, la couleur et les valeurs alpha qui sont effectivement <a class="glossterm" data-glossterm="rendu" href="#">rendues</a> sur le <a class="glossterm" data-glossterm="tampon d'affichage" href="#">tampon d'affichage</a>.</p>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down" href="#">Vertex Shader</a></p>
  <div class="droptext" data-targetname="drop-down">
    <p class="dropspot">Le Vertex <span class="notranslate">Shader</span> est l'étape programmable <span class="notranslate">shader</span> du pipeline de rendu qui gère le traitement des sommets individuels (les points des triangles utilisés pour le rendu de toute image). Lorsque vous effectuez le rendu d'une géométrie - comme un <span class="notranslate">sprite</span> ou une surface
      - <span data-keyref="GameMaker Name">GameMaker</span> crée un flux de sommets - appelé <strong>Vertex Buffer - </strong> qui définit la géométrie de ces triangles. Un <span class="notranslate">sprite</span>, par exemple, aura une géométrie de deux triangles (normalement appelés <em>polygones</em>) rendus ensemble pour former un "quad".
      pour former un &quot;quad&quot;. Ce flux de sommets provenant de Vertex <span class="notranslate">Buffer</span> est envoyé comme entrée à Vertex <span class="notranslate">Shader</span>, qui peut traiter les données de sommets de manière programmable. La sortie de Vertex <span class="notranslate">Shader</span> est utilisée par le GPU pour assembler des triangles,
      Ceux-ci sont ensuite correctement découpés et découpés en fonction du port de vue et de la caméra de vue, puis envoyés au bloc rasterizer du GPU qui génère un nouveau flux de sortie, constitué de ce qu'on appelle des <strong>fragments</strong>. Ce sont de minuscules données
      structures de données, dont chacune est relative à un seul pixel qui apparaît à l'écran.</p>
  </div>
  <p><a class="dropspot" data-rhwidget="DropSpot" data-target="drop-down1" href="#">Fragment Shader</a></p>
  <div class="droptext" data-targetname="drop-down1">
    <p class="dropspot">Le Fragment <span class="notranslate">Shader</span> est l'étape programmable <span class="notranslate">shader</span> du pipeline de rendu qui traite les &quot;fragments&quot; - les pixels interpolés utilisés pour texturer un polygone donné - et il est responsable de la sortie de la couleur finale de chaque pixel du triangle rendu.
      pixel du triangle rendu. Le fonctionnement de base est le suivant : le Fragment <span class="notranslate">Shader</span> reçoit en entrée tous les fragments (les pixels individuels du triangle en cours de rendu) qui ont été transmis dans le pipeline par le Vertex <span class="notranslate">Shader</span>. Il peut ensuite
      traiter ces fragments pour modifier la couleur et l'alpha du pixel de destination final qui sera dessiné à l'écran.</p>
  </div>
  <p> </p>
  <p>Un aperçu complet du fonctionnement réel de <span class="notranslate">shaders</span> et de la place qu'il occupe dans le pipeline graphique n'entre pas dans le cadre de ce document, mais vous pouvez trouver un bref guide ici :</p>
  <ul class="colour">
    <li><a href="../Additional_Information/Guide_To_Using_Shaders.htm">Guide d'utilisation des shaders</a></li>
  </ul>
  <p> </p>
  <h2>Soutien linguistique</h2>
  <p><span data-keyref="GameMaker Name">GameMaker</span> prend en charge les langues suivantes <span class="notranslate">shader</span>:</p>
  <table>
    <tbody>
      <tr>
        <th>Langage de shaders</th>
        <th>Plate-forme cible</th>
      </tr>
      <tr>
        <td><strong>GLSL ES 1.0</strong></td>
        <td>Toutes les plateformes cibles</td>
      </tr>
      <tr>
        <td><strong>GLSL</strong></td>
        <td>Mac et <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>)</td>
      </tr>
      <tr>
        <td><strong>HLSL 11</strong></td>
        <td>Windows, UWP, Xbox One et Série S/X</td>
      </tr>
      <tr>
        <td><strong>PSSL</strong></td>
        <td>PlayStation 4 et 5</td>
      </tr>
    </tbody>
  </table>
  <p>Lors de l'écriture de GLSL ES <span class="notranslate">shaders</span>, il est recommandé de suivre la <a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf" title="GLSL ES 1.0 Specification">spécification officielle du langage</a> aussi fidèlement que possible afin d'éviter les erreurs, car certaines plateformes cibles peuvent être plus strictes que d'autres (comme les cibles HTML5 et Opera GX, qui peuvent être plus restrictives que d'autres plateformes telles que <span class="notranslate">Windows</span>, <span class="notranslate">macOS</span>, etc. en ce qui concerne les limitations du langage).</p>
  <p> </p>
  <h2>Création d'un shader</h2>
  <p>Pour créer une ressource <span class="notranslate">shader</span>, il suffit de cliquer avec le bouton droit de la souris sur <img> dans le <a href="../Introduction/The_Asset_Browser.htm">navigateur d'actifs</a> et de sélectionner <em>Create -&gt; Shader</em>. Une fois que vous avez créé la base <span class="notranslate">shader</span>, vous pouvez ensuite utiliser le menu contextuel <img> de la nouvelle ressource pour sélectionner le type <span class="notranslate">shader</span> avant de continuer à modifier le code :</p>
  <p><img>L'éditeur de code lui-même est divisé en deux &quot;programmes&quot; - Vertex et Fragment - lorsque vous créez un nouveau <span class="notranslate">shader</span>, chacun étant accessible à partir des onglets situés en haut de l'éditeur. Les deux sont créés en même temps car vous <em>ne pouvez pas créer un <span class="notranslate">shader</span> sans les deux parties</em>. Même si vous souhaitez n'utiliser que le fragment <span class="notranslate">shader</span>, vous devez d'abord créer un vertex &quot;pass through&quot; <span class="notranslate">shader</span>. C'est pourquoi, par défaut, un vertex et un fragment &quot;pass through&quot; <span class="notranslate">shader</span> sont déjà codés pour tout nouveau <span class="notranslate">shader</span> (dans la capture d'écran en haut de la page, vous pouvez voir que nous avons utilisé le volet de l'éditeur de code pour montrer les deux côte à côte... utile pour travailler sur les deux programmes <span class="notranslate">shader</span> ensemble).</p>
  <p>Il convient de noter que vous pouvez utiliser GLSL ES <span class="notranslate">shaders</span> sur <em>toutes les </em>plateformes cibles, mais pour qu'ils fonctionnent sur la plateforme cible <strong>HTML5 </strong>, vous devez avoir activé WebGL dans les <a href="../Settings/Game_Options/HTML5.htm">options de jeu HTML5</a>, sinon ils ne fonctionneront pas.</p>
  <p>Pour plus de détails concernant les fonctions de <span class="notranslate">shader</span> et la façon dont elles peuvent être utilisées dans <span data-keyref="GameMaker Name">GameMaker</span>, veuillez consulter les pages suivantes :</p>
  <ul class="colour">
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shaders.htm">Fonctions de shaders</a> - La section de référence <span class="notranslate">GML</span> pour <span class="notranslate">shaders</span>.</li>
    <li><a href="../GameMaker_Language/GML_Reference/Asset_Management/Shaders/Shader_Constants.htm">Constantes des shaders</a> - Les constantes intégrées à <span data-keyref="GameMaker Name">GameMaker</span> qui peuvent être utilisées lors de l'écriture de <span class="notranslate">shaders</span>.</li>
    <li><a href="https://www.khronos.org/registry/OpenGL/specs/es/2.0/GLSL_ES_Specification_1.00.pdf">Spécifications GLSL ES 1.0</a> - Fichier PDF pour le langage OpenGL ES 1.0 <span class="notranslate">Shader</span> que <span data-keyref="GameMaker Name">GameMaker</span> utilise.</li>
    <li><a href="https://docs.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-reference">Référence du langage HLSL</a> - Les pages de référence de Microsoft pour l'utilisation du langage HLSL.</li>
    <li><a href="http://twvideo01.ubm-us.net/o1/vault/gdceurope2013/Presentations/825424RichardStenson.pdf">Présentation du langage PSSL</a> - Aperçu du langage PSSL sous forme de présentation.</li>
  </ul>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="The_Asset_Editors.htm">Les éditeurs d'actifs</a></div>
        <div style="float:right">Suivant : <a href="Sounds.htm">Sons</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
The <span class="notranslate">Shader</span> Editor
Shaders
OpenGL ES
HLSL
PSSL
-->
  <!-- TAGS
shader_editor
-->
</body>
</html>