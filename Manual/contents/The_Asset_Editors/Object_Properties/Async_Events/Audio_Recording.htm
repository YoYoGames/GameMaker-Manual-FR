<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"><head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Enregistrement audio</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing the Audio Recording async event." />
  <meta name="rh-index-keywords" content="Objects - Async Audio Recording Event" />
  <meta name="search-keywords" content="Audio Recording,ev_audio_recording" />
  <link rel="stylesheet" type="text/css" href="../../../assets/css/default.css" />
  <script src="../../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Enregistrement audio</h1>
  <p><img>Cet événement ne peut être déclenché que par la <a href="../../../GameMaker_Language/GML_Reference/Asset_Management/Audio/Audio_Buffers/audio_start_recording.htm"><span class="inline">audio_start_recording()</span></a> fonction
    et renverra une <a href="../../../GameMaker_Language/GML_Reference/Data_Structures/DS_Maps/DS_Maps.htm">carte DS Map</a> stockée dans la variable <a href="../../../GameMaker_Language/GML_Overview/Variables/Builtin_Global_Variables/async_load.htm"><span class="inline">async_load</span></a>,
    contenant différentes paires clé/valeur en fonction du <a class="glossterm" data-glossterm="rappel" href="Dialog.htm#">rappel de</a> la fonction qui a déclenché l'événement.</p>
  <p>Les clés suivantes seront disponibles dans le ds_map :</p>
  <ul class="dropspotlist">
    <li class="dropspot">&quot;<span class="inline">buffer_id</span>- l'ID du <a href="../../../GameMaker_Language/GML_Reference/Buffers/Buffers.htm">tampon</a> temporaire que vous pouvez utiliser pour récupérer les données audio.</li>
    <li class="dropspot">&quot;<span class="inline">channel_index</span>- l'index du canal d'enregistrement renvoyé par la fonction appelante d'où proviennent ces données.</li>
    <li class="dropspot">&quot;<span class="inline">data_len</span>- la longueur des données (en octets) que vous avez reçues.</li>
  </ul>
  <p class="note"><strong>NOTE</strong>: Comme mentionné au début de cette page, la variable <span class="inline" style="font-size: 14px">async_load </span>n'est valable que dans les événements asynchrones, car la carte DS vers laquelle elle pointe est créée au début de l'événement,
    puis supprimée à la fin. Cependant, notez que le site temporaire <span class="notranslate">buffer</span> dans lequel tout l'audio est stocké avec la carte sera également supprimé à la fin de l'événement. Vous devez donc le copier sur un site personnalisé <span class="notranslate">buffer</span> si vous souhaitez le conserver pour une utilisation ultérieure.</p>
  <p>Dans l'exemple d'utilisation ci-dessous, nous allons créer un <span class="notranslate">buffer</span> personnalisé pour stocker notre audio enregistré, et également configurer notre jeu pour enregistrer à partir de la source d'entrée 0 :</p>
  <p class="code">channel_index = audio_start_recording(0);<br/> audio_buffer = buffer_create(len, buffer_fast, 1);</p>
  <p>À chaque étape du jeu, lorsque l'enregistrement est détecté, un événement d'enregistrement audio asynchrone est déclenché et vous pouvez traiter l'entrée enregistrée de la manière suivante :</p>
  <p class="code">var channel = async_load[? &quot;channel_index&quot;];<br/> if channel == channel_index<br/>    {<br/>    len = async_load[? &quot;data_len&quot;];<br/>    buffer_copy(async_load[? &quot;buffer_id&quot;], 0, len, audio_buffer, 0);<br/>    }</p>
  <p>Ici, nous vérifions simplement la clé &quot;channel_index&quot; pour nous assurer qu'elle correspond à la valeur renvoyée lorsque nous avons commencé l'enregistrement, et si c'est le cas, nous copions le contenu du site temporaire <span class="notranslate">buffer</span> créé pour cet événement dans notre <span class="notranslate">buffer</span> personnalisé . Après cela, vous pouvez
    faire ce que vous voulez avec le fichier personnalisé <span class="notranslate">buffer</span> - vous pouvez le lire en utilisant les fonctions audio dédiées de <span class="notranslate">buffer</span>, vous pouvez le traiter et l'envoyer sur le réseau, vous pouvez le sauvegarder sur disque... Une fois que vous avez enregistré votre audio dans un <span class="notranslate">buffer</span>, vous pouvez faire pratiquement
    tout ce que vous voulez.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Async_Events.htm">Événements asynchrones</a></div>
        <div style="float:right">Suivant : <a href="Cloud.htm">Nuage</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Asynchronous Audio Recording Event
ev_audio_recording
-->
  <!-- TAGS
ev_audio_recording
-->

</body></html>