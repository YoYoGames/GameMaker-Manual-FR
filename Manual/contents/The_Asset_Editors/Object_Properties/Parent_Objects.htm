<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Objets parents</title>
  <meta name="generator" content="Adobe RoboHelp 2019" />
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing object parenting" />
  <meta name="rh-index-keywords" content="Objects - Parents" />
  <meta name="search-keywords" content="parent,child,inheritance,object parenting" />
  <link rel="stylesheet" type="text/css" href="../../assets/css/default.css" />
  <script src="../../assets/scripts/main_script.js"></script>
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Objets parents</h1>
  <p>Lorsque vous travaillez avec des objets dans <span data-keyref="GameMaker Name">GameMaker</span> <span class="notranslate">IDE</span>, vous pouvez mettre en place des hiérarchies <strong>Parent / </strong> Enfant. Pour ce faire, cliquez sur le bouton &quot;Parent&quot; dans l'éditeur d'objet, puis choisissez un autre objet dans le navigateur d'actifs pour qu'il soit le &quot;parent&quot; de l'objet en cours d'édition.
    pour être le &quot;parent&quot; de l'objet en cours d'édition :</p>
  <p><img>Ainsi, chaque objet de votre projet de jeu peut avoir un objet parent, mais qu'est-ce que cela signifie ? Eh bien, lorsqu'un objet a un parent assigné, il peut
    partager du code, des actions et des événements avec ce parent. Ce partage est appelé &quot;héritage&quot; et un objet qui a un parent est appelé un objet &quot;enfant&quot;. Non seulement un enfant peut partager du code avec son parent, mais vous pouvez effectuer des vérifications et exécuter du code
    sur les objets parents et il inclura automatiquement les objets enfants, ce qui permet de gagner beaucoup de temps et d'énergie.</p>
  <p>Si cela vous semble compliqué, une autre façon de voir un objet parent est de le considérer comme un moyen de &quot;regrouper&quot; des objets sous le même toit et de leur faire partager certaines choses sans perdre leur identité propre. Peut-être que cela ne clarifie pas encore
    clarifier les choses, alors donnons quelques exemples...</p>
  <p>Disons que vous avez un objet &quot;joueur&quot; et quatre objets &quot;ennemis&quot; différents. Vous voulez que le joueur meure s'il touche l'un de ces quatre objets, ce qui impliquerait normalement quatre événements de collision différents avec quatre ensembles d'actions ou de codes différents, un pour chaque objet ennemi.
    d'actions ou de code, un pour chacun des objets ennemis. MAIS si nous créons un objet parent pour tous les ennemis, nous pouvons créer un événement de collision avec l'objet parent uniquement et il se déclenchera quel que soit l'objet ennemi &quot;enfant&quot; qui touche le joueur.
    touchent le joueur. C'est pratique ! Dans l'objet <span data-keyref="GameMaker Name">GameMaker</span> actuel, vous verriez quelque chose comme ceci :</p>
  <p><img>À gauche, nous avons quatre événements de collision distincts et à droite, nous avons un seul événement de collision, car nous avons créé un objet " parent " et lui avons attribué tous les objets ennemis.
    un objet &quot;parent&quot; et lui avons assigné tous les objets ennemis. Notez qu'un objet parent ne doit pas nécessairement contenir d'événements ou de code...</p>
  <p>Un autre exemple de parentage est celui d'un jeu dans lequel vous voulez créer 10 objets d'apparence différente et les faire tous se comporter de la même manière. Pour cela, vous devez créer un objet parent et y placer toutes vos actions de comportement ou votre code
    dans les événements requis, puis vous créez vos dix objets sans actions ni code, mais avec des <span class="notranslate">sprites</span> différents, et vous leur attribuez votre objet parent. Maintenant, lorsque vous placez ces instances dans une pièce, elles se comporteront toutes de la même manière, mais auront un aspect différent,
    puisqu'elles &quot;hériteront&quot; des événements du parent.</p>
  <p>Enfin, vous pouvez utiliser la parentalité pour &quot;mélanger&quot; les événements et les comportements. Nous allons illustrer cela avec un dernier exemple... Disons que vous voulez deux monstres : un qui se déplace de haut en bas, et un autre qui se déplace de gauche à droite, mais vous voulez aussi que les deux aient la même santé, tirent sur le joueur et le blessent s'ils entrent en collision.
    Mais vous voulez aussi qu'ils aient la même santé, qu'ils tirent sur le joueur et qu'ils le blessent s'ils entrent en collision avec eux. Dans ce cas, vous pouvez voir que presque tous les événements doivent avoir les mêmes actions, à l'exception d'un ou deux qui régissent le mouvement. Donc, encore une fois, nous pouvons faire
    un objet le parent de l'autre, mais dans ce cas, nous définissons également certains événements pour l'objet enfant. Ces événements &quot;remplacent&quot; les événements parentaux, ce qui signifie que lorsqu'un événement pour l'objet enfant contient des actions, celles-ci sont exécutées
    à la place des actions contenues dans l'événement du parent. Si vous souhaitez également exécuter l'événement parent, vous pouvez appeler l'événement dit &quot;hérité&quot; à l'aide de la fonction <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a>,
    ou l'action visuelle <span class="notranslate">GML</span> <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Call Parent Event</a>.</p>
  <p><img>En haut, à gauche, se trouve l'objet parent qui contient 5 événements, et à droite, vous pouvez voir l'objet &quot;enfant&quot;. L'objet enfant
    contient également 5 événements, mais deux d'entre eux remplacent les événements hérités du parent (les événements <strong>Step </strong>et <strong>Draw </strong>) et les trois autres sont grisés car ce sont les événements hérités du parent. Les événements hérités
    auront également l'icône &quot;parent override&quot; à côté d'eux dans l'éditeur d'événements :</p>
  <p><img>Lorsque vous cliquez sur <img> sur un événement qui a été hérité,
    l'éditeur de code s'ouvre pour afficher le code parent hérité, mais vous ne pourrez pas modifier ce code, car vous ne pouvez le modifier que dans l'objet parent lui-même. Vous pouvez cliquer sur le bouton droit de la souris <img> sur l'un des événements parents pour ouvrir le menu d'options suivant :</p>
  <p><img>Ici, vous pouvez choisir deux options <strong>Ouvrir </strong>l'événement parent pour inspecter le code, ou vous pouvez choisir d'<strong>Hériter </strong>l'événement
    ou de <strong>remplacer l'</strong>événement. Si vous choisissez <strong>Hériter </strong>, l'éditeur de code s'ouvrira avec la fonction <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Objects/Object_Events/event_inherited.htm"><span class="inline">event_inherited()</span></a> déjà
    déjà ajoutée (ou l'action <a href="../../Drag_And_Drop/Drag_And_Drop_Reference/Instance/Call_Parent_Event.htm">Appeler l'événement parent</a> si vous utilisez <span class="notranslate">GML</span> Visual). Tout autre code que vous placez dans cet événement sera maintenant exécuté en même temps que le code que l'objet parent
    parent. Si vous choisissez de <strong>remplacer </strong>l'événement, la fenêtre de code s'ouvrira également, mais la fonction <span class="inline">event_inherited()</span> ne sera pas appelée.
    dans l'objet parent.</p>
  <p class="note"><strong>REMARQUE</strong>: à partir de l'éditeur de code, vous pouvez accéder rapidement à l'objet parent en cliquant sur le bouton droit de la souris <img> et en sélectionnant <strong>Go To Object</strong> dans le menu contextuel, ou (si l'événement a été remplacé) vous pouvez sélectionner <strong>Open Inherited Event</strong> pour accéder directement à un éditeur de code contenant le code de l'événement parent.</p>
  <p>Lorsque vous ciblez un objet parent dans le code, le code s'applique également aux &quot;enfants&quot; de l'objet parent. Cela se produit lorsque, dans une action, vous indiquez que l'action doit être appliquée aux instances d'un certain objet.
    cela se produit lorsque vous utilisez l'instruction <a href="../../GameMaker_Language/GML_Overview/Language_Features/with.htm"><span class="inline">with()</span></a> dans le code. C'est également le cas lorsque vous appelez des fonctions de code, telles que <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_position.htm"><span class="inline">instance_position()</span></a>,
    <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Instances/instance_number.htm"><span class="inline">instance_number()</span></a>où - si vous fournissez un objet parent - toutes les instances des instances parent <em>et </em>enfant
    seront incluses dans les contrôles. Enfin, le parentage fonctionne également lorsque vous faites référence à des variables dans d'autres objets, comme dans l'exemple du monstre ci-dessus, si je fixe la vitesse de l'ennemi 1 à 10, la vitesse de l'ennemi 2 passera également à 10 car il s'agit d'un objet enfant de l'ennemi
    1.</p>
  <p>Dans la plupart des cas, il est généralement considéré comme une bonne pratique de créer un objet parent de base et de faire en sorte que cet objet de base contienne tous les comportements par défaut, mais de ne jamais utiliser une instance de cet objet dans le jeu. Utilisez plutôt tous les objets enfants et n'utilisez le parent que dans des
    situations comme celles que j'ai décrites ci-dessus, pour les collisions, pour référencer les variables, etc... Vous devez également savoir que les parents peuvent aussi avoir des parents ! Il est évident que vous ne pouvez pas créer un cycle de &quot;parent 1 est enfant de parent 2 est enfant de parent
    1&quot; mais vous pouvez créer ce que l'on appelle une &quot;hiérarchie d'objets&quot; où &quot;<em>parent3 </em>est enfant de <em>parent2 </em>est enfant de <em>parent1</em>&quot;. Ceci est extrêmement utile pour garder votre jeu structuré et il est fortement conseillé d'apprendre à utiliser ce mécanisme.
    d'apprendre à utiliser ce mécanisme.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Objects.htm">L'éditeur d'objets</a></div>
        <div style="float:right">Suivant : <a href="Physics_Objects.htm">Objets de la physique</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Parent Objects
Child Objects
parent
child
inheritance
-->
  <!-- TAGS
parent_objects
-->
</body>
</html>