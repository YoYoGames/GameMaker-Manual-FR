<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Créer une extension</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Page detailing how to create a generic extension" />
  <meta name="rh-index-keywords" content="Extensions - Creating An Extension" />
  <meta name="search-keywords" content="creating extensions" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Créer une extension</h1>
  <p>Pour créer une extension, vous devez d'abord cliquer avec le bouton droit de la souris sur <img> n'importe où dans le <a href="../../Introduction/The_Asset_Browser.htm">navigateur d'actifs</a> et sélectionner <strong>Créer -&gt; Extension</strong>. Cela ouvrira les propriétés de l'extension pour votre ressource nouvellement créée dans l'espace de travail :</p>
  <p><img>Si vous ne la voyez pas, vous pouvez double-cliquer sur votre ressource d'extension dans le navigateur d'actifs pour ouvrir sa fenêtre de propriétés ou pour vous concentrer sur elle lorsqu'elle est déjà ouverte.</p>
  <p>Vous pouvez également donner un nom à l'extension (en respectant la convention habituelle, à savoir uniquement des lettres/chiffres et aucun symbole spécial à l'exception du trait de soulignement &quot;_&quot;). Vous pouvez également définir le numéro de version de l'extension si vous le souhaitez.</p>
  <p>Sous &quot;Copies vers&quot;, vous pouvez choisir les plateformes vers lesquelles cette extension est exportée. Pour une simple extension <span class="notranslate">GML</span>, vous n'avez pas à vous en soucier car elle fonctionnera sur toutes les plates-formes. Cependant, si vous créez une extension spécifique à une plate-forme (comme pour <span class="notranslate">Android</span>), vous devez vous assurer qu'elle <em>n'est pas</em> exportée vers des plates-formes non compatibles (comme <span class="notranslate">iOS</span>, les consoles, etc.).</p>
  <h2>Fichiers de remplacement</h2>
  <p>Pour ajouter un fichier à la nouvelle extension, vous devez cliquer sur l'icône de menu <img> et sélectionner soit un fichier de remplacement (&quot;Add Placeholder&quot;), soit importer le fichier réel requis pour la plate-forme cible (&quot;Add File&quot;) :</p>
  <p class="dropspot"><img alt="RMB Icon" class="icon" src="../../assets/Images/Icons/Icon_RMB.png" /></p>
  <p>Un fichier générique est un fichier qui peut être de n'importe quel type, à l'exception de ceux requis par les plates-formes spécifiques (donc pas de fichiers <span class="inline">DLL</span> ou <span class="inline">SO </span>, par exemple), et il ne sera pas utilisé, sauf comme fichier &quot;linker&quot; pour connecter un ensemble de fonctions ou de constantes avec l'extension donnée (généralement, il est seulement utilisé avec les extensions <span class="notranslate">iOS</span> et <span class="notranslate">Android</span>, ce qui est expliqué dans les sections ci-dessous pour ces cibles). Vous pouvez également ajouter des fichiers placeholder &quot;GML&quot; et &quot;JS&quot; pour une utilisation plus spécifique.</p>
  <h2>Ajout de fichiers</h2>
  <p>Normalement, vous n'aurez pas besoin d'utiliser des espaces réservés, à moins que vous ne construisiez pour <span class="notranslate">iOS</span> et <span class="notranslate">Android</span>. Vous choisirez donc l'option &quot;Ajouter un fichier&quot; pour ajouter l'un des fichiers suivants, en fonction de la plate-forme cible à laquelle ils sont destinés :</p>
  <ul class="colour">
    <li class="dropspot"><span class="inline">.gml</span>: Ce fichier est réalisé uniquement avec le site <span class="notranslate">GameMaker Language</span> et est compatible avec toutes les plateformes.</li>
    <li class="dropspot"><span class="inline">.js</span>: Il s'agit d'un format d'extension JavaScript et il est uniquement compatible avec la cible HTML5.</li>
    <li class="dropspot"><span class="inline">.dll</span>: Il s'agit d'un format d'extension de bibliothèque de liaison dynamique et il est uniquement compatible avec les cibles <span class="notranslate">Windows</span>, UWP et Xbox (chaque cible aura besoin d'un fichier <span class="inline">*.dll</span> différent compatible avec ses spécifications).</li>
    <li class="dropspot"><span class="inline">.dylib</span>: C'est l'équivalent Mac d'une DLL et n'est compatible qu'avec la cible Mac (pas <span class="notranslate">iOS</span>).</li>
    <li class="dropspot"><span class="inline">.so</span>: Il s'agit de l'équivalent d'une DLL sur <span class="notranslate">Linux</span> et n'est compatible qu'avec la cible <span class="notranslate">Ubuntu</span> (<span class="notranslate">Linux</span>).</li>
    <li class="dropspot"><span class="inline">.prx</span>: Il s'agit d'un format de fichier permettant d'ajouter des fonctionnalités à la cible PlayStation (chaque cible aura besoin d'un fichier différent <span class="inline">*.prx</span> compatible avec ses spécifications).</li>
  </ul>
  <p>Vous remarquerez qu'il n'existe pas de type de fichier pour <strong>Android </strong>ou <strong>iOS</strong>, car leur configuration est légèrement différente. Vous trouverez plus loin des explications sur la façon de les configurer, mais voyons d'abord comment créer une extension générale <span class="notranslate">GML</span> pour n'importe quelle plateforme cible, puisque le processus est le même pour toutes.</p>
  <h2>Création d'une extension <span class="notranslate">GML</span> </h2>
  <p>Pour commencer, vous devez créer le fichier qui va être utilisé. Pour une extension <span class="notranslate">GML</span>, il s'agirait d'un fichier texte (sauvegardé avec l'extension <span class="inline">.gml</span> ) et il serait formaté de la manière suivante :</p>
  <p class="code">#define c_alice_blue<br />
    return make_color_rgb(240,248,255);<br />
    <br />
    <br />
    #define instance_create_colour<br />
    var i = instance_create_layer(argument0, argument1, argument2, argument3);<br />
    with (i)<br />
    {<br />
        image_blend = argument3;<br />
    }<br />
    return i;
  </p>
  <p>Comme vous pouvez le constater, nous commençons chaque section par un appel à <span class="inline">#define</span>, qui, dans l'exemple ci-dessus, est utilisé pour définir deux fonctions. Examinons chaque partie d'une fonction définie :</p>
  <ul class="colour">
    <li>L'instruction <span class="inline">#define</span> est utilisée pour définir une nouvelle fonction avec le nom donné ;</li>
    <li>Cette instruction est ensuite suivie du code de la fonction, qui utilise les variables <span class="inline">argument0</span>, <span class="inline">argument1</span>, etc. pour <span class="notranslate">access</span> les arguments transmis à la fonction lorsqu'elle est appelée ;</li>
    <li>A la fin, nous avons une instruction <a href="../../GameMaker_Language/GML_Overview/Language_Features/return.htm"><span class="notranslate">return</span></a> qui est utilisée pour renvoyer les données de l'extension vers le code <span class="notranslate">GML</span> où la fonction a été appelée.</li>
  </ul>
  <p>Si vous écriviez une extension <span class="inline">DLL</span> ou JavaScript, le processus serait similaire mais dans le langage correct pour le format de fichier de l'extension.</p>
  <p>Une fois que vous avez fait cela, vous devez ajouter le fichier à l'extension (en utilisant l'option &quot;Ajouter un fichier&quot;) qui enchaînera une nouvelle fenêtre aux propriétés des extensions pour les propriétés du fichier :</p>
  <p class="dropspot"><img alt="Extension Properties" class="center" height="519" src="../../assets/Images/Asset_Editors/Editor_Extensions.png" width="486" /></p>
  <p>Vous pouvez y sélectionner la plate-forme cible de l'extension (pour GML, vous les sélectionnez toutes), renommer le fichier d'extension et définir quelques autres détails, que nous aborderons dans un instant.</p>
  <p class="note"><strong>REMARQUE</strong>: l'ajout d'un fichier à une extension le copie dans le répertoire du projet, ce qui signifie que toute modification ultérieure doit être apportée à cette copie pour qu'elle soit visible dans le jeu. Vous pouvez trouver la copie en faisant un clic droit sur votre extension dans le navigateur d'actifs et en sélectionnant &quot;Ouvrir dans l'explorateur&quot;.</p>
  <h2>Ajout de fonctions</h2>
  <p>L'éditeur devrait être automatiquement alimenté par les fonctions incluses dans notre fichier <span class="notranslate">GML</span>, mais si ce n'est pas le cas, vous pouvez les ajouter manuellement en cliquant sur le bouton du menu des fonctions <img> et en sélectionnant ce dont vous avez besoin :</p>
  <p class="dropspot"><img alt="Estension Options Icon" class="icon" src="../../assets/Images/Icons/Icon_ExtensionMenu.png" /></p>
  <p>En sélectionnant &quot;Ajouter une fonction&quot;, vous pourrez ajouter une fonction à l'extension qui pourra ensuite être appelée dans <span data-keyref="GameMaker Name">GameMaker</span> comme n'importe quelle fonction intégrée. <span>Une fois la fonction ajoutée, la fenêtre suivante s'ouvre pour vous permettre de définir les propriétés de la fonction (ou vous pouvez double-cliquer sur la fonction pour l'ouvrir) :</span></p>
  <p class="dropspot"><img alt="Add Files To An Extension" class="center" src="../../assets/Images/Asset_Editors/Editor_Extensions_Files.png" /></p>
  <p>Dans l'image ci-dessus, nous avons rempli l'éditeur de fonctions avec les détails de la fonction <span class="inline">instance_create_colour()</span> que nous avons définie dans notre fichier d'extension <span class="notranslate">GML</span> (notez que cette fenêtre d'éditeur de fonctions ne sert pas uniquement à définir les fonctions <span class="notranslate">GML</span> -- elle sera la même pour tous les types d'extension). Passons en revue chaque option qui peut être définie pour une fonction :</p>
  <ul class="colour">
    <li>Vous pouvez voir que nous avons donné un <em>nom</em> à la fonction, qui est celui que vous utiliserez lorsque vous appellerez la fonction dans votre projet ; notez que ce nom ne doit pas nécessairement correspondre à celui utilisé dans l'extension - vous pouvez lui donner le nom que vous voulez et utiliser le champ <em>External Name</em> pour le lier au nom réel défini dans l'extension :<img></li>
    <li>En dessous, vous avez une section pour définir le texte d'<em>aide </em>, qui est le texte qui sera affiché dans la fenêtre pop-up de complétion de code et le texte d'aide au bas de l'éditeur de code.</li>
    <li>Ensuite, vous pouvez définir le <em>type de retour</em>, qui peut être un <strong>double </strong>(valeur réelle à <a class="glossterm" data-glossterm="virgule flottante" href="#">virgule flottante</a> ) ou une <strong>chaîne de caractères</strong>; si la fonction externe ne renvoie rien, cela n'a pas d'importance.</li>
    <li>En dessous, vous définissez les arguments que la fonction prendra. Ces arguments peuvent être des <strong>doubles </strong>ou des <strong>chaînes de caractères</strong>, et vous pouvez les ajouter en cliquant sur le bouton d'ajout <img> et les supprimer en cliquant sur le bouton de suppression <img>.<br>
      <br>
      Si votre fonction peut prendre un nombre variable d'arguments (ce qui signifie qu'elle a des arguments facultatifs), vous devez vous assurer de cocher la case &quot;Variable Length Arguments&quot; en bas.
    </li>
  </ul>
  <p class="note"><strong>REMARQUE</strong>: Si la fonction fait partie d'une extension native de <span class="notranslate">Windows</span>, Mac ou <span class="notranslate">Ubuntu</span> (<span class="inline">dll</span>, <span class="inline">dylib</span> ou <span class="inline">so</span> respectivement) et qu'elle comporte plus de quatre arguments, <strong>tous les arguments doivent être du même type</strong>.</p>
  <p>Une fois que vous avez fait tout cela, la fonction est prête à être utilisée dans le projet ; elle apparaîtra maintenant dans l'auto-complétion et sera également codée en couleur :</p>
  <p><img>Les fonctions définies peuvent également être définies comme des <strong>fonctions d'initialisation</strong> ou des <strong>fonctions finales</strong>, ce qui signifie qu'elles seront appelées automatiquement au début du jeu (Init) et à la fin du jeu (Final).</p>
  <p class="note"><strong>IMPORTANT !</strong> Toutes les plates-formes prennent en charge l'appel de la fonction Init, <strong>mais toutes les plates-formes n'exécutent pas l'appel de la fonction Final.</strong> En effet, certaines plateformes fermeront simplement l'application sans donner de préavis ou de temps pour que cette fonction soit appelée. Les plateformes les plus touchées par ce problème sont <strong>iOS</strong>, <strong>Android</strong>, <strong>HTML5</strong>, <strong>PlayStation </strong>et <strong>Xbox</strong>.</p>
  <h2>Macros</h2>
  <p>L'autre option dont vous disposez est de créer une <strong>macro</strong>. Une macro peut être soit une valeur <a class="glossterm" data-glossterm="constant" href="#">constante</a>, soit un court extrait de code (pour plus d'informations sur les macros, voir <a href="../../GameMaker_Language/GML_Overview/Variables/Constants.htm">ici</a>). Par exemple, nous pourrions supprimer la fonction <span class="inline">c_alice_blue</span> de notre extension <span class="notranslate">GML</span> précédemment définie et en faire une macro à la place. Pour créer une macro, il suffit de cliquer sur le bouton &quot;Macros&quot; dans les propriétés de l'extension, ce qui ouvre la fenêtre suivante :</p>
  <p class="dropspot"><img alt="File Property Window" class="center" height="553" src="../../assets/Images/Asset_Editors/Editor_Extensions_FileProperties.png" width="1050" /></p>
  <p>L'éditeur est assez explicite : vous donnez le nom de la macro et sa valeur constante, ou une courte ligne de code. Notez que si la macro est une ligne de code, <strong>elle sera évaluée à chaque fois que la macro sera appelée</strong>.</p>
  <h2 id="h1">Création d'options d'extension</h2>
  <p>Cliquez sur l'icône en forme de roue dentée à côté de &quot;<strong>Options d'extension</strong>&quot; pour créer ou modifier les options de vos extensions :</p>
  <p><img>Après avoir cliqué sur &quot;<strong>Oui&quot;</strong> à l'invite de confirmation, vous verrez une nouvelle fenêtre, dans laquelle vous pourrez ajouter de nouvelles options d'extension :</p>
  <p><img>Vous pouvez donner à chaque option d'extension un nom, une valeur par défaut et un type de données. Le nom est ce que vous utiliserez en interne dans votre code d'extension pour récupérer la valeur de l'option.</p>
  <p>Outre l'ajout d'options à l'aide de &quot;Add Option&quot;, vous pouvez également ajouter des sections à l'aide de &quot;Add Section&quot;. Une section <strong>n'</strong> est <strong>pas</strong> une option, mais seulement un titre affiché dans la fenêtre principale de l'éditeur d'extension. Utilisez cette option si vous avez beaucoup d'options et que vous voulez nettoyer la liste des options que l'utilisateur final voit.</p>
  <p>Les types d'options suivants peuvent être créés :</p>
  <ul class="colour">
    <li><strong>Booléen</strong>: Cette option crée une case à cocher vrai/faux.</li>
    <li><strong>Un nombre</strong>: C'est un nombre réel.</li>
    <li><strong>Chaîne</strong>: Il s'agit d'une chaîne de texte.</li>
    <li><strong>FilePath</strong>: Il s'agit du chemin d'accès à un fichier. Il vous permet d'utiliser l'explorateur de votre système d'exploitation pour rechercher un fichier.</li>
    <li><strong>FolderPath</strong>: Il s'agit du chemin d'accès à un dossier/répertoire. Il vous permet d'utiliser l'explorateur de votre système d'exploitation pour rechercher un dossier.</li>
    <li><strong>Liste</strong>: Il s'agit d'une liste déroulante dans laquelle un seul élément peut être sélectionné à partir d'une liste prédéfinie d'éléments.</li>
  </ul>
  <p>Vous pouvez également cliquer sur l'icône en forme de rouage <img> à côté d'une option pour lui donner un <strong>nom d'affichage</strong> et une <strong>description</strong> facultatifs (qui apparaissent sous forme d'info-bulle au survol du nom d'affichage).</p>
  <p>Dans la fenêtre des extras, vous pouvez également choisir d'exporter cette option vers le fichier <strong>options.ini</strong> fourni avec votre jeu.</p>
  <p>Enfin, vous pouvez choisir de masquer l'option dans l'éditeur, ce qui la rend invisible pour l'utilisateur final qui utilise l'extension.</p>
  <h3>Utilisation des options d'extension</h3>
  <p>Vous pouvez récupérer les valeurs des options d'une extension à l'adresse <span class="notranslate">runtime</span> en utilisant les <a href="../../GameMaker_Language/GML_Reference/Asset_Management/Extensions/Extensions.htm">fonctions d'extension</a>.</p>
  <p>Vous pouvez également récupérer vos options d'extension dans vos <a data-xref="{title}" href="../../Settings/Runner_Details/Compiler_Batch_Files.htm">fichiers batch de compilation / scripts</a> en utilisant le nom <span class="inline2">YYEXTOPT_&lt;ExtensionName&gt;_&lt;OptionName&gt;.</span></p>
  <p>Les options de l'extension ne seront disponibles à l'adresse <span class="notranslate">runtime</span> que si l'extension possède des fonctions qui sont utilisées à l'adresse <span class="notranslate">runtime</span>. Toutefois, les options seront toujours exportées vers le fichier INI (si l'option est activée) et les scripts batch, quelle que soit l'utilisation de l'extension.</p>
  <h2>Fichiers Proxy</h2>
  <p>Lorsque vous travaillez avec plusieurs plateformes cibles, il convient de noter que vous pouvez créer une seule extension avec un seul ensemble de fonctions/macros qui fonctionnera sur <em>toutes les </em>plateformes. Pour ce faire, il suffit d'ajouter une seule des bibliothèques de liens à votre jeu en tant qu'extension et de placer l'autre ou les autres dans la liste des <strong>fichiers proxy</strong> dans la fenêtre des <strong>propriétés de l'extension</strong>.</p>
  <p><img>Par exemple, disons que vous avez une extension <span class="notranslate">Windows</span> avec le <span class="inline"> <strong>dll </strong></span>&quot;<span class="inline">Haggis.dll</span>&quot;. Il vous suffit de reproduire ce <span class="inline"> <strong>dll</strong></span> en tant que Mac <span class="inline"> <strong>DyLib</strong></span>, en le nommant &quot;<span class="inline"><strong>libHaggis.dylib</strong></span>&quot; et en vous assurant que les noms des fonctions internes correspondent à ceux du <span class="notranslate">Windows</span> <span class="inline"> <strong>dll</strong></span> original. Ce <strong> <span class="inline">DyLib</span> </strong>sera ensuite ajouté aux fichiers proxy et configuré pour être exporté lorsque le jeu est exécuté sur la cible Mac, et <span data-keyref="GameMaker Name">GameMaker</span> l'utilisera automatiquement lorsque les fonctions de l'extension seront appelées.</p>
  <p>Pour ajouter un fichier proxy, il vous suffit de cliquer sur le bouton <img> dans la fenêtre Propriétés du fichier de ressources sélectionné et de rechercher l'emplacement du fichier. Une fois qu'il est ajouté, vous devrez peut-être mettre à jour les cibles de l'extension pour ajouter le module approprié, et lors de la prochaine exécution de votre jeu, il sera inclus comme proxy pour cette plate-forme. Vous pouvez également supprimer les fichiers proxy en cliquant sur le bouton <img> qui supprimera le fichier proxy sélectionné.</p>
  <p>Une fois que vous avez ajouté vos fichiers proxy, ils seront copiés dans le dossier Extensions de votre projet (vous pouvez les trouver en cliquant avec le bouton droit de la souris <img> sur l'extension et en sélectionnant <em>Ouvrir dans l'explorateur</em>). Si vous devez les modifier, vous devez éditer les fichiers copiés qui sont fournis avec le jeu et non le fichier source qui a été importé, car <span data-keyref="GameMaker Name">GameMaker</span> utilisera ceux du projet pour la compilation.</p>
  <h2 id="h">Conventions d'appellation</h2>
  <p>Il est très important que vos fichiers proxy respectent les conventions d'appellation énumérées ci-dessous, car <span data-keyref="GameMaker Name">GameMaker</span> analysera ces noms et attribuera le module cible du fichier en fonction de son extension et de son nom et liera automatiquement les fichiers pour vous. Si vous ne respectez pas ces conventions, votre jeu risque de ne pas fonctionner à l'adresse <span class="notranslate">runtime</span>, car <span data-keyref="GameMaker Name">GameMaker</span> ne pourra pas déterminer le fichier à utiliser et ne le chargera pas correctement.</p>
  <p>Les conventions de dénomination pour chaque plate-forme cible sont indiquées ci-dessous :</p>
  <table>
    <colgroup>
      <col style="width: 173px;" />
      <col style="width: 715px;" />
    </colgroup>
    <tbody>
      <tr>
        <th>Plate-forme</th>
        <th>Noms</th>
      </tr>
      <tr>
        <td>Windows 32bit Runtime</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dll, lib&lt;<em>Name</em>&gt;.dll</span></td>
      </tr>
      <tr>
        <td>Windows 64bit Runtime</td>
        <td><span class="inline">&lt;<em>N</em><em>ame</em>&gt;_x64.dll, lib&lt;<em>Name</em>&gt;_x64.dll</span></td>
      </tr>
      <tr>
        <td>UWP</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_x86.dll, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_win8_arm.dll</td>
      </tr>
      <tr>
        <td>Ubuntu (<span class="notranslate">Linux</span>)</td>
        <td><span class="inline">&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;.so,<br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_arm.so,<br>
            <span class="inline">lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_arm.so,<br>
            <br>
            &lt;<em>Nom&gt;_arm64</em>.so, lib&lt;<em>Nom&gt;_arm64</em>.so, lib&lt;<em>Nom&gt;_linux_arm64</em>.so,<br>
            <br>
           <em>&lt;Nom&gt;_arm64-v8</em>.so,<br>
           <em>lib&lt;Nom&gt;_arm64-v8</em>.so, lib&lt;Nom&gt;_linux_arm64-v8.so,<br>
            <br>
            &lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_armeabi-v7a.so, lib&lt;<span class="inline"><span class="inline"><em>Name</em></span>&gt;_linux_armeabi-v7a.so</td>
      </tr>
      <tr>
        <td>macOS</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.dylib, lib&lt;Name&gt;.dylib</span></td>
      </tr>
      <tr>
        <td>HTML5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.js</span></td>
      </tr>
      <tr>
        <td>PS4</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps4.prx, lib&lt;<em>Name</em>&gt;_ps4.prx</span></td>
      </tr>
      <tr>
        <td>PS5</td>
        <td><span class="inline">&lt;<em>Name</em>&gt;.prx, lib&lt;<em>Name</em>&gt;.prx, &lt;<em>Name</em>&gt;_ps5.prx, lib&lt;<em>Name</em>&gt;_ps5.prx</span></td>
      </tr>
      <tr>
        <td>Xbox One</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Nom&gt;_xboxone</em>.dll</td>
      </tr>
      <tr>
        <td>Xbox Series X|S</td>
        <td><span class="inline"><span class="inline">&lt;<em>Name</em>&gt;.dll, </span>&lt;<em>Nom&gt;_xboxseriesxs</em>.dll</td>
      </tr>
    </tbody>
  </table>
  <p>En utilisant les conventions ci-dessus, vous remplacerez la partie <span class="inline">&lt;<em>Name</em>&gt;</span> par le nom du fichier de base pour lequel vous ajoutez les fichiers proxy.</p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../Extensions.htm">L'éditeur d'extension</a></div>
        <div style="float:right">Suivant : <a href="Android_Extensions.htm">Extensions Android</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2022 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
Creating Extensions
-->
  <!-- TAGS
extensions_create
-->
</body>
</html>