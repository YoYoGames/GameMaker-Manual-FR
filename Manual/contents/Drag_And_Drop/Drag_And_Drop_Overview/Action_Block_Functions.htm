<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <title>Fonctions du script du bloc d'action</title>
  <meta name="generator" content="Adobe RoboHelp 2020" />
  <link rel="stylesheet" href="../../assets/css/default.css" type="text/css" />
  <script src="../../assets/scripts/main_script.js"></script>
  <meta name="rh-authors" content="Mark Alexander" />
  <meta name="topic-comment" content="Article explaining how to make action block script functions" />
  <meta name="rh-index-keywords" content="GML Visual Overview - Action Block Script Functions" />
  <meta name="search-keywords" content="GML Visual Scripts" />
</head>
<body>
  <!--<div class="body-scroll" style="top: 150px;">-->
  <h1>Fonctions du script du bloc d'action</h1>
  <p>L'un des actifs les plus importants du <a href="../../Introduction/The_Asset_Browser.htm">navigateur d'actifs</a> est l'actif <a href="../../The_Asset_Editors/Scripts.htm">script</a>. Les scripts sont des ressources spéciales dans la mesure où ils sont essentiellement des &quot;conteneurs&quot; pour les fonctions définies par l'utilisateur et ne sont pas eux-mêmes appelés directement par vous dans vos jeux. Tous les scripts ont une portée <strong>globale</strong> et seront exécutés automatiquement par <span class="notranslate">GameMaker</span> au démarrage de votre jeu. Vous pouvez donc les utiliser pour définir des variables et des fonctions globales que vous souhaitez utiliser dans votre jeu.</p>
  <p>Chaque script <span class="notranslate">GML</span> Visual peut se voir ajouter une ou plusieurs fonctions définies par l'utilisateur. Ces fonctions sont créées à l'aide de l'action <a href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm">Déclarer une nouvelle fonction</a>:</p>
  <p><img>Les fonctions que vous définissez ici auront une portée globale et agiront comme n'importe quelle action intégrée de <span class="notranslate">GML</span> Visual, c'est-à-dire qu'elles peuvent prendre différentes valeurs - ou aucune - appelées<span class="glossextra">arguments</span> (ou paramètres), puis exécuter une tâche, en renvoyant une valeur ou en ne renvoyant rien, selon le cas. Vous appelez ensuite la fonction dans vos jeux à l'aide de l'action <a href="../Drag_And_Drop_Reference/Common/Function_Call.htm">Function Call</a> <img>, qui ressemble à ceci :</p>
  <p><img>Pour créer un script visuel <span class="notranslate">GML</span>, il suffit d'utiliser le bouton droit de la souris <img> n'importe où dans le navigateur d'actifs et de sélectionner <strong>Créer </strong>puis <strong>Script</strong>. Cela créera un nouveau script visuel <span class="notranslate">GML</span> et ouvrira la fenêtre de l'éditeur :</p>
  <p><img>Vous pouvez nommer le script en faisant un clic droit sur <img> dans le navigateur d'actifs et en sélectionnant <strong>Rename </strong>(ou en utilisant un double clic gauche lent <img>), mais notez que le nom du script doit se conformer aux règles générales pour les actifs, c'est-à-dire qu'il doit commencer par une lettre et contenir uniquement des lettres, des chiffres ou le symbole &quot;_&quot; sous la barre. Votre script sera également pré-rempli d'une action <strong>Déclarer une nouvelle fonction</strong>, prête à être remplie, et vous pourrez ajouter d'autres déclarations de fonctions si nécessaire (un seul script peut contenir plusieurs fonctions, ce qui est utile pour regrouper des fonctions ayant une utilisation similaire ou connexe).</p>
  <p>Comme mentionné ci-dessus, vous pouvez passer un certain nombre d'arguments à une fonction, et elle les utilisera pour effectuer la tâche pour laquelle vous l'avez écrite. Pour mieux comprendre, prenez, par exemple, n'importe quelle action intégrée et réfléchissez à son fonctionnement... vous la placez dans un événement et fournissez un certain nombre de valeurs et elle fera faire quelque chose à votre instance. Les fonctions définies par l'utilisateur sont exactement les mêmes, la seule différence étant que <em>vous </em>les écrivez.</p>
  <p>Lorsque vous définissez une nouvelle fonction, vous lui donnez un nom et vous définissez également le nom des arguments qu'elle prend, le cas échéant (les fonctions peuvent ne pas prendre d'arguments ou en prendre plusieurs, selon vos besoins). Si vous donnez des noms d'arguments, ceux-ci seront utilisés dans les actions appelées par la fonction comme des <strong>variables locales </strong>contenant les valeurs d'entrée de la fonction.</p>
  <p>Une bonne pratique consiste également à ajouter un commentaire pour l'action qui explique ce qu'elle fait, en suivant les <a href="../../The_Asset_Editors/Code_Editor_Properties/JSDoc_Script_Comments.htm">règles de JS Doc</a>. Par exemple, considérons cette fonction <span class="inline">set_vec()</span>:</p>
  <p><img>Pour appeler le script ci-dessus, il suffit d'utiliser l'action <strong>Call Function</strong>, comme ceci :</p>
  <p><img>Non seulement vous pouvez passer des arguments dans une fonction, mais vous pouvez également demander à une fonction de renvoyer une valeur (à l'aide de l'action <a href="../Drag_And_Drop_Reference/Common/Return.htm">Return</a> <img> ). Vous pouvez donc les utiliser pour (par exemple) construire des méthodes de calcul ou renvoyer un ID d'instance après une détection de collision complexe ou tout autre chose. Notez cependant que l'utilisation de return <strong>met fin à la fonction</strong> et qu'aucune action placée après son utilisation ne sera exécutée, ce qui signifie qu'il faut réfléchir à la manière dont vos fonctions sont structurées.</p>
  <p>Vous trouverez ci-dessous une fonction de <span class="notranslate">GML</span> Visual qui renvoie une valeur :</p>
  <p><img alt="Declare A New Function Syntax" class="center" src="../../assets/Images/Scripting_Reference/Drag_And_Drop/Reference/Common/a_Common_Declare_Function.png" /></p>
  <p>La fonction ci-dessus vérifie simplement toutes les instances d'une pièce pour voir quelle est leur <span class="inline">object_index</span> et si l'une d'entre elles est l'objet joueur, la fonction renverra <span class="inline">true</span> (mettant fin à l'appel de la fonction) ou <span class="inline">false</span>. Vous appellerez cette fonction comme ceci :</p>
  <p><img>Nous appelons donc la fonction et lui demandons de créer une variable temporaire (locale) pour stocker la valeur renvoyée (qui, dans ce cas, est soit <span class="inline">true</span> soit <span class="inline">false</span>), puis cette variable est vérifiée et une action est entreprise.</p>
  <p>Vous pouvez également rendre les arguments facultatifs et définir une valeur par défaut, de sorte que s'ils ne sont pas fournis dans un appel de fonction, la valeur par défaut sera utilisée à la place. Voir l'<a data-xref="{text}" href="../Drag_And_Drop_Reference/Common/Declare_A_New_Function.htm#h">exemple étendu 2</a> de l'action pour plus d'informations.</p>
  <p>Lorsque vous créez des fonctions pour vos scripts <span class="notranslate">GML</span> Visual, vous pouvez utiliser toutes les mêmes actions que lorsque vous ajoutez des actions dans un événement d'objet, et vous pouvez même appeler des fonctions à l'intérieur de fonctions, et ainsi créer un code d'action plus &quot;modulaire&quot;. Construire des scripts avec des fonctions de cette manière peut vous faire gagner beaucoup de temps en créant les mêmes séquences d'action et peut également contribuer à rendre vos séquences d'action plus faciles à lire et à déboguer.</p>
  <p> </p>
  <p> </p>
  <p> </p>
  <div class="footer">
    <div class="buttons">
      <div class="clear">
        <div style="float:left">Retour : <a href="../../Content.htm">Index</a></div>
        <div style="float:right">Suivant : <a href="Changing_DnD_To_Code.htm">Changer le visuel de <span class="notranslate">GML</span> en code</a></div>
      </div>
    </div>
    <h5><span data-keyref="Copyright Notice">Copyright <span class="notranslate">YoYo Games Ltd.</span> 2021 Tous droits réservés</span></h5>
  </div>
  <!-- KEYWORDS
GML Visual Scripts
-->
  <!-- TAGS
drag_and_drop_scripts
-->
</body>
</html>